#macro( methodExecution $testMethod )
  #if($testMethod.isAsync())
await(withTimeout(actualTest.${testMethod.javaMethodName()}(), ${testMethod.timeout()}));
  #else
actualTest.${testMethod.javaMethodName()}();
  #end
#end
#macro( methodExecutions $testMethods )
  #foreach($testMethod in $testMethods)
#methodExecution( $testMethod )
  #end
#end

/**
 * Generated test suite from j2cl_test target
 */
package ${testClass.jsUnitPackageName()};

import jsinterop.annotations.JsAsync;
import jsinterop.annotations.JsMethod;
import jsinterop.annotations.JsPackage;
import jsinterop.annotations.JsType;

@SuppressWarnings("StaticQualifiedUsingExpression")
@JsType
public class ${testClass.jsUnitAdapterClassName()} {

  @JsType(isNative = true, name = "IThenable", namespace = JsPackage.GLOBAL)
  private interface IThenable<T> {}

  @JsType(isNative = true, name = "TestCase", namespace = "goog.testing")
  private static class GoogTestCase {
    public static native GoogTestCase getActiveTestCase();
    public double promiseTimeout;
  }

  @JsMethod(namespace = JsPackage.GLOBAL)
  private static native void await(IThenable<?> thenable);

  private static IThenable<?> withTimeout(Object thenable, double timeout) {
    if (thenable == null) {
      throw new IllegalStateException("Test returned null as its promise");
    }
    GoogTestCase.getActiveTestCase().promiseTimeout = timeout;
    return ((IThenable<?>) thenable);
  }

  private ${testClass.qualifiedName()} actualTest;

#if(${testClass.isParameterized()})
  private int currentParameterValueIndex;

  public static Object[] data = new Object[0];

  static {
    int counter = 0;
    for (Object testCaseData : ${testClass.qualifiedName()}.${testClass.parameterizedDataMethod().get().javaMethodName()}()) {
      data[counter++] = testCaseData;
    }
  }

  public Object[] getData() {
    return data;
  }

  public void setCurrentParameterValueIndex(int currentParameterValueIndex) {
    this.currentParameterValueIndex = currentParameterValueIndex;
  }

  @SuppressWarnings("unchecked")
  private <T> T getParam(int index) {
    Object testCaseParam = data[currentParameterValueIndex];
    ## TODO(b/232024505): Add runtime check for the number of parameters should be equal to data value dimension
    Object[] normalizedParamValues =
      (testCaseParam instanceof Object[]) ? (Object[]) testCaseParam : new Object[] { testCaseParam };
    return (T) normalizedParamValues[index];
  }
#end

  public void setUpPage() throws Throwable {
#methodExecutions( $testClass.beforeClassMethods() )

  }

  public void tearDownPage() throws Throwable {
#methodExecutions( $testClass.afterClassMethods() )

  }

#if($testClass.needsAsyncSetup())
  @JsAsync
#end
  public IThenable<?> setUp() throws Throwable {

  actualTest = new ${testClass.qualifiedName()}(
  #set($maxIndex = ${testClass.testConstructor().numberOfParameters()} - 1)
  #if($maxIndex >= 0) ## Range [0..-1] still goes into the loop
  #foreach($number in [0..$maxIndex])
    getParam($number)#if ($foreach.hasNext),#else#end
  #end
  #end);


  #foreach($testField in ${testClass.parameterizedFields()})
  actualTest.${testField.fieldName()} = getParam(${testField.index()});
  #end
  #methodExecutions( $testClass.beforeMethods() )

    return null;
  }

#if($testClass.needsAsyncTeardown())
  @JsAsync
#end
  public IThenable<?> tearDown() throws Throwable {
    if (actualTest == null) {
      // Test failed to be constructed, thus we can not run its teardown
      return null;
    }

    try {

  #methodExecutions( $testClass.afterMethods() )

      return null;
    } finally {
      // Ensures that the test instance is always reset to null so that if the
      // next test fails to construct the instance in the setUp, the instance
      // will be null and that will prevent the tearDown from running.
      actualTest = null;
    }
  }

#foreach($testMethod in ${testClass.testMethods()})
#if($testMethod.isAsync())
  @JsAsync
#end
  public IThenable<?> ${testMethod.jsTestMethodName()}() throws Throwable {
#if ($testMethod.expectedExceptionQualifiedName())
    try {
#end
    #methodExecution( $testMethod )
#if ($testMethod.expectedExceptionQualifiedName())
    } catch (${testMethod.expectedExceptionQualifiedName()} e) {
      return null;
    }
    throw new Exception("expected exception was not thrown");
#else
    return null;
#end
  }
#end
}
