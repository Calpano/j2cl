package simplelocalclass

open class SimpleLocalClass {
 open fun test(p: Int) {
  var localVar: Int = 1
  TODO("expression.qualify needs rendering: SimpleLocalClass.this)").`fun`()
  TODO("expression.qualify needs rendering: SimpleLocalClass.this)")
 }

 open fun `fun`() {
  var localVar: Int = 1
 }

 open fun foo() {}
}

open class `1InnerClass` {
 val `this`: simplelocalclass.SimpleLocalClass?

 open fun `fun`(): Int {
  return this.localVar + this.p
 }

 val localVar: Int

 val p: Int
}

open class `1InnerClassWithoutCaptures` {
 val `this`: simplelocalclass.SimpleLocalClass?
}

open class `2InnerClass` {
 val `this`: simplelocalclass.SimpleLocalClass?

 internal var field: Int = this.localVar

 val localVar: Int
}

open class `1Abc$InnerClass` {
 val `this`: simplelocalclass.SimpleLocalClass?
}

open class `1Klm$InnerClass` {
 val `this`: simplelocalclass.SimpleLocalClass?
}
