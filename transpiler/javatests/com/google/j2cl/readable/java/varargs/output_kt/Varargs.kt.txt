// Generated from "varargs/Varargs.java"
package varargs

import javaemul.lang.*
import kotlin.jvm.*

open class Varargs {
 @kotlin.jvm.JvmField var args_private_2: kotlin.Array<kotlin.Any?>? = null

 constructor(vararg args: kotlin.Int)

 constructor(): this(1)

 open fun test(a: kotlin.Int, vararg args: kotlin.Any?) {
  val args_1: kotlin.Array<kotlin.Any?>? = args as kotlin.Array<kotlin.Any?>?
 }

 open fun testCloneable(vararg args: kotlin.Cloneable?) {
  val args_1: kotlin.Array<kotlin.Cloneable?>? = args as kotlin.Array<kotlin.Cloneable?>?
 }

 open fun testSerializable(vararg args: java.io.Serializable?) {
  val args_1: kotlin.Array<java.io.Serializable?>? = args as kotlin.Array<java.io.Serializable?>?
 }

 open fun testAssignment(vararg args: kotlin.Any?) {
  val args_1: kotlin.Array<kotlin.Any?>? = args as kotlin.Array<kotlin.Any?>?
  this.args_private_2 = args_1 as kotlin.Array<kotlin.Any?>?
 }

 open fun testLambda(functionalInterface: varargs.Varargs.FunctionalInterface?) {}

 open fun main() {
  val v: varargs.Varargs? = varargs.Varargs()
  v!!.test(1)
  v!!.test(1, kotlin.Any())
  v!!.test(1, kotlin.Any())
  v!!.test(1)
  v!!.test(1)
  v!!.testCloneable()
  v!!.testSerializable()
  v!!.testLambda(varargs.Varargs.FunctionalInterface { it: kotlin.Array<out kotlin.String?>? ->
   val it_1: kotlin.Array<kotlin.String?>? = it as kotlin.Array<kotlin.String?>?
   this.args_private_2 = it_1 as kotlin.Array<kotlin.Any?>?
  })
 }

 companion object {
  @kotlin.jvm.JvmStatic
  fun <T> `fun`(vararg elements: T) {
   val elements_1: kotlin.Array<T>? = elements as kotlin.Array<T>?
  }

  @kotlin.jvm.JvmStatic
  fun <E> bar(a: E, b: E) {
   varargs.Varargs.`fun`<E>(a, b)
  }
 }

 fun interface FunctionalInterface {
  fun apply(vararg strings: kotlin.String?)
 }
}

open class Child: varargs.Varargs {
 constructor(): super(1)
}
