goog.module('jsmethod.JsMethodExample.InterfaceWithMethod$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('jsmethod.JsMethodExample.InterfaceWithMethod.$LambdaAdaptor$impl');

/**
 * @interface
 * @template T
 */
class InterfaceWithMethod {
 /** @abstract @nodts @return {?string} */
 m_m__java_lang_String() {}
 /** @nodts @template T @return {InterfaceWithMethod<T>} */
 static $adapt(/** ?function():?string */ fn) {
  InterfaceWithMethod.$clinit();
  return /**@type {!$LambdaAdaptor<T>}*/ (new $LambdaAdaptor(fn));
 }
 /** @nodts */
 static $clinit() {
  InterfaceWithMethod.$clinit = () =>{};
  InterfaceWithMethod.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  ctor.prototype.$implements__jsmethod_JsMethodExample_InterfaceWithMethod = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__jsmethod_JsMethodExample_InterfaceWithMethod;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('jsmethod.JsMethodExample.InterfaceWithMethod.$LambdaAdaptor$impl');
 }
}
InterfaceWithMethod.$markImplementor(/**@type {Function}*/ (InterfaceWithMethod));
$Util.$setClassMetadataForInterface(InterfaceWithMethod, 'jsmethod.JsMethodExample$InterfaceWithMethod');

exports = InterfaceWithMethod;

//# sourceMappingURL=JsMethodExample$InterfaceWithMethod.js.map
