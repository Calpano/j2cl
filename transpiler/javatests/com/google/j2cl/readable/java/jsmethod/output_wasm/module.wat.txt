;;; Code for jsmethod.JsMethodExample [vtable]
(global $jsmethod.JsMethodExample.vtable (mut (ref null $jsmethod.JsMethodExample.vtable)) (ref.null $jsmethod.JsMethodExample.vtable))

;;; Code for jsmethod.JsMethodExample.Base [vtable]
(global $jsmethod.JsMethodExample.Base.vtable (mut (ref null $jsmethod.JsMethodExample.Base.vtable)) (ref.null $jsmethod.JsMethodExample.Base.vtable))

;;; Code for jsmethod.JsMethodExample.Sub [vtable]
(global $jsmethod.JsMethodExample.Sub.vtable (mut (ref null $jsmethod.JsMethodExample.Sub.vtable)) (ref.null $jsmethod.JsMethodExample.Sub.vtable))

;;; Code for jsmethod.JsMethodExample [static fields]
(global $f_$initialized__jsmethod_JsMethodExample (mut i32) (i32.const 0))

;;; Code for jsmethod.JsMethodExample.Base [static fields]
(global $f_$initialized__jsmethod_JsMethodExample_Base (mut i32) (i32.const 0))

;;; Code for jsmethod.JsMethodExample.I [static fields]
(global $f_$initialized__jsmethod_JsMethodExample_I (mut i32) (i32.const 0))

;;; Code for jsmethod.JsMethodExample.Sub [static fields]
(global $f_$initialized__jsmethod_JsMethodExample_Sub (mut i32) (i32.const 0))

;;; Code for jsmethod.JsMethodExample [CLASS]
(type $jsmethod.JsMethodExample (struct
 (field $vtable (ref null $jsmethod.JsMethodExample.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $jsmethod.JsMethodExample.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_testMethod__java_util_ArrayList (mut (ref $function.__$java.util.ArrayList)))
))

;;; JsMethodExample()
(func $m_<init>__void@jsmethod.JsMethodExample
 (param $this (ref null $jsmethod.JsMethodExample))
 (result (ref null $jsmethod.JsMethodExample))
 (block $return.label
  (block
   ;; jsmethod.JsMethodExample.$clinit();
   (call $$clinit__void@jsmethod.JsMethodExample )
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void JsMethodExample.log(String message)
(func $m_log__java_lang_String__void@jsmethod.JsMethodExample
 (param $message (ref null $java.lang.String))
 (block $return.label
  (block
  )
 )
)

;;; void JsMethodExample.main(String... args)
(func $m_main__arrayOf_java_lang_String__void@jsmethod.JsMethodExample
 (param $args (ref null $javaemul.internal.WasmArray.OfObject))
 (block $return.label
  (block
   ;; jsmethod.JsMethodExample.$clinit();
   (call $$clinit__void@jsmethod.JsMethodExample )
   ;; jsmethod.JsMethodExample.log(javaemul.internal.StringPool.$getString_|test|());
   (call $m_log__java_lang_String__void@jsmethod.JsMethodExample (call $$getString_|test|__java_lang_String@javaemul.internal.StringPool ))
  )
 )
)

;;; T JsMethodExample.testMethod()
(func $m_testMethod__java_util_ArrayList@jsmethod.JsMethodExample
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.util.ArrayList))
 (local $return.value (ref null $java.util.ArrayList))
 (local $this (ref null $jsmethod.JsMethodExample))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsmethod.JsMethodExample.rtt)))
 (block $return.label
  (block
  )
 )
 (local.get $return.value)
)
(elem declare func $m_testMethod__java_util_ArrayList@jsmethod.JsMethodExample)

;;; void JsMethodExample.$clinit()
(func $$clinit__void@jsmethod.JsMethodExample
 (block $return.label
  (block
   ;; if (jsmethod.JsMethodExample.$initialized) return;
   (if (global.get $f_$initialized__jsmethod_JsMethodExample)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsmethod.JsMethodExample.$initialized = true);
   (global.set $f_$initialized__jsmethod_JsMethodExample (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> JsMethodExample.getClass()
(func $m_getClass__java_lang_Class@jsmethod.JsMethodExample
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $jsmethod.JsMethodExample))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsmethod.JsMethodExample.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsmethod.JsMethodExample();
   (local.set $return.value (call $$getJsmethod.JsMethodExample__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsmethod.JsMethodExample)

;;; Code for jsmethod.JsMethodExample.Base [CLASS]
(type $jsmethod.JsMethodExample.Base (struct
 (field $vtable (ref null $jsmethod.JsMethodExample.Base.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $jsmethod.JsMethodExample.Base.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_m__java_lang_Object__void (mut (ref $function.$java.lang.Object__$void)))
))

;;; Base()
(func $m_<init>__void_$pp_jsmethod@jsmethod.JsMethodExample.Base
 (param $this (ref null $jsmethod.JsMethodExample.Base))
 (result (ref null $jsmethod.JsMethodExample.Base))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void Base.m(T t)
(func $m_m__java_lang_Object__void@jsmethod.JsMethodExample.Base
 (param $this.untyped (ref null $java.lang.Object))
 (param $t (ref null $java.lang.Object))
 (local $this (ref null $jsmethod.JsMethodExample.Base))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsmethod.JsMethodExample.Base.rtt)))
 (block $return.label
  (block
  )
 )
)
(elem declare func $m_m__java_lang_Object__void@jsmethod.JsMethodExample.Base)

;;; void Base.$clinit()
(func $$clinit__void@jsmethod.JsMethodExample.Base
 (block $return.label
  (block
   ;; if (jsmethod.JsMethodExample.Base.$initialized) return;
   (if (global.get $f_$initialized__jsmethod_JsMethodExample_Base)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsmethod.JsMethodExample.Base.$initialized = true);
   (global.set $f_$initialized__jsmethod_JsMethodExample_Base (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> Base.getClass()
(func $m_getClass__java_lang_Class@jsmethod.JsMethodExample.Base
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $jsmethod.JsMethodExample.Base))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsmethod.JsMethodExample.Base.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsmethod.JsMethodExample.Base();
   (local.set $return.value (call $$getJsmethod.JsMethodExample.Base__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsmethod.JsMethodExample.Base)

;;; Code for jsmethod.JsMethodExample.I [INTERFACE]

;;; void I.$clinit()
(func $$clinit__void@jsmethod.JsMethodExample.I
 (block $return.label
  (block
   ;; if (jsmethod.JsMethodExample.I.$initialized) return;
   (if (global.get $f_$initialized__jsmethod_JsMethodExample_I)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsmethod.JsMethodExample.I.$initialized = true);
   (global.set $f_$initialized__jsmethod_JsMethodExample_I (i32.const 1))
  )
 )
)

;;; Class<?> I.getClass()
(func $m_getClass__java_lang_Class@jsmethod.JsMethodExample.I
 (param $this (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsmethod.JsMethodExample.I();
   (local.set $return.value (call $$getJsmethod.JsMethodExample.I__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsmethod.JsMethodExample.I)

;;; Code for jsmethod.JsMethodExample.Sub [CLASS]
(type $jsmethod.JsMethodExample.Sub (struct
 (field $vtable (ref null $jsmethod.JsMethodExample.Sub.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $jsmethod.JsMethodExample.Sub.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_m__java_lang_Object__void (mut (ref $function.$java.lang.Object__$void)))
 (field $m_m__java_lang_String__void (mut (ref $function.$java.lang.String__$void)))
))

;;; Sub()
(func $m_<init>__void_$pp_jsmethod@jsmethod.JsMethodExample.Sub
 (param $this (ref null $jsmethod.JsMethodExample.Sub))
 (result (ref null $jsmethod.JsMethodExample.Sub))
 (block $return.label
  (block
   ;; Base.this.Base.<init>();
   (drop (call $m_<init>__void_$pp_jsmethod@jsmethod.JsMethodExample.Base (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void Sub.m(String s)
(func $m_m__java_lang_String__void@jsmethod.JsMethodExample.Sub
 (param $this.untyped (ref null $java.lang.Object))
 (param $s (ref null $java.lang.String))
 (local $this (ref null $jsmethod.JsMethodExample.Sub))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsmethod.JsMethodExample.Sub.rtt)))
 (block $return.label
  (block
  )
 )
)
(elem declare func $m_m__java_lang_String__void@jsmethod.JsMethodExample.Sub)

;;; void Sub.m(Object arg0)
(func $m_m__java_lang_Object__void@jsmethod.JsMethodExample.Sub
 (param $this.untyped (ref null $java.lang.Object))
 (param $arg0 (ref null $java.lang.Object))
 (local $$cast_expression (ref null $java.lang.Object))
 (local $this (ref null $jsmethod.JsMethodExample.Sub))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsmethod.JsMethodExample.Sub.rtt)))
 (block $return.label
  (block
   ;; Sub.this.m((Object $cast_expression = arg0,(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((String) $cast_expression))));
   (call_ref (local.get $this)(block (result (ref null $java.lang.String))
    
    (local.set $$cast_expression (local.get $arg0))
    (if (result (ref null $java.lang.String)) (ref.is_null (local.get $$cast_expression)) (then (ref.null $java.lang.String)) (else (ref.cast (local.get $$cast_expression) (global.get $java.lang.String.rtt))))
   )(struct.get $jsmethod.JsMethodExample.Sub.vtable $m_m__java_lang_String__void (struct.get $jsmethod.JsMethodExample.Sub $vtable(local.get $this))))
  )
 )
)
(elem declare func $m_m__java_lang_Object__void@jsmethod.JsMethodExample.Sub)

;;; void Sub.$clinit()
(func $$clinit__void@jsmethod.JsMethodExample.Sub
 (block $return.label
  (block
   ;; if (jsmethod.JsMethodExample.Sub.$initialized) return;
   (if (global.get $f_$initialized__jsmethod_JsMethodExample_Sub)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsmethod.JsMethodExample.Sub.$initialized = true);
   (global.set $f_$initialized__jsmethod_JsMethodExample_Sub (i32.const 1))
   ;; jsmethod.JsMethodExample.Base.$clinit();
   (call $$clinit__void@jsmethod.JsMethodExample.Base )
  )
 )
)

;;; Class<?> Sub.getClass()
(func $m_getClass__java_lang_Class@jsmethod.JsMethodExample.Sub
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $jsmethod.JsMethodExample.Sub))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsmethod.JsMethodExample.Sub.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsmethod.JsMethodExample.Sub();
   (local.set $return.value (call $$getJsmethod.JsMethodExample.Sub__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsmethod.JsMethodExample.Sub)

 ;;; Code for jsmethod.JsMethodExample [vtable.init]
 (global.set $jsmethod.JsMethodExample.vtable (struct.new_with_rtt $jsmethod.JsMethodExample.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@jsmethod.JsMethodExample) (ref.func $m_testMethod__java_util_ArrayList@jsmethod.JsMethodExample) (rtt.canon $jsmethod.JsMethodExample.vtable)))

 ;;; Code for jsmethod.JsMethodExample.Sub [vtable.init]
 (global.set $jsmethod.JsMethodExample.Sub.vtable (struct.new_with_rtt $jsmethod.JsMethodExample.Sub.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@jsmethod.JsMethodExample.Sub) (ref.func $m_m__java_lang_Object__void@jsmethod.JsMethodExample.Sub) (ref.func $m_m__java_lang_String__void@jsmethod.JsMethodExample.Sub) (rtt.canon $jsmethod.JsMethodExample.Sub.vtable)))
