package jsmethod

open class JsMethodExample {
 constructor(): super()

 open fun <T: java.util.ArrayList<kotlin.String?>?> testMethod(): T? {}

 companion object {
  @JvmStatic
  fun log(message: kotlin.String?) {}

  @JvmStatic
  fun main(vararg args: kotlin.String?) {
   jsmethod.JsMethodExample.log("test")
  }
 }
}

abstract class `JsMethodExample$Base`<T> {
 internal constructor(): super()

 open fun m(t: T?) {}
}

fun interface `JsMethodExample$I` {
 fun m(s: kotlin.String?)
}

open class `JsMethodExample$Sub`: jsmethod.`JsMethodExample$I`, jsmethod.`JsMethodExample$Base`<kotlin.String?> {
 internal constructor(): super()

 open override fun m(s: kotlin.String?) {}
}
