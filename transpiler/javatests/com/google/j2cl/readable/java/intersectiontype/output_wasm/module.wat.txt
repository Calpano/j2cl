;;; Code for intersectiontype.IntersectionTypeTest

;;; INTERFACE  Getable

;;; INTERFACE  Setable

;;; INTERFACE  Serial

;;; INTERFACE  Cmp

;;; INTERFACE  Cmp2

;;; CLASS  IntersectionTypeTest
(type $intersectiontype.IntersectionTypeTest (struct
 (field $vtable (ref null $intersectiontype.IntersectionTypeTest.vtable))
 (field $$systemIdentityHashCode@java.lang.Object (mut i32))
))
(type $intersectiontype.IntersectionTypeTest.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_cast3__java_lang_Object__java_lang_Object (mut (ref $function.$java.lang.Object__$java.lang.Object)))
 (field $m_testMethodCall__void (mut (ref $function.__$void)))
))
(global $intersectiontype.IntersectionTypeTest.vtable (mut (ref null $intersectiontype.IntersectionTypeTest.vtable)) (ref.null $intersectiontype.IntersectionTypeTest.vtable))

;;; IntersectionTypeTest()
(func $m_<init>__void@intersectiontype.IntersectionTypeTest
 (param $this (ref null $intersectiontype.IntersectionTypeTest))
 (result (ref null $intersectiontype.IntersectionTypeTest))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void IntersectionTypeTest.getAndSet(T object)
(func $m_getAndSet__intersectiontype_Getable__void@intersectiontype.IntersectionTypeTest
 (param $object (ref null $java.lang.Object))
 (local $$qualifier (ref null $java.lang.Object))
 (block $return.label
  (block
   (block
    ;; Setable $qualifier = ((Setable) object);
    
    (local.set $$qualifier (local.get $object))
    ;; $qualifier.set(1);
    
   )
   ;; object.get();
   (drop (ref.null $java.lang.Object))
  )
 )
)

;;; Getable<T> IntersectionTypeTest.cast(Object o)
(func $m_cast__java_lang_Object__intersectiontype_Getable@intersectiontype.IntersectionTypeTest
 (param $o (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; if ((o == null)) {
   (if (ref.eq (local.get $o) (ref.null $java.lang.Object))
    (then
     (block
      ;; return (((Getable<T>&Setable)) o);
      (local.set $return.value (ref.null $java.lang.Object))
      (br $return.label)
     )
    )
   )
   ;; return (((Getable<T>&Setable)) o);
   (local.set $return.value (ref.null $java.lang.Object))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; Getable<Comparable<String>> IntersectionTypeTest.cast1(Object s)
(func $m_cast1__java_lang_Object__intersectiontype_Getable@intersectiontype.IntersectionTypeTest
 (param $s (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; return (((Getable<Comparable<String>>&Setable)) s);
   (local.set $return.value (ref.null $java.lang.Object))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; Getable<Comparable<T>> IntersectionTypeTest.cast2(Object s)
(func $m_cast2__java_lang_Object__intersectiontype_Getable@intersectiontype.IntersectionTypeTest
 (param $s (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; return (((Getable<Comparable<T>>&Setable)) s);
   (local.set $return.value (ref.null $java.lang.Object))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; Object IntersectionTypeTest.cast3(Object s)
(func $m_cast3__java_lang_Object__java_lang_Object@intersectiontype.IntersectionTypeTest
 (param $this.untyped (ref null $java.lang.Object))
 (param $s (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (local $this (ref null $intersectiontype.IntersectionTypeTest))
 (local.set $this (ref.cast $java.lang.Object $intersectiontype.IntersectionTypeTest (local.get $this.untyped) (global.get $intersectiontype.IntersectionTypeTest.rtt)))
 (block $return.label
  (block
   ;; return s;
   (local.set $return.value (local.get $s))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_cast3__java_lang_Object__java_lang_Object@intersectiontype.IntersectionTypeTest)

;;; Cmp IntersectionTypeTest.method()
(func $m_method__intersectiontype_Cmp@intersectiontype.IntersectionTypeTest
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; return (((Cmp&Serial)) function (){
   (local.set $return.value (ref.null $java.lang.Object))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; Cmp2 IntersectionTypeTest.method2()
(func $m_method2__intersectiontype_Cmp2@intersectiontype.IntersectionTypeTest
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (local $a i32)
 (block $return.label
  (block
   ;; return (((Cmp2&Serial)) function (int a){
   (local.set $return.value (ref.null $java.lang.Object))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; void IntersectionTypeTest.testClosureAssignment(Object o)
(func $m_testClosureAssignment__java_lang_Object__void@intersectiontype.IntersectionTypeTest
 (param $o (ref null $java.lang.Object))
 (local $e (ref null $intersectiontype.IntersectionTypeTest.A))
 (local $g (ref null $java.lang.Object))
 (local $s (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; A e = (((A&EmptyA&EmptyB)) o);
   
   (local.set $e (ref.null $intersectiontype.IntersectionTypeTest.A))
   ;; EmptyA g = ((EmptyA) (((A&EmptyA&EmptyB)) o));
   
   (local.set $g (ref.null $intersectiontype.IntersectionTypeTest.A))
   ;; EmptyB s = ((EmptyB) (((A&EmptyA&EmptyB)) o));
   
   (local.set $s (ref.null $intersectiontype.IntersectionTypeTest.A))
  )
 )
)

;;; T IntersectionTypeTest.get(T t)
(func $m_get__java_lang_Object__java_lang_Object@intersectiontype.IntersectionTypeTest
 (param $t (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; return t;
   (local.set $return.value (local.get $t))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; T IntersectionTypeTest.m()
(func $m_m__intersectiontype_IntersectionTypeTest_A@intersectiontype.IntersectionTypeTest
 (result (ref null $intersectiontype.IntersectionTypeTest.A))
 (local $return.value (ref null $intersectiontype.IntersectionTypeTest.A))
 (block $return.label
  (block
   ;; return ((T) intersectiontype.IntersectionTypeTest.get(new Object.<init>()));
   (local.set $return.value (ref.null $intersectiontype.IntersectionTypeTest.A))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; Getable<T> IntersectionTypeTest.n()
(func $m_n__intersectiontype_Getable@intersectiontype.IntersectionTypeTest
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; return null;
   (local.set $return.value (ref.null $java.lang.Object))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; void IntersectionTypeTest.set(T t)
(func $m_set__intersectiontype_IntersectionTypeTest_A__void@intersectiontype.IntersectionTypeTest
 (param $t (ref null $intersectiontype.IntersectionTypeTest.A))
 (block $return.label
  (block
  )
 )
)

;;; void IntersectionTypeTest.testMethodCall()
(func $m_testMethodCall__void@intersectiontype.IntersectionTypeTest
 (param $this.untyped (ref null $java.lang.Object))
 (local $o (ref null $java.lang.Object))
 (local $g (ref null $java.lang.Object))
 (local $this (ref null $intersectiontype.IntersectionTypeTest))
 (local.set $this (ref.cast $java.lang.Object $intersectiontype.IntersectionTypeTest (local.get $this.untyped) (global.get $intersectiontype.IntersectionTypeTest.rtt)))
 (block $return.label
  (block
   ;; Object o = intersectiontype.IntersectionTypeTest.m();
   
   (local.set $o (call $m_m__intersectiontype_IntersectionTypeTest_A@intersectiontype.IntersectionTypeTest ))
   ;; intersectiontype.IntersectionTypeTest.set((((A&EmptyA)) o));
   (call $m_set__intersectiontype_IntersectionTypeTest_A__void@intersectiontype.IntersectionTypeTest (ref.null $intersectiontype.IntersectionTypeTest.A))
   ;; intersectiontype.IntersectionTypeTest.set(intersectiontype.IntersectionTypeTest.m());
   (call $m_set__intersectiontype_IntersectionTypeTest_A__void@intersectiontype.IntersectionTypeTest (call $m_m__intersectiontype_IntersectionTypeTest_A@intersectiontype.IntersectionTypeTest ))
   ;; Getable<?> g = intersectiontype.IntersectionTypeTest.n();
   
   (local.set $g (call $m_n__intersectiontype_Getable@intersectiontype.IntersectionTypeTest ))
  )
 )
)
(elem declare func $m_testMethodCall__void@intersectiontype.IntersectionTypeTest)

;;; CLASS  MapEntry
(type $intersectiontype.IntersectionTypeTest.MapEntry (struct
 (field $vtable (ref null $intersectiontype.IntersectionTypeTest.MapEntry.vtable))
 (field $$systemIdentityHashCode@java.lang.Object (mut i32))
 (field $this@intersectiontype.IntersectionTypeTest.MapEntry (mut (ref null $intersectiontype.IntersectionTypeTest)))
))
(type $intersectiontype.IntersectionTypeTest.MapEntry.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_method__java_lang_Object__intersectiontype_Getable (mut (ref $function.$java.lang.Object__$java.lang.Object)))
))
(global $intersectiontype.IntersectionTypeTest.MapEntry.vtable (mut (ref null $intersectiontype.IntersectionTypeTest.MapEntry.vtable)) (ref.null $intersectiontype.IntersectionTypeTest.MapEntry.vtable))

;;; MapEntry(IntersectionTypeTest<U> $outer_this)
(func $m_<init>__intersectiontype_IntersectionTypeTest__void_$pp_intersectiontype@intersectiontype.IntersectionTypeTest.MapEntry
 (param $this (ref null $intersectiontype.IntersectionTypeTest.MapEntry))
 (param $$outer_this (ref null $intersectiontype.IntersectionTypeTest))
 (result (ref null $intersectiontype.IntersectionTypeTest.MapEntry))
 (block $return.label
  (block
   ;; (MapEntry.this.this = $outer_this);
   (struct.set $intersectiontype.IntersectionTypeTest.MapEntry $this@intersectiontype.IntersectionTypeTest.MapEntry(local.get $this) (local.get $$outer_this))
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; Getable<T> MapEntry.method(Object o)
(func $m_method__java_lang_Object__intersectiontype_Getable@intersectiontype.IntersectionTypeTest.MapEntry
 (param $this.untyped (ref null $java.lang.Object))
 (param $o (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (local $this (ref null $intersectiontype.IntersectionTypeTest.MapEntry))
 (local.set $this (ref.cast $java.lang.Object $intersectiontype.IntersectionTypeTest.MapEntry (local.get $this.untyped) (global.get $intersectiontype.IntersectionTypeTest.MapEntry.rtt)))
 (block $return.label
  (block
   ;; return (((Getable<T>&Setable)) o);
   (local.set $return.value (ref.null $java.lang.Object))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_method__java_lang_Object__intersectiontype_Getable@intersectiontype.IntersectionTypeTest.MapEntry)

;;; CLASS  A
(type $intersectiontype.IntersectionTypeTest.A (struct
 (field $vtable (ref null $intersectiontype.IntersectionTypeTest.A.vtable))
 (field $$systemIdentityHashCode@java.lang.Object (mut i32))
))
(type $intersectiontype.IntersectionTypeTest.A.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))
(global $intersectiontype.IntersectionTypeTest.A.vtable (mut (ref null $intersectiontype.IntersectionTypeTest.A.vtable)) (ref.null $intersectiontype.IntersectionTypeTest.A.vtable))

;;; A()
(func $m_<init>__void_$p_intersectiontype_IntersectionTypeTest_A@intersectiontype.IntersectionTypeTest.A
 (param $this (ref null $intersectiontype.IntersectionTypeTest.A))
 (result (ref null $intersectiontype.IntersectionTypeTest.A))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; INTERFACE  EmptyA

;;; INTERFACE  EmptyB

;;; Code for intersectiontype.IntersectionTypeTest [vtable]
 (global.set $intersectiontype.IntersectionTypeTest.vtable (struct.new_with_rtt $intersectiontype.IntersectionTypeTest.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_cast3__java_lang_Object__java_lang_Object@intersectiontype.IntersectionTypeTest) (ref.func $m_testMethodCall__void@intersectiontype.IntersectionTypeTest) (rtt.canon $intersectiontype.IntersectionTypeTest.vtable)))
;;; Code for intersectiontype.IntersectionTypeTest.MapEntry [vtable]
 (global.set $intersectiontype.IntersectionTypeTest.MapEntry.vtable (struct.new_with_rtt $intersectiontype.IntersectionTypeTest.MapEntry.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_method__java_lang_Object__intersectiontype_Getable@intersectiontype.IntersectionTypeTest.MapEntry) (rtt.canon $intersectiontype.IntersectionTypeTest.MapEntry.vtable)))
;;; Code for intersectiontype.IntersectionTypeTest.A [vtable]
 (global.set $intersectiontype.IntersectionTypeTest.A.vtable (struct.new_with_rtt $intersectiontype.IntersectionTypeTest.A.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (rtt.canon $intersectiontype.IntersectionTypeTest.A.vtable)))
))
(start $.runtime.init)

