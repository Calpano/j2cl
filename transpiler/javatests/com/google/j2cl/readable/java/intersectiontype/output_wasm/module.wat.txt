;;; Code for intersectiontype.IntersectionTypeTest [vtable]
(global $intersectiontype.IntersectionTypeTest.vtable (mut (ref null $intersectiontype.IntersectionTypeTest.vtable)) (ref.null $intersectiontype.IntersectionTypeTest.vtable))

;;; Code for intersectiontype.IntersectionTypeTest.MapEntry [vtable]
(global $intersectiontype.IntersectionTypeTest.MapEntry.vtable (mut (ref null $intersectiontype.IntersectionTypeTest.MapEntry.vtable)) (ref.null $intersectiontype.IntersectionTypeTest.MapEntry.vtable))

;;; Code for intersectiontype.IntersectionTypeTest.A [vtable]
(global $intersectiontype.IntersectionTypeTest.A.vtable (mut (ref null $intersectiontype.IntersectionTypeTest.A.vtable)) (ref.null $intersectiontype.IntersectionTypeTest.A.vtable))

;;; Code for intersectiontype.Getable [static fields]
(global $f_$initialized__intersectiontype_Getable (mut i32) (i32.const 0))

;;; Code for intersectiontype.Setable [static fields]
(global $f_$initialized__intersectiontype_Setable (mut i32) (i32.const 0))

;;; Code for intersectiontype.Serial [static fields]
(global $f_$initialized__intersectiontype_Serial (mut i32) (i32.const 0))

;;; Code for intersectiontype.Cmp [static fields]
(global $f_$initialized__intersectiontype_Cmp (mut i32) (i32.const 0))

;;; Code for intersectiontype.Cmp2 [static fields]
(global $f_$initialized__intersectiontype_Cmp2 (mut i32) (i32.const 0))

;;; Code for intersectiontype.IntersectionTypeTest [static fields]
(global $f_$initialized__intersectiontype_IntersectionTypeTest (mut i32) (i32.const 0))

;;; Code for intersectiontype.IntersectionTypeTest.MapEntry [static fields]
(global $f_$initialized__intersectiontype_IntersectionTypeTest_MapEntry (mut i32) (i32.const 0))

;;; Code for intersectiontype.IntersectionTypeTest.A [static fields]
(global $f_$initialized__intersectiontype_IntersectionTypeTest_A (mut i32) (i32.const 0))

;;; Code for intersectiontype.IntersectionTypeTest.EmptyA [static fields]
(global $f_$initialized__intersectiontype_IntersectionTypeTest_EmptyA (mut i32) (i32.const 0))

;;; Code for intersectiontype.IntersectionTypeTest.EmptyB [static fields]
(global $f_$initialized__intersectiontype_IntersectionTypeTest_EmptyB (mut i32) (i32.const 0))

;;; Code for intersectiontype.Getable [INTERFACE]
(type $intersectiontype.Getable.vtable (struct
 (field $m_get__java_lang_Object (mut (ref $function.__$java.lang.Object)))
))

;;; void Getable.$clinit()
(func $$clinit__void@intersectiontype.Getable
 (block $return.label
  (block
   ;; if (intersectiontype.Getable.$initialized) return;
   (if (global.get $f_$initialized__intersectiontype_Getable)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (intersectiontype.Getable.$initialized = true);
   (global.set $f_$initialized__intersectiontype_Getable (i32.const 1))
  )
 )
)

;;; Class<?> Getable.getClass()
(func $m_getClass__java_lang_Class@intersectiontype.Getable
 (param $this (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getIntersectiontype.Getable();
   (local.set $return.value (call $$getIntersectiontype.Getable__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@intersectiontype.Getable)

;;; Code for intersectiontype.Setable [INTERFACE]
(type $intersectiontype.Setable.vtable (struct
 (field $m_set__int__void (mut (ref $function.$int__$void)))
))

;;; void Setable.$clinit()
(func $$clinit__void@intersectiontype.Setable
 (block $return.label
  (block
   ;; if (intersectiontype.Setable.$initialized) return;
   (if (global.get $f_$initialized__intersectiontype_Setable)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (intersectiontype.Setable.$initialized = true);
   (global.set $f_$initialized__intersectiontype_Setable (i32.const 1))
  )
 )
)

;;; Class<?> Setable.getClass()
(func $m_getClass__java_lang_Class@intersectiontype.Setable
 (param $this (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getIntersectiontype.Setable();
   (local.set $return.value (call $$getIntersectiontype.Setable__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@intersectiontype.Setable)

;;; Code for intersectiontype.Serial [INTERFACE]
(type $intersectiontype.Serial.vtable (struct
))

;;; void Serial.$clinit()
(func $$clinit__void@intersectiontype.Serial
 (block $return.label
  (block
   ;; if (intersectiontype.Serial.$initialized) return;
   (if (global.get $f_$initialized__intersectiontype_Serial)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (intersectiontype.Serial.$initialized = true);
   (global.set $f_$initialized__intersectiontype_Serial (i32.const 1))
  )
 )
)

;;; Class<?> Serial.getClass()
(func $m_getClass__java_lang_Class@intersectiontype.Serial
 (param $this (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getIntersectiontype.Serial();
   (local.set $return.value (call $$getIntersectiontype.Serial__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@intersectiontype.Serial)

;;; Code for intersectiontype.Cmp [INTERFACE]
(type $intersectiontype.Cmp.vtable (struct
 (field $m_cmp__int (mut (ref $function.__$int)))
))

;;; void Cmp.$clinit()
(func $$clinit__void@intersectiontype.Cmp
 (block $return.label
  (block
   ;; if (intersectiontype.Cmp.$initialized) return;
   (if (global.get $f_$initialized__intersectiontype_Cmp)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (intersectiontype.Cmp.$initialized = true);
   (global.set $f_$initialized__intersectiontype_Cmp (i32.const 1))
  )
 )
)

;;; Class<?> Cmp.getClass()
(func $m_getClass__java_lang_Class@intersectiontype.Cmp
 (param $this (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getIntersectiontype.Cmp();
   (local.set $return.value (call $$getIntersectiontype.Cmp__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@intersectiontype.Cmp)

;;; Code for intersectiontype.Cmp2 [INTERFACE]
(type $intersectiontype.Cmp2.vtable (struct
 (field $m_cmp__int__int (mut (ref $function.$int__$int)))
))

;;; void Cmp2.$clinit()
(func $$clinit__void@intersectiontype.Cmp2
 (block $return.label
  (block
   ;; if (intersectiontype.Cmp2.$initialized) return;
   (if (global.get $f_$initialized__intersectiontype_Cmp2)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (intersectiontype.Cmp2.$initialized = true);
   (global.set $f_$initialized__intersectiontype_Cmp2 (i32.const 1))
  )
 )
)

;;; Class<?> Cmp2.getClass()
(func $m_getClass__java_lang_Class@intersectiontype.Cmp2
 (param $this (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getIntersectiontype.Cmp2();
   (local.set $return.value (call $$getIntersectiontype.Cmp2__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@intersectiontype.Cmp2)

;;; Code for intersectiontype.IntersectionTypeTest [CLASS]
(type $intersectiontype.IntersectionTypeTest (struct
 (field $vtable (ref null $intersectiontype.IntersectionTypeTest.vtable)) (field $itable (ref null $itable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $intersectiontype.IntersectionTypeTest.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_cast3__java_lang_Object__java_lang_Object (mut (ref $function.$java.lang.Object__$java.lang.Object)))
 (field $m_testMethodCall__void (mut (ref $function.__$void)))
))

;;; IntersectionTypeTest()
(func $m_<init>__void@intersectiontype.IntersectionTypeTest
 (param $this (ref null $intersectiontype.IntersectionTypeTest))
 (result (ref null $intersectiontype.IntersectionTypeTest))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void IntersectionTypeTest.getAndSet(T object)
(func $m_getAndSet__intersectiontype_Getable__void@intersectiontype.IntersectionTypeTest
 (param $object (ref null $java.lang.Object))
 (local $$qualifier (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; intersectiontype.IntersectionTypeTest.$clinit();
   (call $$clinit__void@intersectiontype.IntersectionTypeTest )
   (block
    ;; Setable $qualifier = ((Setable) object);
    
    (local.set $$qualifier (local.get $object))
    ;; $qualifier.set(1);
    (call_ref (local.get $$qualifier)(i32.const 1)(struct.get $intersectiontype.Setable.vtable $m_set__int__void (ref.cast (array.get $itable (struct.get $java.lang.Object $itable (local.get $$qualifier)) (i32.const -1)) (rtt.canon $intersectiontype.Setable.vtable)) ))
   )
   ;; object.get();
   (drop (call_ref (local.get $object)(struct.get $intersectiontype.Getable.vtable $m_get__java_lang_Object (ref.cast (array.get $itable (struct.get $java.lang.Object $itable (local.get $object)) (i32.const -1)) (rtt.canon $intersectiontype.Getable.vtable)) )))
  )
 )
)

;;; Getable<T> IntersectionTypeTest.cast(Object o)
(func $m_cast__java_lang_Object__intersectiontype_Getable@intersectiontype.IntersectionTypeTest
 (param $o (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; intersectiontype.IntersectionTypeTest.$clinit();
   (call $$clinit__void@intersectiontype.IntersectionTypeTest )
   ;; if (javaemul.internal.Platform.isNull(o)) {
   (if (ref.is_null (local.get $o))
    (then
     (block
      ;; return (((Getable<T>&Setable)) o);
      (local.set $return.value (local.get $o))
      (br $return.label)
     )
    )
   )
   ;; return (((Getable<T>&Setable)) o);
   (local.set $return.value (local.get $o))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; Getable<Comparable<String>> IntersectionTypeTest.cast1(Object s)
(func $m_cast1__java_lang_Object__intersectiontype_Getable@intersectiontype.IntersectionTypeTest
 (param $s (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; intersectiontype.IntersectionTypeTest.$clinit();
   (call $$clinit__void@intersectiontype.IntersectionTypeTest )
   ;; return (((Getable<Comparable<String>>&Setable)) s);
   (local.set $return.value (local.get $s))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; Getable<Comparable<T>> IntersectionTypeTest.cast2(Object s)
(func $m_cast2__java_lang_Object__intersectiontype_Getable@intersectiontype.IntersectionTypeTest
 (param $s (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; intersectiontype.IntersectionTypeTest.$clinit();
   (call $$clinit__void@intersectiontype.IntersectionTypeTest )
   ;; return (((Getable<Comparable<T>>&Setable)) s);
   (local.set $return.value (local.get $s))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; Object IntersectionTypeTest.cast3(Object s)
(func $m_cast3__java_lang_Object__java_lang_Object@intersectiontype.IntersectionTypeTest
 (param $this.untyped (ref null $java.lang.Object))
 (param $s (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (local $this (ref null $intersectiontype.IntersectionTypeTest))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $intersectiontype.IntersectionTypeTest.rtt)))
 (block $return.label
  (block
   ;; return s;
   (local.set $return.value (local.get $s))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_cast3__java_lang_Object__java_lang_Object@intersectiontype.IntersectionTypeTest)

;;; Cmp IntersectionTypeTest.method()
(func $m_method__intersectiontype_Cmp@intersectiontype.IntersectionTypeTest
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; intersectiontype.IntersectionTypeTest.$clinit();
   (call $$clinit__void@intersectiontype.IntersectionTypeTest )
   ;; return (((Cmp&Serial)) function (){
   (local.set $return.value (ref.null $java.lang.Object))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; Cmp2 IntersectionTypeTest.method2()
(func $m_method2__intersectiontype_Cmp2@intersectiontype.IntersectionTypeTest
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (local $a i32)
 (block $return.label
  (block
   ;; intersectiontype.IntersectionTypeTest.$clinit();
   (call $$clinit__void@intersectiontype.IntersectionTypeTest )
   ;; return (((Cmp2&Serial)) function (int a){
   (local.set $return.value (ref.null $java.lang.Object))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; void IntersectionTypeTest.testClosureAssignment(Object o)
(func $m_testClosureAssignment__java_lang_Object__void@intersectiontype.IntersectionTypeTest
 (param $o (ref null $java.lang.Object))
 (local $e (ref null $intersectiontype.IntersectionTypeTest.A))
 (local $g (ref null $java.lang.Object))
 (local $s (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; intersectiontype.IntersectionTypeTest.$clinit();
   (call $$clinit__void@intersectiontype.IntersectionTypeTest )
   ;; A e = (((A&EmptyA&EmptyB)) o);
   
   (local.set $e (ref.cast (local.get $o) (global.get $intersectiontype.IntersectionTypeTest.A.rtt)))
   ;; EmptyA g = ((EmptyA) (((A&EmptyA&EmptyB)) o));
   
   (local.set $g (ref.cast (local.get $o) (global.get $intersectiontype.IntersectionTypeTest.A.rtt)))
   ;; EmptyB s = ((EmptyB) (((A&EmptyA&EmptyB)) o));
   
   (local.set $s (ref.cast (local.get $o) (global.get $intersectiontype.IntersectionTypeTest.A.rtt)))
  )
 )
)

;;; T IntersectionTypeTest.get(T t)
(func $m_get__java_lang_Object__java_lang_Object@intersectiontype.IntersectionTypeTest
 (param $t (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; return t;
   (local.set $return.value (local.get $t))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; T IntersectionTypeTest.m()
(func $m_m__intersectiontype_IntersectionTypeTest_A@intersectiontype.IntersectionTypeTest
 (result (ref null $intersectiontype.IntersectionTypeTest.A))
 (local $return.value (ref null $intersectiontype.IntersectionTypeTest.A))
 (block $return.label
  (block
   ;; return ((T) intersectiontype.IntersectionTypeTest.get(new Object.<init>()));
   (local.set $return.value (ref.cast (call $m_get__java_lang_Object__java_lang_Object@intersectiontype.IntersectionTypeTest (call $m_<init>__void@java.lang.Object (struct.new_with_rtt $java.lang.Object (global.get $java.lang.Object.vtable) (global.get $java.lang.Object.itable) (i32.const 0) (global.get $java.lang.Object.rtt)))) (global.get $intersectiontype.IntersectionTypeTest.A.rtt)))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; Getable<T> IntersectionTypeTest.n()
(func $m_n__intersectiontype_Getable@intersectiontype.IntersectionTypeTest
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; return null;
   (local.set $return.value (ref.null $java.lang.Object))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; void IntersectionTypeTest.set(T t)
(func $m_set__intersectiontype_IntersectionTypeTest_A__void@intersectiontype.IntersectionTypeTest
 (param $t (ref null $intersectiontype.IntersectionTypeTest.A))
 (block $return.label
  (block
  )
 )
)

;;; void IntersectionTypeTest.testMethodCall()
(func $m_testMethodCall__void@intersectiontype.IntersectionTypeTest
 (param $this.untyped (ref null $java.lang.Object))
 (local $o (ref null $java.lang.Object))
 (local $g (ref null $java.lang.Object))
 (local $this (ref null $intersectiontype.IntersectionTypeTest))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $intersectiontype.IntersectionTypeTest.rtt)))
 (block $return.label
  (block
   ;; Object o = intersectiontype.IntersectionTypeTest.m();
   
   (local.set $o (call $m_m__intersectiontype_IntersectionTypeTest_A@intersectiontype.IntersectionTypeTest ))
   ;; intersectiontype.IntersectionTypeTest.set((((A&EmptyA)) o));
   (call $m_set__intersectiontype_IntersectionTypeTest_A__void@intersectiontype.IntersectionTypeTest (ref.cast (local.get $o) (global.get $intersectiontype.IntersectionTypeTest.A.rtt)))
   ;; intersectiontype.IntersectionTypeTest.set(intersectiontype.IntersectionTypeTest.m());
   (call $m_set__intersectiontype_IntersectionTypeTest_A__void@intersectiontype.IntersectionTypeTest (call $m_m__intersectiontype_IntersectionTypeTest_A@intersectiontype.IntersectionTypeTest ))
   ;; Getable<?> g = intersectiontype.IntersectionTypeTest.n();
   
   (local.set $g (call $m_n__intersectiontype_Getable@intersectiontype.IntersectionTypeTest ))
  )
 )
)
(elem declare func $m_testMethodCall__void@intersectiontype.IntersectionTypeTest)

;;; void IntersectionTypeTest.$clinit()
(func $$clinit__void@intersectiontype.IntersectionTypeTest
 (block $return.label
  (block
   ;; if (intersectiontype.IntersectionTypeTest.$initialized) return;
   (if (global.get $f_$initialized__intersectiontype_IntersectionTypeTest)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (intersectiontype.IntersectionTypeTest.$initialized = true);
   (global.set $f_$initialized__intersectiontype_IntersectionTypeTest (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> IntersectionTypeTest.getClass()
(func $m_getClass__java_lang_Class@intersectiontype.IntersectionTypeTest
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $intersectiontype.IntersectionTypeTest))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $intersectiontype.IntersectionTypeTest.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getIntersectiontype.IntersectionTypeTest();
   (local.set $return.value (call $$getIntersectiontype.IntersectionTypeTest__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@intersectiontype.IntersectionTypeTest)

;;; Code for intersectiontype.IntersectionTypeTest.MapEntry [CLASS]
(type $intersectiontype.IntersectionTypeTest.MapEntry (struct
 (field $vtable (ref null $intersectiontype.IntersectionTypeTest.MapEntry.vtable)) (field $itable (ref null $itable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $$outer_this__intersectiontype_IntersectionTypeTest_MapEntry (mut (ref null $intersectiontype.IntersectionTypeTest)))
))
(type $intersectiontype.IntersectionTypeTest.MapEntry.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_method__java_lang_Object__intersectiontype_Getable (mut (ref $function.$java.lang.Object__$java.lang.Object)))
))

;;; MapEntry(IntersectionTypeTest<U> $outer_this)
(func $m_<init>__intersectiontype_IntersectionTypeTest__void_$pp_intersectiontype@intersectiontype.IntersectionTypeTest.MapEntry
 (param $this (ref null $intersectiontype.IntersectionTypeTest.MapEntry))
 (param $$outer_this (ref null $intersectiontype.IntersectionTypeTest))
 (result (ref null $intersectiontype.IntersectionTypeTest.MapEntry))
 (block $return.label
  (block
   ;; (MapEntry.this.this = $outer_this);
   (struct.set $intersectiontype.IntersectionTypeTest.MapEntry $$outer_this__intersectiontype_IntersectionTypeTest_MapEntry(local.get $this) (local.get $$outer_this))
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; Getable<T> MapEntry.method(Object o)
(func $m_method__java_lang_Object__intersectiontype_Getable@intersectiontype.IntersectionTypeTest.MapEntry
 (param $this.untyped (ref null $java.lang.Object))
 (param $o (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (local $this (ref null $intersectiontype.IntersectionTypeTest.MapEntry))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $intersectiontype.IntersectionTypeTest.MapEntry.rtt)))
 (block $return.label
  (block
   ;; return (((Getable<T>&Setable)) o);
   (local.set $return.value (local.get $o))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_method__java_lang_Object__intersectiontype_Getable@intersectiontype.IntersectionTypeTest.MapEntry)

;;; void MapEntry.$clinit()
(func $$clinit__void@intersectiontype.IntersectionTypeTest.MapEntry
 (block $return.label
  (block
   ;; if (intersectiontype.IntersectionTypeTest.MapEntry.$initialized) return;
   (if (global.get $f_$initialized__intersectiontype_IntersectionTypeTest_MapEntry)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (intersectiontype.IntersectionTypeTest.MapEntry.$initialized = true);
   (global.set $f_$initialized__intersectiontype_IntersectionTypeTest_MapEntry (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> MapEntry.getClass()
(func $m_getClass__java_lang_Class@intersectiontype.IntersectionTypeTest.MapEntry
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $intersectiontype.IntersectionTypeTest.MapEntry))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $intersectiontype.IntersectionTypeTest.MapEntry.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getIntersectiontype.IntersectionTypeTest.MapEntry();
   (local.set $return.value (call $$getIntersectiontype.IntersectionTypeTest.MapEntry__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@intersectiontype.IntersectionTypeTest.MapEntry)

;;; Code for intersectiontype.IntersectionTypeTest.A [CLASS]
(type $intersectiontype.IntersectionTypeTest.A (struct
 (field $vtable (ref null $intersectiontype.IntersectionTypeTest.A.vtable)) (field $itable (ref null $itable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $intersectiontype.IntersectionTypeTest.A.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))

;;; A()
(func $m_<init>__void_$p_intersectiontype_IntersectionTypeTest_A@intersectiontype.IntersectionTypeTest.A
 (param $this (ref null $intersectiontype.IntersectionTypeTest.A))
 (result (ref null $intersectiontype.IntersectionTypeTest.A))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void A.$clinit()
(func $$clinit__void@intersectiontype.IntersectionTypeTest.A
 (block $return.label
  (block
   ;; if (intersectiontype.IntersectionTypeTest.A.$initialized) return;
   (if (global.get $f_$initialized__intersectiontype_IntersectionTypeTest_A)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (intersectiontype.IntersectionTypeTest.A.$initialized = true);
   (global.set $f_$initialized__intersectiontype_IntersectionTypeTest_A (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> A.getClass()
(func $m_getClass__java_lang_Class@intersectiontype.IntersectionTypeTest.A
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $intersectiontype.IntersectionTypeTest.A))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $intersectiontype.IntersectionTypeTest.A.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getIntersectiontype.IntersectionTypeTest.A();
   (local.set $return.value (call $$getIntersectiontype.IntersectionTypeTest.A__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@intersectiontype.IntersectionTypeTest.A)

;;; Code for intersectiontype.IntersectionTypeTest.EmptyA [INTERFACE]
(type $intersectiontype.IntersectionTypeTest.EmptyA.vtable (struct
))

;;; void EmptyA.$clinit()
(func $$clinit__void@intersectiontype.IntersectionTypeTest.EmptyA
 (block $return.label
  (block
   ;; if (intersectiontype.IntersectionTypeTest.EmptyA.$initialized) return;
   (if (global.get $f_$initialized__intersectiontype_IntersectionTypeTest_EmptyA)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (intersectiontype.IntersectionTypeTest.EmptyA.$initialized = true);
   (global.set $f_$initialized__intersectiontype_IntersectionTypeTest_EmptyA (i32.const 1))
  )
 )
)

;;; Class<?> EmptyA.getClass()
(func $m_getClass__java_lang_Class@intersectiontype.IntersectionTypeTest.EmptyA
 (param $this (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getIntersectiontype.IntersectionTypeTest.EmptyA();
   (local.set $return.value (call $$getIntersectiontype.IntersectionTypeTest.EmptyA__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@intersectiontype.IntersectionTypeTest.EmptyA)

;;; Code for intersectiontype.IntersectionTypeTest.EmptyB [INTERFACE]
(type $intersectiontype.IntersectionTypeTest.EmptyB.vtable (struct
))

;;; void EmptyB.$clinit()
(func $$clinit__void@intersectiontype.IntersectionTypeTest.EmptyB
 (block $return.label
  (block
   ;; if (intersectiontype.IntersectionTypeTest.EmptyB.$initialized) return;
   (if (global.get $f_$initialized__intersectiontype_IntersectionTypeTest_EmptyB)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (intersectiontype.IntersectionTypeTest.EmptyB.$initialized = true);
   (global.set $f_$initialized__intersectiontype_IntersectionTypeTest_EmptyB (i32.const 1))
  )
 )
)

;;; Class<?> EmptyB.getClass()
(func $m_getClass__java_lang_Class@intersectiontype.IntersectionTypeTest.EmptyB
 (param $this (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getIntersectiontype.IntersectionTypeTest.EmptyB();
   (local.set $return.value (call $$getIntersectiontype.IntersectionTypeTest.EmptyB__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@intersectiontype.IntersectionTypeTest.EmptyB)

 ;;; Code for intersectiontype.IntersectionTypeTest [vtable.init]
 (global.set $intersectiontype.IntersectionTypeTest.vtable
  (struct.new_with_rtt $intersectiontype.IntersectionTypeTest.vtable
   (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object)
   (ref.func $m_hashCode__int@java.lang.Object)
   (ref.func $m_toString__java_lang_String@java.lang.Object)
   (ref.func $m_getClass__java_lang_Class@intersectiontype.IntersectionTypeTest)
   (ref.func $m_cast3__java_lang_Object__java_lang_Object@intersectiontype.IntersectionTypeTest)
   (ref.func $m_testMethodCall__void@intersectiontype.IntersectionTypeTest)
   (rtt.canon $intersectiontype.IntersectionTypeTest.vtable)
  )
 )

 ;;; Code for intersectiontype.IntersectionTypeTest [itable.init]
 (global.set $intersectiontype.IntersectionTypeTest.itable (array.new_default_with_rtt $itable (i32.const 0) (rtt.canon $itable)))

 ;;; Code for intersectiontype.IntersectionTypeTest.MapEntry [vtable.init]
 (global.set $intersectiontype.IntersectionTypeTest.MapEntry.vtable
  (struct.new_with_rtt $intersectiontype.IntersectionTypeTest.MapEntry.vtable
   (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object)
   (ref.func $m_hashCode__int@java.lang.Object)
   (ref.func $m_toString__java_lang_String@java.lang.Object)
   (ref.func $m_getClass__java_lang_Class@intersectiontype.IntersectionTypeTest.MapEntry)
   (ref.func $m_method__java_lang_Object__intersectiontype_Getable@intersectiontype.IntersectionTypeTest.MapEntry)
   (rtt.canon $intersectiontype.IntersectionTypeTest.MapEntry.vtable)
  )
 )

 ;;; Code for intersectiontype.IntersectionTypeTest.MapEntry [itable.init]
 (global.set $intersectiontype.IntersectionTypeTest.MapEntry.itable (array.new_default_with_rtt $itable (i32.const 0) (rtt.canon $itable)))

 ;;; Code for intersectiontype.IntersectionTypeTest.A [vtable.init]
 (global.set $intersectiontype.IntersectionTypeTest.A.vtable
  (struct.new_with_rtt $intersectiontype.IntersectionTypeTest.A.vtable
   (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object)
   (ref.func $m_hashCode__int@java.lang.Object)
   (ref.func $m_toString__java_lang_String@java.lang.Object)
   (ref.func $m_getClass__java_lang_Class@intersectiontype.IntersectionTypeTest.A)
   (rtt.canon $intersectiontype.IntersectionTypeTest.A.vtable)
  )
 )

 ;;; Code for intersectiontype.IntersectionTypeTest.A [itable.init]
 (global.set $intersectiontype.IntersectionTypeTest.A.itable (array.new_default_with_rtt $itable (i32.const 0) (rtt.canon $itable)))
