package intersectiontype

fun interface Getable<T> {
 fun get(): T?
}

fun interface Setable {
 fun set(i: Int)
}

interface Serial {}

fun interface Cmp {
 fun cmp(): Int
}

fun interface Cmp2<T> {
 fun cmp(a: Int): Int
}

open class IntersectionTypeTest<U> {
 constructor(): super()

 open fun cast3(s: kotlin.Any?): kotlin.Any? {
  return s
 }

 open fun testMethodCall() {
  val o: kotlin.Any? = intersectiontype.IntersectionTypeTest.m()
  intersectiontype.IntersectionTypeTest.set(o as intersectiontype.`IntersectionTypeTest$A`? /* & intersectiontype.`IntersectionTypeTest$EmptyA`? */)
  intersectiontype.IntersectionTypeTest.set(intersectiontype.IntersectionTypeTest.m())
  val g: intersectiontype.Getable<*>? = intersectiontype.IntersectionTypeTest.n()
 }

 companion object {
  @JvmStatic
  fun <T> getAndSet(`object`: T?) where T: intersectiontype.Getable<*>?, T: intersectiontype.Setable? {
   `object`!!.set(1)
   `object`!!.get()
  }

  @JvmStatic
  fun <T> cast(o: kotlin.Any?): intersectiontype.Getable<T>? {
   if (o === null) {
    return o as intersectiontype.Getable<T>? /* & intersectiontype.Setable? */
   }
   return o as intersectiontype.Getable<T>? /* & intersectiontype.Setable? */
  }

  @JvmStatic
  fun <T> cast1(s: kotlin.Any?): intersectiontype.Getable<java.lang.Comparable<kotlin.String?>?>? {
   return s as intersectiontype.Getable<java.lang.Comparable<kotlin.String?>?>? /* & intersectiontype.Setable? */
  }

  @JvmStatic
  fun <T> cast2(s: kotlin.Any?): intersectiontype.Getable<java.lang.Comparable<T>?>? {
   return s as intersectiontype.Getable<java.lang.Comparable<T>?>? /* & intersectiontype.Setable? */
  }

  @JvmStatic
  fun method(): intersectiontype.Cmp? {
   return intersectiontype.Cmp (fun(): Int {
    return 1
   }) as intersectiontype.Cmp? /* & intersectiontype.Serial? */
  }

  @JvmStatic
  fun method2(): intersectiontype.Cmp2<*>? {
   return intersectiontype.Cmp2<*> (fun(a: Int): Int {
    return 1
   }) as intersectiontype.Cmp2<*>? /* & intersectiontype.Serial? */
  }

  @JvmStatic
  fun testClosureAssignment(o: kotlin.Any?) {
   val e: intersectiontype.`IntersectionTypeTest$A`? = o as intersectiontype.`IntersectionTypeTest$A`? /* & intersectiontype.`IntersectionTypeTest$EmptyA`? & intersectiontype.`IntersectionTypeTest$EmptyB`? */
   val g: intersectiontype.`IntersectionTypeTest$EmptyA`? = o as intersectiontype.`IntersectionTypeTest$A`? /* & intersectiontype.`IntersectionTypeTest$EmptyA`? & intersectiontype.`IntersectionTypeTest$EmptyB`? */
   val s: intersectiontype.`IntersectionTypeTest$EmptyB`? = o as intersectiontype.`IntersectionTypeTest$A`? /* & intersectiontype.`IntersectionTypeTest$EmptyA`? & intersectiontype.`IntersectionTypeTest$EmptyB`? */
  }

  @JvmStatic
  internal fun <T> get(t: T?): T? {
   return t
  }

  @JvmStatic
  internal fun <T> m(): T? where T: intersectiontype.`IntersectionTypeTest$A`?, T: intersectiontype.`IntersectionTypeTest$EmptyA`? {
   return intersectiontype.IntersectionTypeTest.get((java.lang.Object() as kotlin.Any)) as T?
  }

  @JvmStatic
  internal fun <T> n(): intersectiontype.Getable<T>? where T: intersectiontype.`IntersectionTypeTest$A`?, T: intersectiontype.`IntersectionTypeTest$EmptyA`? {
   return null
  }

  @JvmStatic
  internal fun <T> set(t: T?) where T: intersectiontype.`IntersectionTypeTest$A`?, T: intersectiontype.`IntersectionTypeTest$EmptyA`? {}
 }
}

open class `IntersectionTypeTest$MapEntry`<U> {
 internal constructor(`$outer_this`: intersectiontype.IntersectionTypeTest<U>?): super() {
  this.`this` = `$outer_this`
 }

 @JvmField val `this`: intersectiontype.IntersectionTypeTest<U>?

 open fun <T> method(o: kotlin.Any?): intersectiontype.Getable<T>? {
  return o as intersectiontype.Getable<T>? /* & intersectiontype.Setable? */
 }
}

open class `IntersectionTypeTest$A` {
 internal constructor(): super()
}

interface `IntersectionTypeTest$EmptyA` {}

interface `IntersectionTypeTest$EmptyB` {}
