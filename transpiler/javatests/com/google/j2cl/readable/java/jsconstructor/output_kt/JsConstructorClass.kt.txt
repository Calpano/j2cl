// Generated from "jsconstructor/JsConstructorClass.java"
@file:OptIn(ExperimentalObjCName::class)

package jsconstructor

import javaemul.lang.*
import jsconstructor.JsConstructorClass
import kotlin.Any
import kotlin.Int
import kotlin.OptIn
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("JsconstructorJsConstructorClass", exact = true)
open class JsConstructorClass {
 open class A {
  @JvmField var fA: Int = 1

  constructor(@ObjCName("withInt", exact = false) x: Int) {
   this.fA = x
  }

  constructor()
 }

 open class B: JsConstructorClass.A {
  @JvmField var fB: Int = 2

  constructor(@ObjCName("withInt", exact = false) x: Int): super(x + 1) {
   this.fB = 3
  }

  constructor(): this(10) {
   this.fB = 4
  }

  constructor(
   @ObjCName("withInt", exact = false) x: Int,
   @ObjCName("withInt", exact = false) y: Int
  ): this(x + y) {
   this.fB = x * y
  }
 }

 open class C: JsConstructorClass.B {
  @JvmField var fC: Int = 1

  constructor(@ObjCName("withInt", exact = false) x: Int): super(x * 2) {
   this.fC = 6
  }

  constructor(
   @ObjCName("withInt", exact = false) x: Int,
   @ObjCName("withInt", exact = false) y: Int
  ): this(x + y) {
   this.fC = 7
  }
 }

 open class D: JsConstructorClass.B {
  @JvmField var fD: Int = 8

  constructor(): super(9) {
   this.fD = 10
  }

  constructor(@ObjCName("withInt", exact = false) x: Int): this() {
   this.fD = x
  }
 }

 open class E: JsConstructorClass.C {
  @JvmField var fE: Int = 11

  constructor(): super(10) {
   this.fE = 12
  }
 }

 open class F: JsConstructorClass.C {
  @JvmField var fF: Int = 13

  constructor(@ObjCName("withInt", exact = false) x: Int): super(x + 2) {
   this.fF = x + 3
  }
 }

 open class G {}

 open class H: JsConstructorClass.G {
  constructor()
 }

 open class Varargs: JsConstructorClass.A {
  constructor(vararg @ObjCName("withIntArray", exact = false) args: Int): super(args!![1])
 }

 open class SubVarargs: JsConstructorClass.Varargs {
  constructor(
   @ObjCName("withJavaLangAny", exact = false) i: Any?,
   vararg @ObjCName("withIntArray", exact = false) args: Int
  ): super(*(args)!!)

  constructor(@ObjCName("withInt", exact = false) j: Int): this(Any(), j)

  companion object {
   @JvmStatic
   fun subNativeInvocation() {
    val unusedS1: JsConstructorClass.SubVarargs? = JsConstructorClass.SubVarargs(2)
    val unusedS2: JsConstructorClass.SubVarargs? = JsConstructorClass.SubVarargs(Any(), 1, 2, 3)
   }
  }
 }

 open inner class InstanceVarargs: JsConstructorClass.A {
  constructor(vararg @ObjCName("withIntArray", exact = false) args: Int): super(args!![1])
 }

 open class RegularType {
  constructor(@ObjCName("withJavaLangAny", exact = false) b: Any?)
 }

 open class JsConstructorSubtypeOfRegularType: JsConstructorClass.RegularType {
  constructor(@ObjCName("withJavaLangAny", exact = false) `object`: Any?): super(`object`)

  constructor(): this(Any())
 }
}
