;;; Code for trycatch.TryCatch

;;; CLASS  TryCatch
(type $trycatch.TryCatch (struct
 (field $vtable (ref null $trycatch.TryCatch.vtable))
))
(type $trycatch.TryCatch.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_testMultiCatch__void (mut (ref $function.__$void)))
 (field $m_testEmptyThrowableCatch__void (mut (ref $function.__$void)))
 (field $m_testEmptyThrowableRethrow__void (mut (ref $function.__$void)))
 (field $m_testFinally__void (mut (ref $function.__$void)))
 (field $m_testTryWithResource__void (mut (ref $function.__$void)))
 (field $m_testTryWithResourceJava9__void (mut (ref $function.__$void)))
 (field $m_testNestedTryCatch__void (mut (ref $function.__$void)))
 (field $m_testThrowGenerics__void (mut (ref $function.__$void)))
 (field $m_testThrowBoundGenerics__void (mut (ref $function.__$void)))
))
(global $trycatch.TryCatch.vtable (mut (ref null $trycatch.TryCatch.vtable)) (ref.null $trycatch.TryCatch.vtable))

;;; TryCatch()
(func $m_<init>__void@trycatch.TryCatch
 (param $this (ref null $trycatch.TryCatch))
 (result (ref null $trycatch.TryCatch))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)
(global funcref (ref.func $m_<init>__void@trycatch.TryCatch))

;;; void TryCatch.testMultiCatch()
(func $m_testMultiCatch__void@trycatch.TryCatch
 (param $this.untyped (ref null $java.lang.Object))
 (local $e (ref null $java.lang.RuntimeException))
 (local $r (ref null $java.lang.RuntimeException))
 (local $this (ref null $trycatch.TryCatch))
 (local.set $this (ref.cast $java.lang.Object $trycatch.TryCatch (local.get $this.untyped) (global.get $trycatch.TryCatch.rtt)))
 (block $return.label
  (block
   ;; try {
   ;; unimplemented statement TryStatement
  )
 )
)
(global funcref (ref.func $m_testMultiCatch__void@trycatch.TryCatch))

;;; void TryCatch.testEmptyThrowableCatch()
(func $m_testEmptyThrowableCatch__void@trycatch.TryCatch
 (param $this.untyped (ref null $java.lang.Object))
 (local $e (ref null $java.lang.Throwable))
 (local $e_1 (ref null $java.lang.Exception))
 (local $e_2 (ref null $java.lang.Throwable))
 (local $this (ref null $trycatch.TryCatch))
 (local.set $this (ref.cast $java.lang.Object $trycatch.TryCatch (local.get $this.untyped) (global.get $trycatch.TryCatch.rtt)))
 (block $return.label
  (block
   ;; try {
   ;; unimplemented statement TryStatement
   ;; try {
   ;; unimplemented statement TryStatement
  )
 )
)
(global funcref (ref.func $m_testEmptyThrowableCatch__void@trycatch.TryCatch))

;;; void TryCatch.testEmptyThrowableRethrow()
(func $m_testEmptyThrowableRethrow__void@trycatch.TryCatch
 (param $this.untyped (ref null $java.lang.Object))
 (local $e (ref null $java.lang.Throwable))
 (local $this (ref null $trycatch.TryCatch))
 (local.set $this (ref.cast $java.lang.Object $trycatch.TryCatch (local.get $this.untyped) (global.get $trycatch.TryCatch.rtt)))
 (block $return.label
  (block
   ;; try {
   ;; unimplemented statement TryStatement
  )
 )
)
(global funcref (ref.func $m_testEmptyThrowableRethrow__void@trycatch.TryCatch))

;;; void TryCatch.testFinally()
(func $m_testFinally__void@trycatch.TryCatch
 (param $this.untyped (ref null $java.lang.Object))
 (local $this (ref null $trycatch.TryCatch))
 (local.set $this (ref.cast $java.lang.Object $trycatch.TryCatch (local.get $this.untyped) (global.get $trycatch.TryCatch.rtt)))
 (block $return.label
  (block
   ;; try {
   ;; unimplemented statement TryStatement
  )
 )
)
(global funcref (ref.func $m_testFinally__void@trycatch.TryCatch))

;;; void TryCatch.testTryWithResource()
(func $m_testTryWithResource__void@trycatch.TryCatch
 (param $this.untyped (ref null $java.lang.Object))
 (local $thing (ref null $trycatch.TryCatch.ClosableThing))
 (local $thing2 (ref null $trycatch.TryCatch.ClosableThing))
 (local $e (ref null $java.lang.Exception))
 (local $this (ref null $trycatch.TryCatch))
 (local.set $this (ref.cast $java.lang.Object $trycatch.TryCatch (local.get $this.untyped) (global.get $trycatch.TryCatch.rtt)))
 (block $return.label
  (block
   ;; try (
   ;; unimplemented statement TryStatement
  )
 )
)
(global funcref (ref.func $m_testTryWithResource__void@trycatch.TryCatch))

;;; void TryCatch.testTryWithResourceJava9()
(func $m_testTryWithResourceJava9__void@trycatch.TryCatch
 (param $this.untyped (ref null $java.lang.Object))
 (local $thing (ref null $trycatch.TryCatch.ClosableThing))
 (local $thing2 (ref null $trycatch.TryCatch.ClosableThing))
 (local $$resource (ref null $trycatch.TryCatch.ClosableThing))
 (local $$resource_1 (ref null $trycatch.TryCatch.ClosableThing))
 (local $e (ref null $java.lang.Exception))
 (local $this (ref null $trycatch.TryCatch))
 (local.set $this (ref.cast $java.lang.Object $trycatch.TryCatch (local.get $this.untyped) (global.get $trycatch.TryCatch.rtt)))
 (block $return.label
  (block
   ;; ClosableThing thing = new ClosableThing.<init>();
   
   (local.set $thing (call $m_<init>__void_$pp_trycatch@trycatch.TryCatch.ClosableThing (struct.new_with_rtt $trycatch.TryCatch.ClosableThing (global.get $trycatch.TryCatch.ClosableThing.vtable) (global.get $trycatch.TryCatch.ClosableThing.rtt))))
   ;; ClosableThing thing2 = new ClosableThing.<init>();
   
   (local.set $thing2 (call $m_<init>__void_$pp_trycatch@trycatch.TryCatch.ClosableThing (struct.new_with_rtt $trycatch.TryCatch.ClosableThing (global.get $trycatch.TryCatch.ClosableThing.vtable) (global.get $trycatch.TryCatch.ClosableThing.rtt))))
   ;; try (
   ;; unimplemented statement TryStatement
  )
 )
)
(global funcref (ref.func $m_testTryWithResourceJava9__void@trycatch.TryCatch))

;;; void TryCatch.testNestedTryCatch()
(func $m_testNestedTryCatch__void@trycatch.TryCatch
 (param $this.untyped (ref null $java.lang.Object))
 (local $ae (ref null $java.lang.Exception))
 (local $ie (ref null $java.lang.Exception))
 (local $this (ref null $trycatch.TryCatch))
 (local.set $this (ref.cast $java.lang.Object $trycatch.TryCatch (local.get $this.untyped) (global.get $trycatch.TryCatch.rtt)))
 (block $return.label
  (block
   ;; try {
   ;; unimplemented statement TryStatement
  )
 )
)
(global funcref (ref.func $m_testNestedTryCatch__void@trycatch.TryCatch))

;;; void TryCatch.testThrowGenerics()
(func $m_testThrowGenerics__void@trycatch.TryCatch
 (param $this.untyped (ref null $java.lang.Object))
 (local $this (ref null $trycatch.TryCatch))
 (local.set $this (ref.cast $java.lang.Object $trycatch.TryCatch (local.get $this.untyped) (global.get $trycatch.TryCatch.rtt)))
 (block $return.label
  (block
   ;; throw TryCatch.this.getT(new Exception.<init>());
   (ref.null $java.lang.Exception)unreachable
  )
 )
)
(global funcref (ref.func $m_testThrowGenerics__void@trycatch.TryCatch))

;;; T TryCatch.getT(T t)
(func $m_getT__java_lang_Object__java_lang_Object_$p_trycatch_TryCatch@trycatch.TryCatch
 (param $this (ref null $trycatch.TryCatch))
 (param $t (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; return t;
   (local.set $return.value (local.get $t))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(global funcref (ref.func $m_getT__java_lang_Object__java_lang_Object_$p_trycatch_TryCatch@trycatch.TryCatch))

;;; void TryCatch.testThrowBoundGenerics()
(func $m_testThrowBoundGenerics__void@trycatch.TryCatch
 (param $this.untyped (ref null $java.lang.Object))
 (local $this (ref null $trycatch.TryCatch))
 (local.set $this (ref.cast $java.lang.Object $trycatch.TryCatch (local.get $this.untyped) (global.get $trycatch.TryCatch.rtt)))
 (block $return.label
  (block
   ;; throw TryCatch.this.getThrowable();
   (ref.null $java.lang.Throwable)unreachable
  )
 )
)
(global funcref (ref.func $m_testThrowBoundGenerics__void@trycatch.TryCatch))

;;; T TryCatch.getThrowable()
(func $m_getThrowable__java_lang_Throwable_$p_trycatch_TryCatch@trycatch.TryCatch
 (param $this (ref null $trycatch.TryCatch))
 (result (ref null $java.lang.Throwable))
 (local $return.value (ref null $java.lang.Throwable))
 (block $return.label
  (block
   ;; return null;
   (local.set $return.value (ref.null $java.lang.Throwable))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(global funcref (ref.func $m_getThrowable__java_lang_Throwable_$p_trycatch_TryCatch@trycatch.TryCatch))

;;; CLASS  ClosableThing
(type $trycatch.TryCatch.ClosableThing (struct
 (field $vtable (ref null $trycatch.TryCatch.ClosableThing.vtable))
))
(type $trycatch.TryCatch.ClosableThing.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_close__void (mut (ref $function.__$void)))
))
(global $trycatch.TryCatch.ClosableThing.vtable (mut (ref null $trycatch.TryCatch.ClosableThing.vtable)) (ref.null $trycatch.TryCatch.ClosableThing.vtable))

;;; ClosableThing()
(func $m_<init>__void_$pp_trycatch@trycatch.TryCatch.ClosableThing
 (param $this (ref null $trycatch.TryCatch.ClosableThing))
 (result (ref null $trycatch.TryCatch.ClosableThing))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)
(global funcref (ref.func $m_<init>__void_$pp_trycatch@trycatch.TryCatch.ClosableThing))

;;; void ClosableThing.close()
(func $m_close__void@trycatch.TryCatch.ClosableThing
 (param $this.untyped (ref null $java.lang.Object))
 (local $this (ref null $trycatch.TryCatch.ClosableThing))
 (local.set $this (ref.cast $java.lang.Object $trycatch.TryCatch.ClosableThing (local.get $this.untyped) (global.get $trycatch.TryCatch.ClosableThing.rtt)))
 (block $return.label
  (block
  )
 )
)
(global funcref (ref.func $m_close__void@trycatch.TryCatch.ClosableThing))

;;; Code for trycatch.TryCatch [vtable]
 (global.set $trycatch.TryCatch.vtable (struct.new_with_rtt $trycatch.TryCatch.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_testMultiCatch__void@trycatch.TryCatch) (ref.func $m_testEmptyThrowableCatch__void@trycatch.TryCatch) (ref.func $m_testEmptyThrowableRethrow__void@trycatch.TryCatch) (ref.func $m_testFinally__void@trycatch.TryCatch) (ref.func $m_testTryWithResource__void@trycatch.TryCatch) (ref.func $m_testTryWithResourceJava9__void@trycatch.TryCatch) (ref.func $m_testNestedTryCatch__void@trycatch.TryCatch) (ref.func $m_testThrowGenerics__void@trycatch.TryCatch) (ref.func $m_testThrowBoundGenerics__void@trycatch.TryCatch) (rtt.canon $trycatch.TryCatch.vtable)))
;;; Code for trycatch.TryCatch.ClosableThing [vtable]
 (global.set $trycatch.TryCatch.ClosableThing.vtable (struct.new_with_rtt $trycatch.TryCatch.ClosableThing.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_close__void@trycatch.TryCatch.ClosableThing) (rtt.canon $trycatch.TryCatch.ClosableThing.vtable)))
))
(start $.runtime.init)

