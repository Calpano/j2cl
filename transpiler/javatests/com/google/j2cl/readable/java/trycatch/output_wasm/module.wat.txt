;;; Code for trycatch.TryCatch

;;; CLASS  TryCatch

(type $trycatch.TryCatch (struct
))

;;; TryCatch()
(func $<init><>:void@trycatch.TryCatch
 (param $this (ref null $trycatch.TryCatch))
 (result (ref null $trycatch.TryCatch))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; void TryCatch.testMultiCatch()
(func $testMultiCatch<>:void@trycatch.TryCatch
 (param $this (ref null $java.lang.Object))
 (local $e (ref null $java.lang.RuntimeException))
 (local $r (ref null $java.lang.RuntimeException))
 (block $return.label
  (block
   ;; try {
   ;; unimplemented statement TryStatement
  )
 )
)

;;; void TryCatch.testEmptyThrowableCatch()
(func $testEmptyThrowableCatch<>:void@trycatch.TryCatch
 (param $this (ref null $java.lang.Object))
 (local $e (ref null $java.lang.Throwable))
 (local $e_1 (ref null $java.lang.Exception))
 (local $e_2 (ref null $java.lang.Throwable))
 (block $return.label
  (block
   ;; try {
   ;; unimplemented statement TryStatement
   ;; try {
   ;; unimplemented statement TryStatement
  )
 )
)

;;; void TryCatch.testEmptyThrowableRethrow()
(func $testEmptyThrowableRethrow<>:void@trycatch.TryCatch
 (param $this (ref null $java.lang.Object))
 (local $e (ref null $java.lang.Throwable))
 (block $return.label
  (block
   ;; try {
   ;; unimplemented statement TryStatement
  )
 )
)

;;; void TryCatch.testFinally()
(func $testFinally<>:void@trycatch.TryCatch
 (param $this (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; try {
   ;; unimplemented statement TryStatement
  )
 )
)

;;; void TryCatch.testTryWithResource()
(func $testTryWithResource<>:void@trycatch.TryCatch
 (param $this (ref null $java.lang.Object))
 (local $thing (ref null $trycatch.TryCatch.ClosableThing))
 (local $thing2 (ref null $trycatch.TryCatch.ClosableThing))
 (local $e (ref null $java.lang.Exception))
 (block $return.label
  (block
   ;; try (
   ;; unimplemented statement TryStatement
  )
 )
)

;;; void TryCatch.testTryWithResourceJava9()
(func $testTryWithResourceJava9<>:void@trycatch.TryCatch
 (param $this (ref null $java.lang.Object))
 (local $thing (ref null $trycatch.TryCatch.ClosableThing))
 (local $thing2 (ref null $trycatch.TryCatch.ClosableThing))
 (local $$resource (ref null $trycatch.TryCatch.ClosableThing))
 (local $$resource_1 (ref null $trycatch.TryCatch.ClosableThing))
 (local $e (ref null $java.lang.Exception))
 (block $return.label
  (block
   ;; ClosableThing thing = new ClosableThing.<init>();
   
   (local.set $thing (call $<init><>:void@trycatch.TryCatch.ClosableThing (struct.new_default_with_rtt $trycatch.TryCatch.ClosableThing (global.get $trycatch.TryCatch.ClosableThing.rtt)) ))
   ;; ClosableThing thing2 = new ClosableThing.<init>();
   
   (local.set $thing2 (call $<init><>:void@trycatch.TryCatch.ClosableThing (struct.new_default_with_rtt $trycatch.TryCatch.ClosableThing (global.get $trycatch.TryCatch.ClosableThing.rtt)) ))
   ;; try (
   ;; unimplemented statement TryStatement
  )
 )
)

;;; void TryCatch.testNestedTryCatch()
(func $testNestedTryCatch<>:void@trycatch.TryCatch
 (param $this (ref null $java.lang.Object))
 (local $ae (ref null $java.lang.Exception))
 (local $ie (ref null $java.lang.Exception))
 (block $return.label
  (block
   ;; try {
   ;; unimplemented statement TryStatement
  )
 )
)

;;; void TryCatch.testThrowGenerics()
(func $testThrowGenerics<>:void@trycatch.TryCatch
 (param $this (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; throw TryCatch.this.getT(new Exception.<init>());
   (ref.null $java.lang.Exception)unreachable
  )
 )
)

;;; T TryCatch.getT(T t)
(func $getT<java.lang.Object>:java.lang.Object@trycatch.TryCatch
 (param $this (ref null $trycatch.TryCatch))
 (param $t (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; return t;
   (local.set $return.value (local.get $t))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; void TryCatch.testThrowBoundGenerics()
(func $testThrowBoundGenerics<>:void@trycatch.TryCatch
 (param $this (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; throw TryCatch.this.getThrowable();
   (ref.null $java.lang.Throwable)unreachable
  )
 )
)

;;; T TryCatch.getThrowable()
(func $getThrowable<>:java.lang.Throwable@trycatch.TryCatch
 (param $this (ref null $trycatch.TryCatch))
 (result (ref null $java.lang.Throwable))
 (local $return.value (ref null $java.lang.Throwable))
 (block $return.label
  (block
   ;; return null;
   (local.set $return.value (ref.null $java.lang.Throwable))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; CLASS  ClosableThing

(type $trycatch.TryCatch.ClosableThing (struct
))

;;; ClosableThing()
(func $<init><>:void@trycatch.TryCatch.ClosableThing
 (param $this (ref null $trycatch.TryCatch.ClosableThing))
 (result (ref null $trycatch.TryCatch.ClosableThing))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; void ClosableThing.close()
(func $close<>:void@trycatch.TryCatch.ClosableThing
 (param $this (ref null $java.lang.Object))
 (block $return.label
  (block
  )
 )
)

