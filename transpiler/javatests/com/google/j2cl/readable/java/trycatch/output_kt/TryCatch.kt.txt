package trycatch

open class TryCatch {
 open fun testMultiCatch() {
  try {
   throw java.lang.ClassCastException()
  } catch (e: java.lang.NullPointerException) {
   throw e!!
  } catch (e: java.lang.ClassCastException) {
   throw e!!
  } catch (r: java.lang.RuntimeException) {
   r = null
  }
 }

 open fun testEmptyThrowableCatch() {
  try {
   throw java.lang.ClassCastException()
  } catch (e: Throwable) {}
  try {
   throw java.lang.ClassCastException()
  } catch (e_1: Exception) {} catch (e_2: Throwable) {}
 }

 open fun testEmptyThrowableRethrow() {
  try {
   throw java.lang.ClassCastException()
  } catch (e: Throwable) {
   throw e!!
  }
 }

 open fun testFinally() {
  try {
   assert(true)
  } finally {}
 }

 open fun testTryWithResource() {
  try {
   throw Exception()
  } catch (e: Exception) {}
 }

 open fun testTryWithResourceJava9() {
  val thing: trycatch.TryCatch.ClosableThing? = trycatch.TryCatch.ClosableThing()
  val thing2: trycatch.TryCatch.ClosableThing? = trycatch.TryCatch.ClosableThing()
  try {
   throw Exception()
  } catch (e: Exception) {}
 }

 open fun testTryWithResouceOnStaticField() {
  try {
   throw Exception()
  } catch (e: Exception) {}
 }

 open fun testNestedTryCatch() {
  try {
   throw Exception()
  } catch (ae: Exception) {
   try {
    throw Exception()
   } catch (ie: Exception) {}
  }
 }

 open fun testThrowGenerics() {
  throw this.getT(Exception())!!
 }

 private fun <T> getT(t: T): T {
  return t
 }

 open fun testThrowBoundGenerics() {
  throw this.getThrowable()!!
 }

 private fun <T: Throwable?> getThrowable(): T {
  return null
 }

 companion object {
  private val closableThing: trycatch.TryCatch.ClosableThing? = trycatch.TryCatch.ClosableThing()
 }
}

open class ClosableThing: java.lang.AutoCloseable {
 open fun close() {}
}
