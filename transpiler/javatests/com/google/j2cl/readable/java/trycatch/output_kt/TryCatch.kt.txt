package trycatch

open class TryCatch {
 fun testMultiCatch() {
  try {
   throw java.lang.ClassCastException()
  } catch (e: java.lang.NullPointerException) {
   throw e
  } catch (e: java.lang.ClassCastException) {
   throw e
  } catch (r: java.lang.RuntimeException) {
   r = null
  }
 }

 fun testEmptyThrowableCatch() {
  try {
   throw java.lang.ClassCastException()
  } catch (e: Throwable) {}
  try {
   throw java.lang.ClassCastException()
  } catch (e: Exception) {} catch (e: Throwable) {}
 }

 fun testEmptyThrowableRethrow() {
  try {
   throw java.lang.ClassCastException()
  } catch (e: Throwable) {
   throw e
  }
 }

 fun testFinally() {
  try {
   assert(true)
  } finally {}
 }

 fun testTryWithResource() {
  try {
   throw Exception()
  } catch (e: Exception) {}
 }

 fun testTryWithResourceJava9() {
  val thing: trycatch.TryCatch.ClosableThing? = trycatch.TryCatch.ClosableThing()
  val thing2: trycatch.TryCatch.ClosableThing? = trycatch.TryCatch.ClosableThing()
  try {
   throw Exception()
  } catch (e: Exception) {}
 }

 fun testTryWithResouceOnStaticField() {
  try {
   throw Exception()
  } catch (e: Exception) {}
 }

 fun testNestedTryCatch() {
  try {
   throw Exception()
  } catch (ae: Exception) {
   try {
    throw Exception()
   } catch (ie: Exception) {}
  }
 }

 fun testThrowGenerics() {
  throw this.getT(Exception())
 }

 fun getT(t: T): T {
  return t
 }

 fun testThrowBoundGenerics() {
  throw this.getThrowable()
 }

 fun getThrowable(): T {
  return null
 }
}

open class ClosableThing: java.lang.AutoCloseable {
 fun close() {}
}
