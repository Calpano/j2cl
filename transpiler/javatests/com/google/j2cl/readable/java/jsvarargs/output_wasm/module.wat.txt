;;; Code for jsvarargs.Main [vtable]
(global $jsvarargs.Main.vtable (mut (ref null $jsvarargs.Main.vtable)) (ref.null $jsvarargs.Main.vtable))

;;; Code for jsvarargs.Main.NativeObject [vtable]
(global $jsvarargs.Main.NativeObject.vtable (mut (ref null $jsvarargs.Main.NativeObject.vtable)) (ref.null $jsvarargs.Main.NativeObject.vtable))

;;; Code for jsvarargs.Main.SubVarargsConstructorClass [vtable]
(global $jsvarargs.Main.SubVarargsConstructorClass.vtable (mut (ref null $jsvarargs.Main.SubVarargsConstructorClass.vtable)) (ref.null $jsvarargs.Main.SubVarargsConstructorClass.vtable))

;;; Code for jsvarargs.Main.AbstractMethodWithVarargs [vtable]
(global $jsvarargs.Main.AbstractMethodWithVarargs.vtable (mut (ref null $jsvarargs.Main.AbstractMethodWithVarargs.vtable)) (ref.null $jsvarargs.Main.AbstractMethodWithVarargs.vtable))

;;; Code for jsvarargs.Main.AFunction [vtable]
(global $jsvarargs.Main.AFunction.vtable (mut (ref null $jsvarargs.Main.AFunction.vtable)) (ref.null $jsvarargs.Main.AFunction.vtable))

;;; Code for jsvarargs.Main.SubMain [vtable]
(global $jsvarargs.Main.SubMain.vtable (mut (ref null $jsvarargs.Main.SubMain.vtable)) (ref.null $jsvarargs.Main.SubMain.vtable))

;;; Code for jsvarargs.QualifiedSuperMethodCall [vtable]
(global $jsvarargs.QualifiedSuperMethodCall.vtable (mut (ref null $jsvarargs.QualifiedSuperMethodCall.vtable)) (ref.null $jsvarargs.QualifiedSuperMethodCall.vtable))

;;; Code for jsvarargs.QualifiedSuperMethodCall.InnerClass [vtable]
(global $jsvarargs.QualifiedSuperMethodCall.InnerClass.vtable (mut (ref null $jsvarargs.QualifiedSuperMethodCall.InnerClass.vtable)) (ref.null $jsvarargs.QualifiedSuperMethodCall.InnerClass.vtable))

;;; Code for jsvarargs.Main [static fields]
(global $f_$initialized__jsvarargs_Main (mut i32) (i32.const 0))

;;; Code for jsvarargs.Main.NativeObject [static fields]
(global $f_$initialized__jsvarargs_Main_NativeObject (mut i32) (i32.const 0))

;;; Code for jsvarargs.Main.SubVarargsConstructorClass [static fields]
(global $f_$initialized__jsvarargs_Main_SubVarargsConstructorClass (mut i32) (i32.const 0))

;;; Code for jsvarargs.Main.Function [static fields]
(global $f_$initialized__jsvarargs_Main_Function (mut i32) (i32.const 0))

;;; Code for jsvarargs.Main.AbstractMethodWithVarargs [static fields]
(global $f_$initialized__jsvarargs_Main_AbstractMethodWithVarargs (mut i32) (i32.const 0))

;;; Code for jsvarargs.Main.StaticInterfaceMethodWithVarargs [static fields]
(global $f_$initialized__jsvarargs_Main_StaticInterfaceMethodWithVarargs (mut i32) (i32.const 0))

;;; Code for jsvarargs.Main.AFunction [static fields]
(global $f_$initialized__jsvarargs_Main_AFunction (mut i32) (i32.const 0))

;;; Code for jsvarargs.Main.SubMain [static fields]
(global $f_$initialized__jsvarargs_Main_SubMain (mut i32) (i32.const 0))

;;; Code for jsvarargs.Main.GenericFunction [static fields]
(global $f_$initialized__jsvarargs_Main_GenericFunction (mut i32) (i32.const 0))

;;; Code for jsvarargs.QualifiedSuperMethodCall [static fields]
(global $f_$initialized__jsvarargs_QualifiedSuperMethodCall (mut i32) (i32.const 0))

;;; Code for jsvarargs.QualifiedSuperMethodCall.InnerClass [static fields]
(global $f_$initialized__jsvarargs_QualifiedSuperMethodCall_InnerClass (mut i32) (i32.const 0))

;;; Code for jsvarargs.Main [CLASS]
(type $jsvarargs.Main (struct
 (field $vtable (ref null $jsvarargs.Main.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $f_field__jsvarargs_Main (mut i32))
))
(type $jsvarargs.Main.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_f3__int__arrayOf_int__int (mut (ref $function.$int__$javaemul.internal.WasmArray.OfInt__$int)))
 (field $m_f4__arrayOf_int__int (mut (ref $function.$javaemul.internal.WasmArray.OfInt__$int)))
 (field $m_testStaticMethodNotFirst__void (mut (ref $function.__$void)))
 (field $m_testStaticMethodFirst__void (mut (ref $function.__$void)))
 (field $m_testInstanceMethodNotFirst__void (mut (ref $function.__$void)))
 (field $m_testInstanceMethodFirst__void (mut (ref $function.__$void)))
 (field $m_testJsFunction__void (mut (ref $function.__$void)))
 (field $m_testSideEffect__void (mut (ref $function.__$void)))
 (field $m_testNullJsVarargs__void (mut (ref $function.__$void)))
 (field $m_testGenericJsFunctionWithVarags__void (mut (ref $function.__$void)))
))

;;; Main(int f)
(func $m_<init>__int__void@jsvarargs.Main
 (param $this (ref null $jsvarargs.Main))
 (param $f i32)
 (result (ref null $jsvarargs.Main))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
   ;; (Main.this.field = f);
   (struct.set $jsvarargs.Main $f_field__jsvarargs_Main(local.get $this) (local.get $f))
  )
 )
 (local.get $this)
)

;;; int Main.f1(int multiplier, int... numbers)
(func $m_f1__int__arrayOf_int__int@jsvarargs.Main
 (param $multiplier i32)
 (param $numbers (ref null $javaemul.internal.WasmArray.OfInt))
 (result i32)
 (local $return.value i32)
 (block $return.label
  (block
   ;; jsvarargs.Main.$clinit();
   (call $$clinit__void@jsvarargs.Main )
   ;; return ((<expr> + numbers.elements[0]) + multiplier);
   (local.set $return.value (i32.add (i32.add (array.len $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $numbers))) (array.get $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $numbers)) (i32.const 0))) (local.get $multiplier)))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; int Main.f2(int... numbers)
(func $m_f2__arrayOf_int__int@jsvarargs.Main
 (param $numbers (ref null $javaemul.internal.WasmArray.OfInt))
 (result i32)
 (local $return.value i32)
 (block $return.label
  (block
   ;; jsvarargs.Main.$clinit();
   (call $$clinit__void@jsvarargs.Main )
   ;; return (<expr> + numbers.elements[0]);
   (local.set $return.value (i32.add (array.len $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $numbers))) (array.get $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $numbers)) (i32.const 0))))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; int Main.f3(int m, int... numbers)
(func $m_f3__int__arrayOf_int__int@jsvarargs.Main
 (param $this.untyped (ref null $java.lang.Object))
 (param $m i32)
 (param $numbers (ref null $javaemul.internal.WasmArray.OfInt))
 (result i32)
 (local $return.value i32)
 (local $this (ref null $jsvarargs.Main))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsvarargs.Main.rtt)))
 (block $return.label
  (block
   ;; return ((Main.this.field + m) + numbers.elements[1]);
   (local.set $return.value (i32.add (i32.add (struct.get $jsvarargs.Main $f_field__jsvarargs_Main(local.get $this)) (local.get $m)) (array.get $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $numbers)) (i32.const 1))))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_f3__int__arrayOf_int__int@jsvarargs.Main)

;;; int Main.f4(int... numbers)
(func $m_f4__arrayOf_int__int@jsvarargs.Main
 (param $this.untyped (ref null $java.lang.Object))
 (param $numbers (ref null $javaemul.internal.WasmArray.OfInt))
 (result i32)
 (local $return.value i32)
 (local $this (ref null $jsvarargs.Main))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsvarargs.Main.rtt)))
 (block $return.label
  (block
   ;; return (Main.this.field + numbers.elements[1]);
   (local.set $return.value (i32.add (struct.get $jsvarargs.Main $f_field__jsvarargs_Main(local.get $this)) (array.get $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $numbers)) (i32.const 1))))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_f4__arrayOf_int__int@jsvarargs.Main)

;;; T Main.generics(T... elements)
(func $m_generics__arrayOf_java_lang_Object__java_lang_Object@jsvarargs.Main
 (param $elements (ref null $javaemul.internal.WasmArray.OfObject))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (local $$cast_expression (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; jsvarargs.Main.$clinit();
   (call $$clinit__void@jsvarargs.Main )
   ;; return (Object $cast_expression = elements.elements[0],(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((T) $cast_expression)));
   (local.set $return.value (block (result (ref null $java.lang.Object))
    
    (local.set $$cast_expression (array.get $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $elements)) (i32.const 0)))
    (if (result (ref null $java.lang.Object)) (ref.is_null (local.get $$cast_expression)) (then (ref.null $java.lang.Object)) (else (ref.cast (local.get $$cast_expression) (global.get $java.lang.Object.rtt))))
   ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; Main Main.parameterizedType(List<Main>... elements)
(func $m_parameterizedType__arrayOf_java_util_List__jsvarargs_Main@jsvarargs.Main
 (param $elements (ref null $javaemul.internal.WasmArray.OfObject))
 (result (ref null $jsvarargs.Main))
 (local $return.value (ref null $jsvarargs.Main))
 (local $$cast_expression (ref null $java.lang.Object))
 (local $$qualifier (ref null $java.lang.Object))
 (local $$cast_expression_1 (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; jsvarargs.Main.$clinit();
   (call $$clinit__void@jsvarargs.Main )
   ;; return (Object $cast_expression = (List<Main> $qualifier = (Object $cast_expression = elements.elements[0],(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((List<Main>) $cast_expression))),$qualifier.get(0)),(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((Main) $cast_expression)));
   (local.set $return.value (block (result (ref null $jsvarargs.Main))
    
    (local.set $$cast_expression (block (result (ref null $java.lang.Object))
     
     (local.set $$qualifier (block (result (ref null $java.lang.Object))
      
      (local.set $$cast_expression_1 (array.get $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $elements)) (i32.const 0)))
      (if (result (ref null $java.lang.Object)) (ref.is_null (local.get $$cast_expression_1)) (then (ref.null $java.lang.Object)) (else (local.get $$cast_expression_1)))
     ))
     (ref.null $jsvarargs.Main)
    ))
    (if (result (ref null $jsvarargs.Main)) (ref.is_null (local.get $$cast_expression)) (then (ref.null $jsvarargs.Main)) (else (ref.cast (local.get $$cast_expression) (global.get $jsvarargs.Main.rtt))))
   ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; T Main.parameterizedByT(List<T>... elements)
(func $m_parameterizedByT__arrayOf_java_util_List__java_lang_Object@jsvarargs.Main
 (param $elements (ref null $javaemul.internal.WasmArray.OfObject))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (local $$qualifier (ref null $java.lang.Object))
 (local $$cast_expression (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; jsvarargs.Main.$clinit();
   (call $$clinit__void@jsvarargs.Main )
   ;; return (List<T> $qualifier = (Object $cast_expression = elements.elements[0],(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((List<T>) $cast_expression))),$qualifier.get(0));
   (local.set $return.value (block (result (ref null $java.lang.Object))
    
    (local.set $$qualifier (block (result (ref null $java.lang.Object))
     
     (local.set $$cast_expression (array.get $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $elements)) (i32.const 0)))
     (if (result (ref null $java.lang.Object)) (ref.is_null (local.get $$cast_expression)) (then (ref.null $java.lang.Object)) (else (local.get $$cast_expression)))
    ))
    (ref.null $java.lang.Object)
   ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; void Main.testStaticMethodNotFirst()
(func $m_testStaticMethodNotFirst__void@jsvarargs.Main
 (param $this.untyped (ref null $java.lang.Object))
 (local $$array_literal (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_1 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_2 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_3 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_4 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_5 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_6 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_7 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $ints (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_8 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $this (ref null $jsvarargs.Main))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsvarargs.Main.rtt)))
 (block $return.label
  (block
   ;; jsvarargs.Main.f1(1,(int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal));
   (drop (call $m_f1__int__arrayOf_int__int@jsvarargs.Main (i32.const 1)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal)
   )))
   ;; jsvarargs.Main.f1(1,(int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal));
   (drop (call $m_f1__int__arrayOf_int__int@jsvarargs.Main (i32.const 1)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_1 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_1)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_1)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal_1)
   )))
   ;; jsvarargs.Main.f1(1,(int[] $array_literal = new OfInt.<init>(0),$array_literal));
   (drop (call $m_f1__int__arrayOf_int__int@jsvarargs.Main (i32.const 1)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_2 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 0)))
    (local.get $$array_literal_2)
   )))
   ;; jsvarargs.Main.f1(1,(int[] $array_literal = new OfInt.<init>(0),$array_literal));
   (drop (call $m_f1__int__arrayOf_int__int@jsvarargs.Main (i32.const 1)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_3 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 0)))
    (local.get $$array_literal_3)
   )))
   ;; jsvarargs.Main.f1(1,(int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal));
   (drop (call $m_f1__int__arrayOf_int__int@jsvarargs.Main (i32.const 1)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_4 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_4)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_4)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal_4)
   )))
   ;; jsvarargs.Main.f1(1,(int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal));
   (drop (call $m_f1__int__arrayOf_int__int@jsvarargs.Main (i32.const 1)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_5 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_5)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_5)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal_5)
   )))
   ;; jsvarargs.Main.f1(1,(int[] $array_literal = new OfInt.<init>(0),$array_literal));
   (drop (call $m_f1__int__arrayOf_int__int@jsvarargs.Main (i32.const 1)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_6 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 0)))
    (local.get $$array_literal_6)
   )))
   ;; jsvarargs.Main.f1(1,(int[] $array_literal = new OfInt.<init>(0),$array_literal));
   (drop (call $m_f1__int__arrayOf_int__int@jsvarargs.Main (i32.const 1)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_7 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 0)))
    (local.get $$array_literal_7)
   )))
   ;; int[] ints = (int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal);
   
   (local.set $ints (block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_8 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_8)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_8)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal_8)
   ))
   ;; jsvarargs.Main.f1(1,ints);
   (drop (call $m_f1__int__arrayOf_int__int@jsvarargs.Main (i32.const 1)(local.get $ints)))
   ;; jsvarargs.Main.f1(1,ints);
   (drop (call $m_f1__int__arrayOf_int__int@jsvarargs.Main (i32.const 1)(local.get $ints)))
   ;; jsvarargs.Main.f1(1,null);
   (drop (call $m_f1__int__arrayOf_int__int@jsvarargs.Main (i32.const 1)(ref.null $javaemul.internal.WasmArray.OfInt)))
  )
 )
)
(elem declare func $m_testStaticMethodNotFirst__void@jsvarargs.Main)

;;; void Main.testStaticMethodFirst()
(func $m_testStaticMethodFirst__void@jsvarargs.Main
 (param $this.untyped (ref null $java.lang.Object))
 (local $$array_literal (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_1 (ref null $javaemul.internal.WasmArray.OfObject))
 (local $$array_literal_2 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_3 (ref null $javaemul.internal.WasmArray.OfObject))
 (local $$array_literal_4 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_5 (ref null $javaemul.internal.WasmArray.OfObject))
 (local $$array_literal_6 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_7 (ref null $javaemul.internal.WasmArray.OfObject))
 (local $$array_literal_8 (ref null $javaemul.internal.WasmArray.OfObject))
 (local $$array_literal_9 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_10 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_11 (ref null $javaemul.internal.WasmArray.OfObject))
 (local $$array_literal_12 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_13 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_14 (ref null $javaemul.internal.WasmArray.OfObject))
 (local $$array_literal_15 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_16 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_17 (ref null $javaemul.internal.WasmArray.OfObject))
 (local $$array_literal_18 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_19 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $ints (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_20 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $integers (ref null $javaemul.internal.WasmArray.OfObject))
 (local $$array_literal_21 (ref null $javaemul.internal.WasmArray.OfObject))
 (local $this (ref null $jsvarargs.Main))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsvarargs.Main.rtt)))
 (block $return.label
  (block
   ;; jsvarargs.Main.f2((int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal));
   (drop (call $m_f2__arrayOf_int__int@jsvarargs.Main (block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal)
   )))
   ;; jsvarargs.Main.generics((Integer[] $array_literal = new OfObject.<init>(2),($array_literal.elements[0] = java.lang.Integer.valueOf(1)),($array_literal.elements[1] = java.lang.Integer.valueOf(2)),$array_literal));
   (drop (call $m_generics__arrayOf_java_lang_Object__java_lang_Object@jsvarargs.Main (block (result (ref null $javaemul.internal.WasmArray.OfObject))
    
    (local.set $$array_literal_1 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfObject (struct.new_with_rtt $javaemul.internal.WasmArray.OfObject (global.get $javaemul.internal.WasmArray.OfObject.vtable) (i32.const 0) (ref.null $java.lang.Object.array) (global.get $javaemul.internal.WasmArray.OfObject.rtt))(i32.const 2)))
    (array.set $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $$array_literal_1)) (i32.const 0) (call $m_valueOf__int__java_lang_Integer@java.lang.Integer (i32.const 1)))
    (array.set $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $$array_literal_1)) (i32.const 1) (call $m_valueOf__int__java_lang_Integer@java.lang.Integer (i32.const 2)))
    (local.get $$array_literal_1)
   )))
   ;; jsvarargs.Main.f2((int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal));
   (drop (call $m_f2__arrayOf_int__int@jsvarargs.Main (block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_2 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_2)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_2)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal_2)
   )))
   ;; jsvarargs.Main.generics((Integer[] $array_literal = new OfObject.<init>(2),($array_literal.elements[0] = java.lang.Integer.valueOf(1)),($array_literal.elements[1] = java.lang.Integer.valueOf(2)),$array_literal));
   (drop (call $m_generics__arrayOf_java_lang_Object__java_lang_Object@jsvarargs.Main (block (result (ref null $javaemul.internal.WasmArray.OfObject))
    
    (local.set $$array_literal_3 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfObject (struct.new_with_rtt $javaemul.internal.WasmArray.OfObject (global.get $javaemul.internal.WasmArray.OfObject.vtable) (i32.const 0) (ref.null $java.lang.Object.array) (global.get $javaemul.internal.WasmArray.OfObject.rtt))(i32.const 2)))
    (array.set $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $$array_literal_3)) (i32.const 0) (call $m_valueOf__int__java_lang_Integer@java.lang.Integer (i32.const 1)))
    (array.set $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $$array_literal_3)) (i32.const 1) (call $m_valueOf__int__java_lang_Integer@java.lang.Integer (i32.const 2)))
    (local.get $$array_literal_3)
   )))
   ;; jsvarargs.Main.f2((int[] $array_literal = new OfInt.<init>(0),$array_literal));
   (drop (call $m_f2__arrayOf_int__int@jsvarargs.Main (block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_4 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 0)))
    (local.get $$array_literal_4)
   )))
   ;; jsvarargs.Main.generics((Object[] $array_literal = new OfObject.<init>(0),$array_literal));
   (drop (call $m_generics__arrayOf_java_lang_Object__java_lang_Object@jsvarargs.Main (block (result (ref null $javaemul.internal.WasmArray.OfObject))
    
    (local.set $$array_literal_5 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfObject (struct.new_with_rtt $javaemul.internal.WasmArray.OfObject (global.get $javaemul.internal.WasmArray.OfObject.vtable) (i32.const 0) (ref.null $java.lang.Object.array) (global.get $javaemul.internal.WasmArray.OfObject.rtt))(i32.const 0)))
    (local.get $$array_literal_5)
   )))
   ;; jsvarargs.Main.f2((int[] $array_literal = new OfInt.<init>(0),$array_literal));
   (drop (call $m_f2__arrayOf_int__int@jsvarargs.Main (block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_6 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 0)))
    (local.get $$array_literal_6)
   )))
   ;; jsvarargs.Main.generics((Object[] $array_literal = new OfObject.<init>(0),$array_literal));
   (drop (call $m_generics__arrayOf_java_lang_Object__java_lang_Object@jsvarargs.Main (block (result (ref null $javaemul.internal.WasmArray.OfObject))
    
    (local.set $$array_literal_7 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfObject (struct.new_with_rtt $javaemul.internal.WasmArray.OfObject (global.get $javaemul.internal.WasmArray.OfObject.vtable) (i32.const 0) (ref.null $java.lang.Object.array) (global.get $javaemul.internal.WasmArray.OfObject.rtt))(i32.const 0)))
    (local.get $$array_literal_7)
   )))
   ;; jsvarargs.Main.generics((Integer[] $array_literal = new OfObject.<init>(0),$array_literal));
   (drop (call $m_generics__arrayOf_java_lang_Object__java_lang_Object@jsvarargs.Main (block (result (ref null $javaemul.internal.WasmArray.OfObject))
    
    (local.set $$array_literal_8 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfObject (struct.new_with_rtt $javaemul.internal.WasmArray.OfObject (global.get $javaemul.internal.WasmArray.OfObject.vtable) (i32.const 0) (ref.null $java.lang.Object.array) (global.get $javaemul.internal.WasmArray.OfObject.rtt))(i32.const 0)))
    (local.get $$array_literal_8)
   )))
   ;; jsvarargs.Main.f2((int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal));
   (drop (call $m_f2__arrayOf_int__int@jsvarargs.Main (block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_9 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_9)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_9)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal_9)
   )))
   ;; jsvarargs.Main.f2((int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal));
   (drop (call $m_f2__arrayOf_int__int@jsvarargs.Main (block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_10 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_10)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_10)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal_10)
   )))
   ;; jsvarargs.Main.generics((int[][] $array_literal = javaemul.internal.WasmArray.createMultiDimensional((int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = -1),$array_literal),5),($array_literal.elements[0] = (int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal)),$array_literal));
   (drop (call $m_generics__arrayOf_java_lang_Object__java_lang_Object@jsvarargs.Main (block (result (ref null $javaemul.internal.WasmArray.OfObject))
    
    (local.set $$array_literal_11 (call $m_createMultiDimensional__arrayOf_int__int__arrayOf_java_lang_Object@javaemul.internal.WasmArray (block (result (ref null $javaemul.internal.WasmArray.OfInt))
     
     (local.set $$array_literal_12 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
     (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_12)) (i32.const 0) (i32.const 1))
     (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_12)) (i32.const 1) (i32.const -1))
     (local.get $$array_literal_12)
    )(i32.const 5)))
    (array.set $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $$array_literal_11)) (i32.const 0) (block (result (ref null $javaemul.internal.WasmArray.OfInt))
     
     (local.set $$array_literal_13 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
     (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_13)) (i32.const 0) (i32.const 1))
     (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_13)) (i32.const 1) (i32.const 2))
     (local.get $$array_literal_13)
    ))
    (local.get $$array_literal_11)
   )))
   ;; jsvarargs.Main.generics((Integer[] $array_literal = new OfObject.<init>(2),($array_literal.elements[0] = java.lang.Integer.valueOf(1)),($array_literal.elements[1] = java.lang.Integer.valueOf(2)),$array_literal));
   (drop (call $m_generics__arrayOf_java_lang_Object__java_lang_Object@jsvarargs.Main (block (result (ref null $javaemul.internal.WasmArray.OfObject))
    
    (local.set $$array_literal_14 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfObject (struct.new_with_rtt $javaemul.internal.WasmArray.OfObject (global.get $javaemul.internal.WasmArray.OfObject.vtable) (i32.const 0) (ref.null $java.lang.Object.array) (global.get $javaemul.internal.WasmArray.OfObject.rtt))(i32.const 2)))
    (array.set $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $$array_literal_14)) (i32.const 0) (call $m_valueOf__int__java_lang_Integer@java.lang.Integer (i32.const 1)))
    (array.set $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $$array_literal_14)) (i32.const 1) (call $m_valueOf__int__java_lang_Integer@java.lang.Integer (i32.const 2)))
    (local.get $$array_literal_14)
   )))
   ;; jsvarargs.Main.f2((int[] $array_literal = new OfInt.<init>(0),$array_literal));
   (drop (call $m_f2__arrayOf_int__int@jsvarargs.Main (block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_15 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 0)))
    (local.get $$array_literal_15)
   )))
   ;; jsvarargs.Main.f2((int[] $array_literal = new OfInt.<init>(0),$array_literal));
   (drop (call $m_f2__arrayOf_int__int@jsvarargs.Main (block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_16 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 0)))
    (local.get $$array_literal_16)
   )))
   ;; jsvarargs.Main.generics((int[][] $array_literal = javaemul.internal.WasmArray.createMultiDimensional((int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = -1),$array_literal),5),($array_literal.elements[0] = (int[] $array_literal = new OfInt.<init>(0),$array_literal)),$array_literal));
   (drop (call $m_generics__arrayOf_java_lang_Object__java_lang_Object@jsvarargs.Main (block (result (ref null $javaemul.internal.WasmArray.OfObject))
    
    (local.set $$array_literal_17 (call $m_createMultiDimensional__arrayOf_int__int__arrayOf_java_lang_Object@javaemul.internal.WasmArray (block (result (ref null $javaemul.internal.WasmArray.OfInt))
     
     (local.set $$array_literal_18 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
     (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_18)) (i32.const 0) (i32.const 1))
     (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_18)) (i32.const 1) (i32.const -1))
     (local.get $$array_literal_18)
    )(i32.const 5)))
    (array.set $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $$array_literal_17)) (i32.const 0) (block (result (ref null $javaemul.internal.WasmArray.OfInt))
     
     (local.set $$array_literal_19 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 0)))
     (local.get $$array_literal_19)
    ))
    (local.get $$array_literal_17)
   )))
   ;; int[] ints = (int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal);
   
   (local.set $ints (block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_20 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_20)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_20)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal_20)
   ))
   ;; Integer[] integers = (Integer[] $array_literal = new OfObject.<init>(2),($array_literal.elements[0] = java.lang.Integer.valueOf(1)),($array_literal.elements[1] = java.lang.Integer.valueOf(2)),$array_literal);
   
   (local.set $integers (block (result (ref null $javaemul.internal.WasmArray.OfObject))
    
    (local.set $$array_literal_21 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfObject (struct.new_with_rtt $javaemul.internal.WasmArray.OfObject (global.get $javaemul.internal.WasmArray.OfObject.vtable) (i32.const 0) (ref.null $java.lang.Object.array) (global.get $javaemul.internal.WasmArray.OfObject.rtt))(i32.const 2)))
    (array.set $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $$array_literal_21)) (i32.const 0) (call $m_valueOf__int__java_lang_Integer@java.lang.Integer (i32.const 1)))
    (array.set $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $$array_literal_21)) (i32.const 1) (call $m_valueOf__int__java_lang_Integer@java.lang.Integer (i32.const 2)))
    (local.get $$array_literal_21)
   ))
   ;; jsvarargs.Main.f2(ints);
   (drop (call $m_f2__arrayOf_int__int@jsvarargs.Main (local.get $ints)))
   ;; jsvarargs.Main.f2(ints);
   (drop (call $m_f2__arrayOf_int__int@jsvarargs.Main (local.get $ints)))
   ;; jsvarargs.Main.generics(integers);
   (drop (call $m_generics__arrayOf_java_lang_Object__java_lang_Object@jsvarargs.Main (local.get $integers)))
  )
 )
)
(elem declare func $m_testStaticMethodFirst__void@jsvarargs.Main)

;;; void Main.testInstanceMethodNotFirst()
(func $m_testInstanceMethodNotFirst__void@jsvarargs.Main
 (param $this.untyped (ref null $java.lang.Object))
 (local $m (ref null $jsvarargs.Main))
 (local $$array_literal (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_1 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_2 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_3 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $ints (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_4 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $this (ref null $jsvarargs.Main))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsvarargs.Main.rtt)))
 (block $return.label
  (block
   ;; Main m = new Main.<init>(1);
   
   (local.set $m (call $m_<init>__int__void@jsvarargs.Main (struct.new_with_rtt $jsvarargs.Main (global.get $jsvarargs.Main.vtable) (i32.const 0) (i32.const 0) (global.get $jsvarargs.Main.rtt))(i32.const 1)))
   ;; m.f3(1,(int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal));
   (drop (call_ref (local.get $m)(i32.const 1)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal)
   )(struct.get $jsvarargs.Main.vtable $m_f3__int__arrayOf_int__int (struct.get $jsvarargs.Main $vtable(local.get $m)))))
   ;; m.f3(1,(int[] $array_literal = new OfInt.<init>(0),$array_literal));
   (drop (call_ref (local.get $m)(i32.const 1)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_1 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 0)))
    (local.get $$array_literal_1)
   )(struct.get $jsvarargs.Main.vtable $m_f3__int__arrayOf_int__int (struct.get $jsvarargs.Main $vtable(local.get $m)))))
   ;; m.f3(1,(int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal));
   (drop (call_ref (local.get $m)(i32.const 1)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_2 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_2)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_2)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal_2)
   )(struct.get $jsvarargs.Main.vtable $m_f3__int__arrayOf_int__int (struct.get $jsvarargs.Main $vtable(local.get $m)))))
   ;; m.f3(1,(int[] $array_literal = new OfInt.<init>(0),$array_literal));
   (drop (call_ref (local.get $m)(i32.const 1)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_3 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 0)))
    (local.get $$array_literal_3)
   )(struct.get $jsvarargs.Main.vtable $m_f3__int__arrayOf_int__int (struct.get $jsvarargs.Main $vtable(local.get $m)))))
   ;; int[] ints = (int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal);
   
   (local.set $ints (block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_4 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_4)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_4)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal_4)
   ))
   ;; m.f3(1,ints);
   (drop (call_ref (local.get $m)(i32.const 1)(local.get $ints)(struct.get $jsvarargs.Main.vtable $m_f3__int__arrayOf_int__int (struct.get $jsvarargs.Main $vtable(local.get $m)))))
  )
 )
)
(elem declare func $m_testInstanceMethodNotFirst__void@jsvarargs.Main)

;;; void Main.testInstanceMethodFirst()
(func $m_testInstanceMethodFirst__void@jsvarargs.Main
 (param $this.untyped (ref null $java.lang.Object))
 (local $m (ref null $jsvarargs.Main))
 (local $$array_literal (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_1 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_2 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_3 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $ints (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_4 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $this (ref null $jsvarargs.Main))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsvarargs.Main.rtt)))
 (block $return.label
  (block
   ;; Main m = new Main.<init>(1);
   
   (local.set $m (call $m_<init>__int__void@jsvarargs.Main (struct.new_with_rtt $jsvarargs.Main (global.get $jsvarargs.Main.vtable) (i32.const 0) (i32.const 0) (global.get $jsvarargs.Main.rtt))(i32.const 1)))
   ;; m.f4((int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal));
   (drop (call_ref (local.get $m)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal)
   )(struct.get $jsvarargs.Main.vtable $m_f4__arrayOf_int__int (struct.get $jsvarargs.Main $vtable(local.get $m)))))
   ;; m.f4((int[] $array_literal = new OfInt.<init>(0),$array_literal));
   (drop (call_ref (local.get $m)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_1 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 0)))
    (local.get $$array_literal_1)
   )(struct.get $jsvarargs.Main.vtable $m_f4__arrayOf_int__int (struct.get $jsvarargs.Main $vtable(local.get $m)))))
   ;; m.f4((int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal));
   (drop (call_ref (local.get $m)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_2 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_2)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_2)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal_2)
   )(struct.get $jsvarargs.Main.vtable $m_f4__arrayOf_int__int (struct.get $jsvarargs.Main $vtable(local.get $m)))))
   ;; m.f4((int[] $array_literal = new OfInt.<init>(0),$array_literal));
   (drop (call_ref (local.get $m)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_3 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 0)))
    (local.get $$array_literal_3)
   )(struct.get $jsvarargs.Main.vtable $m_f4__arrayOf_int__int (struct.get $jsvarargs.Main $vtable(local.get $m)))))
   ;; int[] ints = (int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal);
   
   (local.set $ints (block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_4 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_4)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_4)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal_4)
   ))
   ;; m.f4(ints);
   (drop (call_ref (local.get $m)(local.get $ints)(struct.get $jsvarargs.Main.vtable $m_f4__arrayOf_int__int (struct.get $jsvarargs.Main $vtable(local.get $m)))))
  )
 )
)
(elem declare func $m_testInstanceMethodFirst__void@jsvarargs.Main)

;;; void Main.testJsFunction()
(func $m_testJsFunction__void@jsvarargs.Main
 (param $this.untyped (ref null $java.lang.Object))
 (local $a (ref null $jsvarargs.Main.AFunction))
 (local $o1 (ref null $java.lang.Object))
 (local $o2 (ref null $java.lang.Object))
 (local $$array_literal (ref null $javaemul.internal.WasmArray.OfObject))
 (local $$array_literal_1 (ref null $javaemul.internal.WasmArray.OfObject))
 (local $$array_literal_2 (ref null $javaemul.internal.WasmArray.OfObject))
 (local $$array_literal_3 (ref null $javaemul.internal.WasmArray.OfObject))
 (local $os (ref null $javaemul.internal.WasmArray.OfObject))
 (local $$array_literal_4 (ref null $javaemul.internal.WasmArray.OfObject))
 (local $this (ref null $jsvarargs.Main))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsvarargs.Main.rtt)))
 (block $return.label
  (block
   ;; AFunction a = new AFunction.<init>();
   
   (local.set $a (call $m_<init>__void_$pp_jsvarargs@jsvarargs.Main.AFunction (struct.new_with_rtt $jsvarargs.Main.AFunction (global.get $jsvarargs.Main.AFunction.vtable) (i32.const 0) (global.get $jsvarargs.Main.AFunction.rtt))))
   ;; Object o1 = new Object.<init>();
   
   (local.set $o1 (call $m_<init>__void@java.lang.Object (struct.new_with_rtt $java.lang.Object (global.get $java.lang.Object.vtable) (i32.const 0) (global.get $java.lang.Object.rtt))))
   ;; Object o2 = new Object.<init>();
   
   (local.set $o2 (call $m_<init>__void@java.lang.Object (struct.new_with_rtt $java.lang.Object (global.get $java.lang.Object.vtable) (i32.const 0) (global.get $java.lang.Object.rtt))))
   ;; a.f1(0,(Object[] $array_literal = new OfObject.<init>(2),($array_literal.elements[0] = o1),($array_literal.elements[1] = o2),$array_literal));
   (drop (call_ref (local.get $a)(i32.const 0)(block (result (ref null $javaemul.internal.WasmArray.OfObject))
    
    (local.set $$array_literal (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfObject (struct.new_with_rtt $javaemul.internal.WasmArray.OfObject (global.get $javaemul.internal.WasmArray.OfObject.vtable) (i32.const 0) (ref.null $java.lang.Object.array) (global.get $javaemul.internal.WasmArray.OfObject.rtt))(i32.const 2)))
    (array.set $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $$array_literal)) (i32.const 0) (local.get $o1))
    (array.set $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $$array_literal)) (i32.const 1) (local.get $o2))
    (local.get $$array_literal)
   )(struct.get $jsvarargs.Main.AFunction.vtable $m_f1__int__arrayOf_java_lang_Object__java_lang_Object (struct.get $jsvarargs.Main.AFunction $vtable(local.get $a)))))
   ;; a.f1(0,(Object[] $array_literal = new OfObject.<init>(0),$array_literal));
   (drop (call_ref (local.get $a)(i32.const 0)(block (result (ref null $javaemul.internal.WasmArray.OfObject))
    
    (local.set $$array_literal_1 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfObject (struct.new_with_rtt $javaemul.internal.WasmArray.OfObject (global.get $javaemul.internal.WasmArray.OfObject.vtable) (i32.const 0) (ref.null $java.lang.Object.array) (global.get $javaemul.internal.WasmArray.OfObject.rtt))(i32.const 0)))
    (local.get $$array_literal_1)
   )(struct.get $jsvarargs.Main.AFunction.vtable $m_f1__int__arrayOf_java_lang_Object__java_lang_Object (struct.get $jsvarargs.Main.AFunction $vtable(local.get $a)))))
   ;; a.f1(0,(Object[] $array_literal = new OfObject.<init>(2),($array_literal.elements[0] = o1),($array_literal.elements[1] = o2),$array_literal));
   (drop (call_ref (local.get $a)(i32.const 0)(block (result (ref null $javaemul.internal.WasmArray.OfObject))
    
    (local.set $$array_literal_2 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfObject (struct.new_with_rtt $javaemul.internal.WasmArray.OfObject (global.get $javaemul.internal.WasmArray.OfObject.vtable) (i32.const 0) (ref.null $java.lang.Object.array) (global.get $javaemul.internal.WasmArray.OfObject.rtt))(i32.const 2)))
    (array.set $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $$array_literal_2)) (i32.const 0) (local.get $o1))
    (array.set $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $$array_literal_2)) (i32.const 1) (local.get $o2))
    (local.get $$array_literal_2)
   )(struct.get $jsvarargs.Main.AFunction.vtable $m_f1__int__arrayOf_java_lang_Object__java_lang_Object (struct.get $jsvarargs.Main.AFunction $vtable(local.get $a)))))
   ;; a.f1(0,(Object[] $array_literal = new OfObject.<init>(0),$array_literal));
   (drop (call_ref (local.get $a)(i32.const 0)(block (result (ref null $javaemul.internal.WasmArray.OfObject))
    
    (local.set $$array_literal_3 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfObject (struct.new_with_rtt $javaemul.internal.WasmArray.OfObject (global.get $javaemul.internal.WasmArray.OfObject.vtable) (i32.const 0) (ref.null $java.lang.Object.array) (global.get $javaemul.internal.WasmArray.OfObject.rtt))(i32.const 0)))
    (local.get $$array_literal_3)
   )(struct.get $jsvarargs.Main.AFunction.vtable $m_f1__int__arrayOf_java_lang_Object__java_lang_Object (struct.get $jsvarargs.Main.AFunction $vtable(local.get $a)))))
   ;; Object[] os = (Object[] $array_literal = new OfObject.<init>(2),($array_literal.elements[0] = o1),($array_literal.elements[1] = o2),$array_literal);
   
   (local.set $os (block (result (ref null $javaemul.internal.WasmArray.OfObject))
    
    (local.set $$array_literal_4 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfObject (struct.new_with_rtt $javaemul.internal.WasmArray.OfObject (global.get $javaemul.internal.WasmArray.OfObject.vtable) (i32.const 0) (ref.null $java.lang.Object.array) (global.get $javaemul.internal.WasmArray.OfObject.rtt))(i32.const 2)))
    (array.set $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $$array_literal_4)) (i32.const 0) (local.get $o1))
    (array.set $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $$array_literal_4)) (i32.const 1) (local.get $o2))
    (local.get $$array_literal_4)
   ))
   ;; a.f1(0,os);
   (drop (call_ref (local.get $a)(i32.const 0)(local.get $os)(struct.get $jsvarargs.Main.AFunction.vtable $m_f1__int__arrayOf_java_lang_Object__java_lang_Object (struct.get $jsvarargs.Main.AFunction $vtable(local.get $a)))))
  )
 )
)
(elem declare func $m_testJsFunction__void@jsvarargs.Main)

;;; void Main.testSideEffect()
(func $m_testSideEffect__void@jsvarargs.Main
 (param $this.untyped (ref null $java.lang.Object))
 (local $ints (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$qualifier (ref null $jsvarargs.Main))
 (local $this (ref null $jsvarargs.Main))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsvarargs.Main.rtt)))
 (block $return.label
  (block
   ;; int[] ints = (int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal);
   
   (local.set $ints (block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal)
   ))
   (block
    ;; Main $qualifier = new Main.<init>(1);
    
    (local.set $$qualifier (call $m_<init>__int__void@jsvarargs.Main (struct.new_with_rtt $jsvarargs.Main (global.get $jsvarargs.Main.vtable) (i32.const 0) (i32.const 0) (global.get $jsvarargs.Main.rtt))(i32.const 1)))
    ;; $qualifier.f3(1,ints);
    (drop (call_ref (local.get $$qualifier)(i32.const 1)(local.get $ints)(struct.get $jsvarargs.Main.vtable $m_f3__int__arrayOf_int__int (struct.get $jsvarargs.Main $vtable(local.get $$qualifier)))))
   )
  )
 )
)
(elem declare func $m_testSideEffect__void@jsvarargs.Main)

;;; void Main.testNullJsVarargs()
(func $m_testNullJsVarargs__void@jsvarargs.Main
 (param $this.untyped (ref null $java.lang.Object))
 (local $ints (ref null $javaemul.internal.WasmArray.OfInt))
 (local $this (ref null $jsvarargs.Main))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsvarargs.Main.rtt)))
 (block $return.label
  (block
   ;; int[] ints = null;
   
   (local.set $ints (ref.null $javaemul.internal.WasmArray.OfInt))
   ;; jsvarargs.Main.f2(ints);
   (drop (call $m_f2__arrayOf_int__int@jsvarargs.Main (local.get $ints)))
  )
 )
)
(elem declare func $m_testNullJsVarargs__void@jsvarargs.Main)

;;; void Main.testGenericJsFunctionWithVarags()
(func $m_testGenericJsFunctionWithVarags__void@jsvarargs.Main
 (param $this.untyped (ref null $java.lang.Object))
 (local $function (ref null $java.lang.Object))
 (local $n (ref null $java.lang.Object))
 (local $param (ref null $javaemul.internal.WasmArray.OfObject))
 (local $this (ref null $jsvarargs.Main))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsvarargs.Main.rtt)))
 (block $return.label
  (block
   ;; GenericFunction<U> function = function (U n,U[] param){
   
   (local.set $function (ref.null $java.lang.Object))
  )
 )
)
(elem declare func $m_testGenericJsFunctionWithVarags__void@jsvarargs.Main)

;;; void Main.$clinit()
(func $$clinit__void@jsvarargs.Main
 (block $return.label
  (block
   ;; if (jsvarargs.Main.$initialized) return;
   (if (global.get $f_$initialized__jsvarargs_Main)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsvarargs.Main.$initialized = true);
   (global.set $f_$initialized__jsvarargs_Main (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> Main.getClass()
(func $m_getClass__java_lang_Class@jsvarargs.Main
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $jsvarargs.Main))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsvarargs.Main.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsvarargs.Main();
   (local.set $return.value (call $$getJsvarargs.Main__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsvarargs.Main)

;;; Code for jsvarargs.Main.NativeObject [CLASS]
(type $jsvarargs.Main.NativeObject (struct
 (field $vtable (ref null $jsvarargs.Main.NativeObject.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $jsvarargs.Main.NativeObject.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))

;;; NativeObject(Object... pars)
(func $m_<init>__arrayOf_java_lang_Object__void@jsvarargs.Main.NativeObject
 (param $this (ref null $jsvarargs.Main.NativeObject))
 (param $pars (ref null $javaemul.internal.WasmArray.OfObject))
 (result (ref null $jsvarargs.Main.NativeObject))
 (block $return.label
  (block
   ;; jsvarargs.Main.NativeObject.$clinit();
   (call $$clinit__void@jsvarargs.Main.NativeObject )
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void NativeObject.$clinit()
(func $$clinit__void@jsvarargs.Main.NativeObject
 (block $return.label
  (block
   ;; if (jsvarargs.Main.NativeObject.$initialized) return;
   (if (global.get $f_$initialized__jsvarargs_Main_NativeObject)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsvarargs.Main.NativeObject.$initialized = true);
   (global.set $f_$initialized__jsvarargs_Main_NativeObject (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> NativeObject.getClass()
(func $m_getClass__java_lang_Class@jsvarargs.Main.NativeObject
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $jsvarargs.Main.NativeObject))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsvarargs.Main.NativeObject.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsvarargs.Main.NativeObject();
   (local.set $return.value (call $$getJsvarargs.Main.NativeObject__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsvarargs.Main.NativeObject)

;;; Code for jsvarargs.Main.SubVarargsConstructorClass [CLASS]
(type $jsvarargs.Main.SubVarargsConstructorClass (struct
 (field $vtable (ref null $jsvarargs.Main.SubVarargsConstructorClass.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $jsvarargs.Main.SubVarargsConstructorClass.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))

;;; SubVarargsConstructorClass(int i, Object... args)
(func $m_<init>__int__arrayOf_java_lang_Object__void@jsvarargs.Main.SubVarargsConstructorClass
 (param $this (ref null $jsvarargs.Main.SubVarargsConstructorClass))
 (param $i i32)
 (param $args (ref null $javaemul.internal.WasmArray.OfObject))
 (result (ref null $jsvarargs.Main.SubVarargsConstructorClass))
 (block $return.label
  (block
   ;; jsvarargs.Main.SubVarargsConstructorClass.$clinit();
   (call $$clinit__void@jsvarargs.Main.SubVarargsConstructorClass )
   ;; NativeObject.this.NativeObject.<init>(args);
   (drop (call $m_<init>__arrayOf_java_lang_Object__void@jsvarargs.Main.NativeObject (local.get $this)(local.get $args)))
  )
 )
 (local.get $this)
)

;;; void SubVarargsConstructorClass.$clinit()
(func $$clinit__void@jsvarargs.Main.SubVarargsConstructorClass
 (block $return.label
  (block
   ;; if (jsvarargs.Main.SubVarargsConstructorClass.$initialized) return;
   (if (global.get $f_$initialized__jsvarargs_Main_SubVarargsConstructorClass)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsvarargs.Main.SubVarargsConstructorClass.$initialized = true);
   (global.set $f_$initialized__jsvarargs_Main_SubVarargsConstructorClass (i32.const 1))
  )
 )
)

;;; Class<?> SubVarargsConstructorClass.getClass()
(func $m_getClass__java_lang_Class@jsvarargs.Main.SubVarargsConstructorClass
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $jsvarargs.Main.SubVarargsConstructorClass))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsvarargs.Main.SubVarargsConstructorClass.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsvarargs.Main.SubVarargsConstructorClass();
   (local.set $return.value (call $$getJsvarargs.Main.SubVarargsConstructorClass__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsvarargs.Main.SubVarargsConstructorClass)

;;; Code for jsvarargs.Main.Function [INTERFACE]

;;; void Function.$clinit()
(func $$clinit__void@jsvarargs.Main.Function
 (block $return.label
  (block
   ;; if (jsvarargs.Main.Function.$initialized) return;
   (if (global.get $f_$initialized__jsvarargs_Main_Function)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsvarargs.Main.Function.$initialized = true);
   (global.set $f_$initialized__jsvarargs_Main_Function (i32.const 1))
  )
 )
)

;;; Class<?> Function.getClass()
(func $m_getClass__java_lang_Class@jsvarargs.Main.Function
 (param $this (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsvarargs.Main.Function();
   (local.set $return.value (call $$getJsvarargs.Main.Function__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsvarargs.Main.Function)

;;; Code for jsvarargs.Main.AbstractMethodWithVarargs [CLASS]
(type $jsvarargs.Main.AbstractMethodWithVarargs (struct
 (field $vtable (ref null $jsvarargs.Main.AbstractMethodWithVarargs.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $jsvarargs.Main.AbstractMethodWithVarargs.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_abstractMethod__arrayOf_int__void (mut (ref $function.$javaemul.internal.WasmArray.OfInt__$void)))
))

;;; AbstractMethodWithVarargs()
(func $m_<init>__void@jsvarargs.Main.AbstractMethodWithVarargs
 (param $this (ref null $jsvarargs.Main.AbstractMethodWithVarargs))
 (result (ref null $jsvarargs.Main.AbstractMethodWithVarargs))
 (block $return.label
  (block
   ;; jsvarargs.Main.AbstractMethodWithVarargs.$clinit();
   (call $$clinit__void@jsvarargs.Main.AbstractMethodWithVarargs )
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void AbstractMethodWithVarargs.$clinit()
(func $$clinit__void@jsvarargs.Main.AbstractMethodWithVarargs
 (block $return.label
  (block
   ;; if (jsvarargs.Main.AbstractMethodWithVarargs.$initialized) return;
   (if (global.get $f_$initialized__jsvarargs_Main_AbstractMethodWithVarargs)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsvarargs.Main.AbstractMethodWithVarargs.$initialized = true);
   (global.set $f_$initialized__jsvarargs_Main_AbstractMethodWithVarargs (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> AbstractMethodWithVarargs.getClass()
(func $m_getClass__java_lang_Class@jsvarargs.Main.AbstractMethodWithVarargs
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $jsvarargs.Main.AbstractMethodWithVarargs))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsvarargs.Main.AbstractMethodWithVarargs.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsvarargs.Main.AbstractMethodWithVarargs();
   (local.set $return.value (call $$getJsvarargs.Main.AbstractMethodWithVarargs__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsvarargs.Main.AbstractMethodWithVarargs)

;;; Code for jsvarargs.Main.StaticInterfaceMethodWithVarargs [INTERFACE]

;;; void StaticInterfaceMethodWithVarargs.staticMethod(int... args)
(func $m_staticMethod__arrayOf_int__void@jsvarargs.Main.StaticInterfaceMethodWithVarargs
 (param $args (ref null $javaemul.internal.WasmArray.OfInt))
 (block $return.label
  (block
   ;; jsvarargs.Main.StaticInterfaceMethodWithVarargs.$clinit();
   (call $$clinit__void@jsvarargs.Main.StaticInterfaceMethodWithVarargs )
  )
 )
)

;;; void StaticInterfaceMethodWithVarargs.$clinit()
(func $$clinit__void@jsvarargs.Main.StaticInterfaceMethodWithVarargs
 (block $return.label
  (block
   ;; if (jsvarargs.Main.StaticInterfaceMethodWithVarargs.$initialized) return;
   (if (global.get $f_$initialized__jsvarargs_Main_StaticInterfaceMethodWithVarargs)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsvarargs.Main.StaticInterfaceMethodWithVarargs.$initialized = true);
   (global.set $f_$initialized__jsvarargs_Main_StaticInterfaceMethodWithVarargs (i32.const 1))
  )
 )
)

;;; Class<?> StaticInterfaceMethodWithVarargs.getClass()
(func $m_getClass__java_lang_Class@jsvarargs.Main.StaticInterfaceMethodWithVarargs
 (param $this (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsvarargs.Main.StaticInterfaceMethodWithVarargs();
   (local.set $return.value (call $$getJsvarargs.Main.StaticInterfaceMethodWithVarargs__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsvarargs.Main.StaticInterfaceMethodWithVarargs)

;;; Code for jsvarargs.Main.AFunction [CLASS]
(type $jsvarargs.Main.AFunction (struct
 (field $vtable (ref null $jsvarargs.Main.AFunction.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $jsvarargs.Main.AFunction.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_f1__int__arrayOf_java_lang_Object__java_lang_Object (mut (ref $function.$int__$javaemul.internal.WasmArray.OfObject__$java.lang.Object)))
))

;;; AFunction()
(func $m_<init>__void_$pp_jsvarargs@jsvarargs.Main.AFunction
 (param $this (ref null $jsvarargs.Main.AFunction))
 (result (ref null $jsvarargs.Main.AFunction))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; Object AFunction.f1(int i, Object... args)
(func $m_f1__int__arrayOf_java_lang_Object__java_lang_Object@jsvarargs.Main.AFunction
 (param $this.untyped (ref null $java.lang.Object))
 (param $i i32)
 (param $args (ref null $javaemul.internal.WasmArray.OfObject))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (local $$cast_expression (ref null $java.lang.Object))
 (local $this (ref null $jsvarargs.Main.AFunction))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsvarargs.Main.AFunction.rtt)))
 (block $return.label
  (block
   ;; return (Object $cast_expression = args.elements[i],(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((Object) $cast_expression)));
   (local.set $return.value (block (result (ref null $java.lang.Object))
    
    (local.set $$cast_expression (array.get $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $args)) (local.get $i)))
    (if (result (ref null $java.lang.Object)) (ref.is_null (local.get $$cast_expression)) (then (ref.null $java.lang.Object)) (else (ref.cast (local.get $$cast_expression) (global.get $java.lang.Object.rtt))))
   ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_f1__int__arrayOf_java_lang_Object__java_lang_Object@jsvarargs.Main.AFunction)

;;; void AFunction.$clinit()
(func $$clinit__void@jsvarargs.Main.AFunction
 (block $return.label
  (block
   ;; if (jsvarargs.Main.AFunction.$initialized) return;
   (if (global.get $f_$initialized__jsvarargs_Main_AFunction)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsvarargs.Main.AFunction.$initialized = true);
   (global.set $f_$initialized__jsvarargs_Main_AFunction (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> AFunction.getClass()
(func $m_getClass__java_lang_Class@jsvarargs.Main.AFunction
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $jsvarargs.Main.AFunction))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsvarargs.Main.AFunction.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsvarargs.Main.AFunction();
   (local.set $return.value (call $$getJsvarargs.Main.AFunction__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsvarargs.Main.AFunction)

;;; Code for jsvarargs.Main.SubMain [CLASS]
(type $jsvarargs.Main.SubMain (struct
 (field $vtable (ref null $jsvarargs.Main.SubMain.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $f_field__jsvarargs_Main (mut i32))
))
(type $jsvarargs.Main.SubMain.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_f3__int__arrayOf_int__int (mut (ref $function.$int__$javaemul.internal.WasmArray.OfInt__$int)))
 (field $m_f4__arrayOf_int__int (mut (ref $function.$javaemul.internal.WasmArray.OfInt__$int)))
 (field $m_testStaticMethodNotFirst__void (mut (ref $function.__$void)))
 (field $m_testStaticMethodFirst__void (mut (ref $function.__$void)))
 (field $m_testInstanceMethodNotFirst__void (mut (ref $function.__$void)))
 (field $m_testInstanceMethodFirst__void (mut (ref $function.__$void)))
 (field $m_testJsFunction__void (mut (ref $function.__$void)))
 (field $m_testSideEffect__void (mut (ref $function.__$void)))
 (field $m_testNullJsVarargs__void (mut (ref $function.__$void)))
 (field $m_testGenericJsFunctionWithVarags__void (mut (ref $function.__$void)))
))

;;; SubMain()
(func $m_<init>__void@jsvarargs.Main.SubMain
 (param $this (ref null $jsvarargs.Main.SubMain))
 (result (ref null $jsvarargs.Main.SubMain))
 (block $return.label
  (block
   ;; Main.this.Main.<init>(10);
   (drop (call $m_<init>__int__void@jsvarargs.Main (local.get $this)(i32.const 10)))
  )
 )
 (local.get $this)
)

;;; int SubMain.f3(int m, int... numbers)
(func $m_f3__int__arrayOf_int__int@jsvarargs.Main.SubMain
 (param $this.untyped (ref null $java.lang.Object))
 (param $m i32)
 (param $numbers (ref null $javaemul.internal.WasmArray.OfInt))
 (result i32)
 (local $return.value i32)
 (local $a i32)
 (local $$array_literal (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_1 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_2 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_3 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $ints (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_4 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $this (ref null $jsvarargs.Main.SubMain))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsvarargs.Main.SubMain.rtt)))
 (block $return.label
  (block
   ;; int a = super.f3(1,(int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal));
   
   (local.set $a (call $m_f3__int__arrayOf_int__int@jsvarargs.Main (local.get $this)(i32.const 1)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal)
   )))
   ;; (a = (a + super.f3(1,(int[] $array_literal = new OfInt.<init>(0),$array_literal))));
   (local.set $a (i32.add (local.get $a) (call $m_f3__int__arrayOf_int__int@jsvarargs.Main (local.get $this)(i32.const 1)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_1 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 0)))
    (local.get $$array_literal_1)
   ))))
   ;; (a = (a + super.f3(1,(int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal))));
   (local.set $a (i32.add (local.get $a) (call $m_f3__int__arrayOf_int__int@jsvarargs.Main (local.get $this)(i32.const 1)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_2 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_2)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_2)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal_2)
   ))))
   ;; (a = (a + super.f3(1,(int[] $array_literal = new OfInt.<init>(0),$array_literal))));
   (local.set $a (i32.add (local.get $a) (call $m_f3__int__arrayOf_int__int@jsvarargs.Main (local.get $this)(i32.const 1)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_3 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 0)))
    (local.get $$array_literal_3)
   ))))
   ;; int[] ints = (int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal);
   
   (local.set $ints (block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_4 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_4)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_4)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal_4)
   ))
   ;; (a = (a + super.f3(1,ints)));
   (local.set $a (i32.add (local.get $a) (call $m_f3__int__arrayOf_int__int@jsvarargs.Main (local.get $this)(i32.const 1)(local.get $ints))))
   ;; return a;
   (local.set $return.value (local.get $a))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_f3__int__arrayOf_int__int@jsvarargs.Main.SubMain)

;;; void SubMain.$clinit()
(func $$clinit__void@jsvarargs.Main.SubMain
 (block $return.label
  (block
   ;; if (jsvarargs.Main.SubMain.$initialized) return;
   (if (global.get $f_$initialized__jsvarargs_Main_SubMain)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsvarargs.Main.SubMain.$initialized = true);
   (global.set $f_$initialized__jsvarargs_Main_SubMain (i32.const 1))
   ;; jsvarargs.Main.$clinit();
   (call $$clinit__void@jsvarargs.Main )
  )
 )
)

;;; Class<?> SubMain.getClass()
(func $m_getClass__java_lang_Class@jsvarargs.Main.SubMain
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $jsvarargs.Main.SubMain))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsvarargs.Main.SubMain.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsvarargs.Main.SubMain();
   (local.set $return.value (call $$getJsvarargs.Main.SubMain__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsvarargs.Main.SubMain)

;;; Code for jsvarargs.Main.GenericFunction [INTERFACE]

;;; void GenericFunction.$clinit()
(func $$clinit__void@jsvarargs.Main.GenericFunction
 (block $return.label
  (block
   ;; if (jsvarargs.Main.GenericFunction.$initialized) return;
   (if (global.get $f_$initialized__jsvarargs_Main_GenericFunction)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsvarargs.Main.GenericFunction.$initialized = true);
   (global.set $f_$initialized__jsvarargs_Main_GenericFunction (i32.const 1))
  )
 )
)

;;; Class<?> GenericFunction.getClass()
(func $m_getClass__java_lang_Class@jsvarargs.Main.GenericFunction
 (param $this (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsvarargs.Main.GenericFunction();
   (local.set $return.value (call $$getJsvarargs.Main.GenericFunction__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsvarargs.Main.GenericFunction)

;;; Code for jsvarargs.QualifiedSuperMethodCall [CLASS]
(type $jsvarargs.QualifiedSuperMethodCall (struct
 (field $vtable (ref null $jsvarargs.QualifiedSuperMethodCall.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $f_field__jsvarargs_Main (mut i32))
))
(type $jsvarargs.QualifiedSuperMethodCall.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_f3__int__arrayOf_int__int (mut (ref $function.$int__$javaemul.internal.WasmArray.OfInt__$int)))
 (field $m_f4__arrayOf_int__int (mut (ref $function.$javaemul.internal.WasmArray.OfInt__$int)))
 (field $m_testStaticMethodNotFirst__void (mut (ref $function.__$void)))
 (field $m_testStaticMethodFirst__void (mut (ref $function.__$void)))
 (field $m_testInstanceMethodNotFirst__void (mut (ref $function.__$void)))
 (field $m_testInstanceMethodFirst__void (mut (ref $function.__$void)))
 (field $m_testJsFunction__void (mut (ref $function.__$void)))
 (field $m_testSideEffect__void (mut (ref $function.__$void)))
 (field $m_testNullJsVarargs__void (mut (ref $function.__$void)))
 (field $m_testGenericJsFunctionWithVarags__void (mut (ref $function.__$void)))
))

;;; QualifiedSuperMethodCall()
(func $m_<init>__void@jsvarargs.QualifiedSuperMethodCall
 (param $this (ref null $jsvarargs.QualifiedSuperMethodCall))
 (result (ref null $jsvarargs.QualifiedSuperMethodCall))
 (block $return.label
  (block
   ;; Main.this.Main.<init>(0);
   (drop (call $m_<init>__int__void@jsvarargs.Main (local.get $this)(i32.const 0)))
  )
 )
 (local.get $this)
)

;;; void QualifiedSuperMethodCall.$clinit()
(func $$clinit__void@jsvarargs.QualifiedSuperMethodCall
 (block $return.label
  (block
   ;; if (jsvarargs.QualifiedSuperMethodCall.$initialized) return;
   (if (global.get $f_$initialized__jsvarargs_QualifiedSuperMethodCall)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsvarargs.QualifiedSuperMethodCall.$initialized = true);
   (global.set $f_$initialized__jsvarargs_QualifiedSuperMethodCall (i32.const 1))
   ;; jsvarargs.Main.$clinit();
   (call $$clinit__void@jsvarargs.Main )
  )
 )
)

;;; Class<?> QualifiedSuperMethodCall.getClass()
(func $m_getClass__java_lang_Class@jsvarargs.QualifiedSuperMethodCall
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $jsvarargs.QualifiedSuperMethodCall))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsvarargs.QualifiedSuperMethodCall.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsvarargs.QualifiedSuperMethodCall();
   (local.set $return.value (call $$getJsvarargs.QualifiedSuperMethodCall__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsvarargs.QualifiedSuperMethodCall)

;;; Code for jsvarargs.QualifiedSuperMethodCall.InnerClass [CLASS]
(type $jsvarargs.QualifiedSuperMethodCall.InnerClass (struct
 (field $vtable (ref null $jsvarargs.QualifiedSuperMethodCall.InnerClass.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $$outer_this__jsvarargs_QualifiedSuperMethodCall_InnerClass (mut (ref null $jsvarargs.QualifiedSuperMethodCall)))
))
(type $jsvarargs.QualifiedSuperMethodCall.InnerClass.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_test__void (mut (ref $function.__$void)))
))

;;; InnerClass(QualifiedSuperMethodCall $outer_this)
(func $m_<init>__jsvarargs_QualifiedSuperMethodCall__void@jsvarargs.QualifiedSuperMethodCall.InnerClass
 (param $this (ref null $jsvarargs.QualifiedSuperMethodCall.InnerClass))
 (param $$outer_this (ref null $jsvarargs.QualifiedSuperMethodCall))
 (result (ref null $jsvarargs.QualifiedSuperMethodCall.InnerClass))
 (block $return.label
  (block
   ;; (InnerClass.this.this = $outer_this);
   (struct.set $jsvarargs.QualifiedSuperMethodCall.InnerClass $$outer_this__jsvarargs_QualifiedSuperMethodCall_InnerClass(local.get $this) (local.get $$outer_this))
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void InnerClass.test()
(func $m_test__void@jsvarargs.QualifiedSuperMethodCall.InnerClass
 (param $this.untyped (ref null $java.lang.Object))
 (local $$array_literal (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_1 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_2 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_3 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $ints (ref null $javaemul.internal.WasmArray.OfInt))
 (local $$array_literal_4 (ref null $javaemul.internal.WasmArray.OfInt))
 (local $this (ref null $jsvarargs.QualifiedSuperMethodCall.InnerClass))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsvarargs.QualifiedSuperMethodCall.InnerClass.rtt)))
 (block $return.label
  (block
   ;; InnerClass.this.this.f3(1,(int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal));
   (drop (call $m_f3__int__arrayOf_int__int@jsvarargs.Main (struct.get $jsvarargs.QualifiedSuperMethodCall.InnerClass $$outer_this__jsvarargs_QualifiedSuperMethodCall_InnerClass(local.get $this))(i32.const 1)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal)
   )))
   ;; InnerClass.this.this.f3(1,(int[] $array_literal = new OfInt.<init>(0),$array_literal));
   (drop (call $m_f3__int__arrayOf_int__int@jsvarargs.Main (struct.get $jsvarargs.QualifiedSuperMethodCall.InnerClass $$outer_this__jsvarargs_QualifiedSuperMethodCall_InnerClass(local.get $this))(i32.const 1)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_1 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 0)))
    (local.get $$array_literal_1)
   )))
   ;; InnerClass.this.this.f3(1,(int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal));
   (drop (call $m_f3__int__arrayOf_int__int@jsvarargs.Main (struct.get $jsvarargs.QualifiedSuperMethodCall.InnerClass $$outer_this__jsvarargs_QualifiedSuperMethodCall_InnerClass(local.get $this))(i32.const 1)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_2 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_2)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_2)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal_2)
   )))
   ;; InnerClass.this.this.f3(1,(int[] $array_literal = new OfInt.<init>(0),$array_literal));
   (drop (call $m_f3__int__arrayOf_int__int@jsvarargs.Main (struct.get $jsvarargs.QualifiedSuperMethodCall.InnerClass $$outer_this__jsvarargs_QualifiedSuperMethodCall_InnerClass(local.get $this))(i32.const 1)(block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_3 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 0)))
    (local.get $$array_literal_3)
   )))
   ;; int[] ints = (int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 2),$array_literal);
   
   (local.set $ints (block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal_4 (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_4)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal_4)) (i32.const 1) (i32.const 2))
    (local.get $$array_literal_4)
   ))
   ;; InnerClass.this.this.f3(1,ints);
   (drop (call $m_f3__int__arrayOf_int__int@jsvarargs.Main (struct.get $jsvarargs.QualifiedSuperMethodCall.InnerClass $$outer_this__jsvarargs_QualifiedSuperMethodCall_InnerClass(local.get $this))(i32.const 1)(local.get $ints)))
  )
 )
)
(elem declare func $m_test__void@jsvarargs.QualifiedSuperMethodCall.InnerClass)

;;; void InnerClass.$clinit()
(func $$clinit__void@jsvarargs.QualifiedSuperMethodCall.InnerClass
 (block $return.label
  (block
   ;; if (jsvarargs.QualifiedSuperMethodCall.InnerClass.$initialized) return;
   (if (global.get $f_$initialized__jsvarargs_QualifiedSuperMethodCall_InnerClass)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsvarargs.QualifiedSuperMethodCall.InnerClass.$initialized = true);
   (global.set $f_$initialized__jsvarargs_QualifiedSuperMethodCall_InnerClass (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> InnerClass.getClass()
(func $m_getClass__java_lang_Class@jsvarargs.QualifiedSuperMethodCall.InnerClass
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $jsvarargs.QualifiedSuperMethodCall.InnerClass))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsvarargs.QualifiedSuperMethodCall.InnerClass.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsvarargs.QualifiedSuperMethodCall.InnerClass();
   (local.set $return.value (call $$getJsvarargs.QualifiedSuperMethodCall.InnerClass__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsvarargs.QualifiedSuperMethodCall.InnerClass)

 ;;; Code for jsvarargs.Main [vtable.init]
 (global.set $jsvarargs.Main.vtable (struct.new_with_rtt $jsvarargs.Main.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@jsvarargs.Main) (ref.func $m_f3__int__arrayOf_int__int@jsvarargs.Main) (ref.func $m_f4__arrayOf_int__int@jsvarargs.Main) (ref.func $m_testStaticMethodNotFirst__void@jsvarargs.Main) (ref.func $m_testStaticMethodFirst__void@jsvarargs.Main) (ref.func $m_testInstanceMethodNotFirst__void@jsvarargs.Main) (ref.func $m_testInstanceMethodFirst__void@jsvarargs.Main) (ref.func $m_testJsFunction__void@jsvarargs.Main) (ref.func $m_testSideEffect__void@jsvarargs.Main) (ref.func $m_testNullJsVarargs__void@jsvarargs.Main) (ref.func $m_testGenericJsFunctionWithVarags__void@jsvarargs.Main) (rtt.canon $jsvarargs.Main.vtable)))

 ;;; Code for jsvarargs.Main.NativeObject [vtable.init]
 (global.set $jsvarargs.Main.NativeObject.vtable (struct.new_with_rtt $jsvarargs.Main.NativeObject.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@jsvarargs.Main.NativeObject) (rtt.canon $jsvarargs.Main.NativeObject.vtable)))

 ;;; Code for jsvarargs.Main.SubVarargsConstructorClass [vtable.init]
 (global.set $jsvarargs.Main.SubVarargsConstructorClass.vtable (struct.new_with_rtt $jsvarargs.Main.SubVarargsConstructorClass.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@jsvarargs.Main.SubVarargsConstructorClass) (rtt.canon $jsvarargs.Main.SubVarargsConstructorClass.vtable)))

 ;;; Code for jsvarargs.Main.AFunction [vtable.init]
 (global.set $jsvarargs.Main.AFunction.vtable (struct.new_with_rtt $jsvarargs.Main.AFunction.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@jsvarargs.Main.AFunction) (ref.func $m_f1__int__arrayOf_java_lang_Object__java_lang_Object@jsvarargs.Main.AFunction) (rtt.canon $jsvarargs.Main.AFunction.vtable)))

 ;;; Code for jsvarargs.Main.SubMain [vtable.init]
 (global.set $jsvarargs.Main.SubMain.vtable (struct.new_with_rtt $jsvarargs.Main.SubMain.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@jsvarargs.Main.SubMain) (ref.func $m_f3__int__arrayOf_int__int@jsvarargs.Main.SubMain) (ref.func $m_f4__arrayOf_int__int@jsvarargs.Main) (ref.func $m_testStaticMethodNotFirst__void@jsvarargs.Main) (ref.func $m_testStaticMethodFirst__void@jsvarargs.Main) (ref.func $m_testInstanceMethodNotFirst__void@jsvarargs.Main) (ref.func $m_testInstanceMethodFirst__void@jsvarargs.Main) (ref.func $m_testJsFunction__void@jsvarargs.Main) (ref.func $m_testSideEffect__void@jsvarargs.Main) (ref.func $m_testNullJsVarargs__void@jsvarargs.Main) (ref.func $m_testGenericJsFunctionWithVarags__void@jsvarargs.Main) (rtt.canon $jsvarargs.Main.SubMain.vtable)))

 ;;; Code for jsvarargs.QualifiedSuperMethodCall [vtable.init]
 (global.set $jsvarargs.QualifiedSuperMethodCall.vtable (struct.new_with_rtt $jsvarargs.QualifiedSuperMethodCall.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@jsvarargs.QualifiedSuperMethodCall) (ref.func $m_f3__int__arrayOf_int__int@jsvarargs.Main) (ref.func $m_f4__arrayOf_int__int@jsvarargs.Main) (ref.func $m_testStaticMethodNotFirst__void@jsvarargs.Main) (ref.func $m_testStaticMethodFirst__void@jsvarargs.Main) (ref.func $m_testInstanceMethodNotFirst__void@jsvarargs.Main) (ref.func $m_testInstanceMethodFirst__void@jsvarargs.Main) (ref.func $m_testJsFunction__void@jsvarargs.Main) (ref.func $m_testSideEffect__void@jsvarargs.Main) (ref.func $m_testNullJsVarargs__void@jsvarargs.Main) (ref.func $m_testGenericJsFunctionWithVarags__void@jsvarargs.Main) (rtt.canon $jsvarargs.QualifiedSuperMethodCall.vtable)))

 ;;; Code for jsvarargs.QualifiedSuperMethodCall.InnerClass [vtable.init]
 (global.set $jsvarargs.QualifiedSuperMethodCall.InnerClass.vtable (struct.new_with_rtt $jsvarargs.QualifiedSuperMethodCall.InnerClass.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@jsvarargs.QualifiedSuperMethodCall.InnerClass) (ref.func $m_test__void@jsvarargs.QualifiedSuperMethodCall.InnerClass) (rtt.canon $jsvarargs.QualifiedSuperMethodCall.InnerClass.vtable)))
