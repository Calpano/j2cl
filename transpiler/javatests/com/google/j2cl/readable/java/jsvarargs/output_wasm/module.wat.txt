;;; Code for jsvarargs.Main

;;; CLASS  Main

(type $jsvarargs.Main (struct
 (field $field@jsvarargs.Main (mut i32))
))

;;; Main(int f)
(func $<init><int>:void@jsvarargs.Main
 (param $this (ref null $jsvarargs.Main))
 (param $f i32)
 (result (ref null $jsvarargs.Main))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
   ;; (Main.this.field = f);
   (struct.set $jsvarargs.Main $field@jsvarargs.Main  (ref.null $jsvarargs.Main) (local.get $f)))
 )
 (local.get $this)
)

;;; int Main.f1(int multiplier, int... numbers)
(func $f1<int|int<>>:int@jsvarargs.Main
 (param $multiplier i32)
 (param $numbers (ref null $java.lang.Object))
 (result i32)
 (local $return.value i32)
 (block $return.label
  (block
   ;; return ((<expr> + numbers[0]) + multiplier);
   (local.set $return.value (i32.add (i32.add (i32.const 0) (i32.const 0)) (local.get $multiplier)))
   (br $return.label))
 )
 (local.get $return.value)
)

;;; int Main.f2(int... numbers)
(func $f2<int<>>:int@jsvarargs.Main
 (param $numbers (ref null $java.lang.Object))
 (result i32)
 (local $return.value i32)
 (block $return.label
  (block
   ;; return (<expr> + numbers[0]);
   (local.set $return.value (i32.add (i32.const 0) (i32.const 0)))
   (br $return.label))
 )
 (local.get $return.value)
)

;;; int Main.f3(int m, int... numbers)
(func $f3<int|int<>>:int@jsvarargs.Main
 (param $this (ref null $java.lang.Object))
 (param $m i32)
 (param $numbers (ref null $java.lang.Object))
 (result i32)
 (local $return.value i32)
 (block $return.label
  (block
   ;; return ((Main.this.field + m) + numbers[1]);
   (local.set $return.value (i32.add (i32.add (struct.get $jsvarargs.Main $field@jsvarargs.Main  (ref.null $jsvarargs.Main)) (local.get $m)) (i32.const 0)))
   (br $return.label))
 )
 (local.get $return.value)
)

;;; int Main.f4(int... numbers)
(func $f4<int<>>:int@jsvarargs.Main
 (param $this (ref null $java.lang.Object))
 (param $numbers (ref null $java.lang.Object))
 (result i32)
 (local $return.value i32)
 (block $return.label
  (block
   ;; return (Main.this.field + numbers[1]);
   (local.set $return.value (i32.add (struct.get $jsvarargs.Main $field@jsvarargs.Main  (ref.null $jsvarargs.Main)) (i32.const 0)))
   (br $return.label))
 )
 (local.get $return.value)
)

;;; T Main.generics(T... elements)
(func $generics<java.lang.Object<>>:java.lang.Object@jsvarargs.Main
 (param $elements (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; return elements[0];
   (local.set $return.value (ref.null $java.lang.Object))
   (br $return.label))
 )
 (local.get $return.value)
)

;;; Main Main.parameterizedType(List<Main>... elements)
(func $parameterizedType<java.util.List<>>:jsvarargs.Main@jsvarargs.Main
 (param $elements (ref null $java.lang.Object))
 (result (ref null $jsvarargs.Main))
 (local $return.value (ref null $jsvarargs.Main))
 (block $return.label
  (block
   ;; return ((Main) elements[0].get(0));
   (local.set $return.value (ref.cast $java.lang.Object $jsvarargs.Main (ref.null $jsvarargs.Main) (global.get $jsvarargs.Main.rtt)))
   (br $return.label))
 )
 (local.get $return.value)
)

;;; T Main.parameterizedByT(List<T>... elements)
(func $parameterizedByT<java.util.List<>>:java.lang.Object@jsvarargs.Main
 (param $elements (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; return elements[0].get(0);
   (local.set $return.value (ref.null $java.lang.Object))
   (br $return.label))
 )
 (local.get $return.value)
)

;;; void Main.testStaticMethodNotFirst()
(func $testStaticMethodNotFirst<>:void@jsvarargs.Main
 (param $this (ref null $java.lang.Object))
 (local $ints (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; jsvarargs.Main.f1(1,[1,2]);
   (call $f1<int|int<>>:int@jsvarargs.Main (i32.const 1)(ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.f1(1,[1,2]);
   (call $f1<int|int<>>:int@jsvarargs.Main (i32.const 1)(ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.f1(1,[]);
   (call $f1<int|int<>>:int@jsvarargs.Main (i32.const 1)(ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.f1(1,[]);
   (call $f1<int|int<>>:int@jsvarargs.Main (i32.const 1)(ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.f1(1,new int[] {1,2});
   (call $f1<int|int<>>:int@jsvarargs.Main (i32.const 1)(ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.f1(1,new int[] {1,2});
   (call $f1<int|int<>>:int@jsvarargs.Main (i32.const 1)(ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.f1(1,new int[] {});
   (call $f1<int|int<>>:int@jsvarargs.Main (i32.const 1)(ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.f1(1,new int[] {});
   (call $f1<int|int<>>:int@jsvarargs.Main (i32.const 1)(ref.null $java.lang.Object))
   drop
   ;; int[] ints = new int[] {1,2};
   (local.set $ints (ref.null $java.lang.Object))
   
   ;; jsvarargs.Main.f1(1,ints);
   (call $f1<int|int<>>:int@jsvarargs.Main (i32.const 1)(local.get $ints))
   drop
   ;; jsvarargs.Main.f1(1,ints);
   (call $f1<int|int<>>:int@jsvarargs.Main (i32.const 1)(local.get $ints))
   drop
   ;; jsvarargs.Main.f1(1,null);
   (call $f1<int|int<>>:int@jsvarargs.Main (i32.const 1)(ref.null $java.lang.Object))
   drop
  )
 )
)

;;; void Main.testStaticMethodFirst()
(func $testStaticMethodFirst<>:void@jsvarargs.Main
 (param $this (ref null $java.lang.Object))
 (local $ints (ref null $java.lang.Object))
 (local $integers (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; jsvarargs.Main.f2([1,2]);
   (call $f2<int<>>:int@jsvarargs.Main (ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.generics([1,2]);
   (call $generics<java.lang.Object<>>:java.lang.Object@jsvarargs.Main (ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.f2([1,2]);
   (call $f2<int<>>:int@jsvarargs.Main (ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.generics([1,2]);
   (call $generics<java.lang.Object<>>:java.lang.Object@jsvarargs.Main (ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.f2([]);
   (call $f2<int<>>:int@jsvarargs.Main (ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.generics([]);
   (call $generics<java.lang.Object<>>:java.lang.Object@jsvarargs.Main (ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.f2([]);
   (call $f2<int<>>:int@jsvarargs.Main (ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.generics([]);
   (call $generics<java.lang.Object<>>:java.lang.Object@jsvarargs.Main (ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.generics([]);
   (call $generics<java.lang.Object<>>:java.lang.Object@jsvarargs.Main (ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.f2(new int[] {1,2});
   (call $f2<int<>>:int@jsvarargs.Main (ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.f2(new int[] {1,2});
   (call $f2<int<>>:int@jsvarargs.Main (ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.generics([new int[] {1,2}]);
   (call $generics<java.lang.Object<>>:java.lang.Object@jsvarargs.Main (ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.generics(new Integer[] {1,2});
   (call $generics<java.lang.Object<>>:java.lang.Object@jsvarargs.Main (ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.f2(new int[] {});
   (call $f2<int<>>:int@jsvarargs.Main (ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.f2(new int[] {});
   (call $f2<int<>>:int@jsvarargs.Main (ref.null $java.lang.Object))
   drop
   ;; jsvarargs.Main.generics([new int[] {}]);
   (call $generics<java.lang.Object<>>:java.lang.Object@jsvarargs.Main (ref.null $java.lang.Object))
   drop
   ;; int[] ints = new int[] {1,2};
   (local.set $ints (ref.null $java.lang.Object))
   
   ;; Integer[] integers = new Integer[] {1,2};
   (local.set $integers (ref.null $java.lang.Object))
   
   ;; jsvarargs.Main.f2(ints);
   (call $f2<int<>>:int@jsvarargs.Main (local.get $ints))
   drop
   ;; jsvarargs.Main.f2(ints);
   (call $f2<int<>>:int@jsvarargs.Main (local.get $ints))
   drop
   ;; jsvarargs.Main.generics(integers);
   (call $generics<java.lang.Object<>>:java.lang.Object@jsvarargs.Main (local.get $integers))
   drop
  )
 )
)

;;; void Main.testInstanceMethodNotFirst()
(func $testInstanceMethodNotFirst<>:void@jsvarargs.Main
 (param $this (ref null $java.lang.Object))
 (local $m (ref null $jsvarargs.Main))
 (local $ints (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; Main m = new Main.<init>(1);
   (local.set $m (call $<init><int>:void@jsvarargs.Main (struct.new_default_with_rtt $jsvarargs.Main (global.get $jsvarargs.Main.rtt)) (i32.const 1)))
   
   ;; m.f3(1,[1,2]);
   (i32.const 0)
   drop
   ;; m.f3(1,[]);
   (i32.const 0)
   drop
   ;; m.f3(1,new int[] {1,2});
   (i32.const 0)
   drop
   ;; m.f3(1,new int[] {});
   (i32.const 0)
   drop
   ;; int[] ints = new int[] {1,2};
   (local.set $ints (ref.null $java.lang.Object))
   
   ;; m.f3(1,ints);
   (i32.const 0)
   drop
  )
 )
)

;;; void Main.testInstanceMethodFirst()
(func $testInstanceMethodFirst<>:void@jsvarargs.Main
 (param $this (ref null $java.lang.Object))
 (local $m (ref null $jsvarargs.Main))
 (local $ints (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; Main m = new Main.<init>(1);
   (local.set $m (call $<init><int>:void@jsvarargs.Main (struct.new_default_with_rtt $jsvarargs.Main (global.get $jsvarargs.Main.rtt)) (i32.const 1)))
   
   ;; m.f4([1,2]);
   (i32.const 0)
   drop
   ;; m.f4([]);
   (i32.const 0)
   drop
   ;; m.f4(new int[] {1,2});
   (i32.const 0)
   drop
   ;; m.f4(new int[] {});
   (i32.const 0)
   drop
   ;; int[] ints = new int[] {1,2};
   (local.set $ints (ref.null $java.lang.Object))
   
   ;; m.f4(ints);
   (i32.const 0)
   drop
  )
 )
)

;;; void Main.testJsFunction()
(func $testJsFunction<>:void@jsvarargs.Main
 (param $this (ref null $java.lang.Object))
 (local $a (ref null $jsvarargs.Main.AFunction))
 (local $o1 (ref null $java.lang.Object))
 (local $o2 (ref null $java.lang.Object))
 (local $os (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; AFunction a = new AFunction.<init>();
   (local.set $a (call $<init><>:void@jsvarargs.Main.AFunction (struct.new_default_with_rtt $jsvarargs.Main.AFunction (global.get $jsvarargs.Main.AFunction.rtt)) ))
   
   ;; Object o1 = new Object.<init>();
   (local.set $o1 (call $<init><>:void@java.lang.Object (struct.new_default_with_rtt $java.lang.Object (global.get $java.lang.Object.rtt)) ))
   
   ;; Object o2 = new Object.<init>();
   (local.set $o2 (call $<init><>:void@java.lang.Object (struct.new_default_with_rtt $java.lang.Object (global.get $java.lang.Object.rtt)) ))
   
   ;; a.f1(0,[o1,o2]);
   (ref.null $java.lang.Object)
   drop
   ;; a.f1(0,[]);
   (ref.null $java.lang.Object)
   drop
   ;; a.f1(0,new Object[] {o1,o2});
   (ref.null $java.lang.Object)
   drop
   ;; a.f1(0,new Object[] {});
   (ref.null $java.lang.Object)
   drop
   ;; Object[] os = new Object[] {o1,o2};
   (local.set $os (ref.null $java.lang.Object))
   
   ;; a.f1(0,os);
   (ref.null $java.lang.Object)
   drop
  )
 )
)

;;; void Main.testSideEffect()
(func $testSideEffect<>:void@jsvarargs.Main
 (param $this (ref null $java.lang.Object))
 (local $ints (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; int[] ints = new int[] {1,2};
   (local.set $ints (ref.null $java.lang.Object))
   
   ;; new Main.<init>(1).f3(1,ints);
   (i32.const 0)
   drop
  )
 )
)

;;; void Main.testNullJsVarargs()
(func $testNullJsVarargs<>:void@jsvarargs.Main
 (param $this (ref null $java.lang.Object))
 (local $ints (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; int[] ints = null;
   (local.set $ints (ref.null $java.lang.Object))
   
   ;; jsvarargs.Main.f2(ints);
   (call $f2<int<>>:int@jsvarargs.Main (local.get $ints))
   drop
  )
 )
)

;;; void Main.testGenericJsFunctionWithVarags()
(func $testGenericJsFunctionWithVarags<>:void@jsvarargs.Main
 (param $this (ref null $java.lang.Object))
 (local $function (ref null $jsvarargs.Main.GenericFunction))
 (local $n (ref null $java.lang.Object))
 (local $param (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; GenericFunction<U> function = function (U n,U[] param){
   (local.set $function (ref.null $jsvarargs.Main.GenericFunction))
   
  )
 )
)

;;; CLASS  NativeObject

(type $jsvarargs.Main.NativeObject (struct
))

;;; NativeObject(Object... pars)
(func $<init><java.lang.Object<>>:void@jsvarargs.Main.NativeObject
 (param $this (ref null $jsvarargs.Main.NativeObject))
 (param $pars (ref null $java.lang.Object))
 (result (ref null $jsvarargs.Main.NativeObject))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; CLASS  SubVarargsConstructorClass

(type $jsvarargs.Main.SubVarargsConstructorClass (struct
))

;;; SubVarargsConstructorClass(int i, Object... args)
(func $<init><int|java.lang.Object<>>:void@jsvarargs.Main.SubVarargsConstructorClass
 (param $this (ref null $jsvarargs.Main.SubVarargsConstructorClass))
 (param $i i32)
 (param $args (ref null $java.lang.Object))
 (result (ref null $jsvarargs.Main.SubVarargsConstructorClass))
 (block $return.label
  (block
   ;; NativeObject.this.NativeObject.<init>(args);
   
  )
 )
 (local.get $this)
)

;;; INTERFACE  Function

(type $jsvarargs.Main.Function (struct
))

;;; CLASS  AbstractMethodWithVarargs

(type $jsvarargs.Main.AbstractMethodWithVarargs (struct
))

;;; AbstractMethodWithVarargs()
(func $<init><>:void@jsvarargs.Main.AbstractMethodWithVarargs
 (param $this (ref null $jsvarargs.Main.AbstractMethodWithVarargs))
 (result (ref null $jsvarargs.Main.AbstractMethodWithVarargs))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; INTERFACE  StaticInterfaceMethodWithVarargs

(type $jsvarargs.Main.StaticInterfaceMethodWithVarargs (struct
))

;;; void StaticInterfaceMethodWithVarargs.staticMethod(int... args)
(func $staticMethod<int<>>:void@jsvarargs.Main.StaticInterfaceMethodWithVarargs
 (param $args (ref null $java.lang.Object))
 (block $return.label
  (block
  )
 )
)

;;; CLASS  AFunction

(type $jsvarargs.Main.AFunction (struct
))

;;; AFunction()
(func $<init><>:void@jsvarargs.Main.AFunction
 (param $this (ref null $jsvarargs.Main.AFunction))
 (result (ref null $jsvarargs.Main.AFunction))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; Object AFunction.f1(int i, Object... args)
(func $f1<int|java.lang.Object<>>:java.lang.Object@jsvarargs.Main.AFunction
 (param $this (ref null $java.lang.Object))
 (param $i i32)
 (param $args (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; return args[i];
   (local.set $return.value (ref.null $java.lang.Object))
   (br $return.label))
 )
 (local.get $return.value)
)

;;; CLASS  SubMain

(type $jsvarargs.Main.SubMain (struct
 (field $field@jsvarargs.Main (mut i32))
))

;;; SubMain()
(func $<init><>:void@jsvarargs.Main.SubMain
 (param $this (ref null $jsvarargs.Main.SubMain))
 (result (ref null $jsvarargs.Main.SubMain))
 (block $return.label
  (block
   ;; Main.this.Main.<init>(10);
   
  )
 )
 (local.get $this)
)

;;; int SubMain.f3(int m, int... numbers)
(func $f3<int|int<>>:int@jsvarargs.Main.SubMain
 (param $this (ref null $java.lang.Object))
 (param $m i32)
 (param $numbers (ref null $java.lang.Object))
 (result i32)
 (local $return.value i32)
 (local $a i32)
 (local $ints (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; int a = super.f3(1,[1,2]);
   (local.set $a (i32.const 0))
   
   ;; (a = (a + super.f3(1,[])));
   (local.set $a (i32.add (local.get $a) (i32.const 0)))
   ;; (a = (a + super.f3(1,new int[] {1,2})));
   (local.set $a (i32.add (local.get $a) (i32.const 0)))
   ;; (a = (a + super.f3(1,new int[] {})));
   (local.set $a (i32.add (local.get $a) (i32.const 0)))
   ;; int[] ints = new int[] {1,2};
   (local.set $ints (ref.null $java.lang.Object))
   
   ;; (a = (a + super.f3(1,ints)));
   (local.set $a (i32.add (local.get $a) (i32.const 0)))
   ;; return a;
   (local.set $return.value (local.get $a))
   (br $return.label))
 )
 (local.get $return.value)
)

;;; INTERFACE  GenericFunction

(type $jsvarargs.Main.GenericFunction (struct
))
;;; Code for jsvarargs.QualifiedSuperMethodCall

;;; CLASS  QualifiedSuperMethodCall

(type $jsvarargs.QualifiedSuperMethodCall (struct
 (field $field@jsvarargs.Main (mut i32))
))

;;; QualifiedSuperMethodCall()
(func $<init><>:void@jsvarargs.QualifiedSuperMethodCall
 (param $this (ref null $jsvarargs.QualifiedSuperMethodCall))
 (result (ref null $jsvarargs.QualifiedSuperMethodCall))
 (block $return.label
  (block
   ;; Main.this.Main.<init>(0);
   
  )
 )
 (local.get $this)
)

;;; CLASS  InnerClass

(type $jsvarargs.QualifiedSuperMethodCall.InnerClass (struct
 (field $this@jsvarargs.QualifiedSuperMethodCall.InnerClass (mut (ref null $jsvarargs.QualifiedSuperMethodCall)))
))

;;; InnerClass()
(func $<init><>:void@jsvarargs.QualifiedSuperMethodCall.InnerClass
 (param $this (ref null $jsvarargs.QualifiedSuperMethodCall.InnerClass))
 (result (ref null $jsvarargs.QualifiedSuperMethodCall.InnerClass))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; void InnerClass.test()
(func $test<>:void@jsvarargs.QualifiedSuperMethodCall.InnerClass
 (param $this (ref null $java.lang.Object))
 (local $ints (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; InnerClass.this.this.f3(1,[1,2]);
   (i32.const 0)
   drop
   ;; InnerClass.this.this.f3(1,[]);
   (i32.const 0)
   drop
   ;; InnerClass.this.this.f3(1,new int[] {1,2});
   (i32.const 0)
   drop
   ;; InnerClass.this.this.f3(1,new int[] {});
   (i32.const 0)
   drop
   ;; int[] ints = new int[] {1,2};
   (local.set $ints (ref.null $java.lang.Object))
   
   ;; InnerClass.this.this.f3(1,ints);
   (i32.const 0)
   drop
  )
 )
)

