package nestedinstanceinnerclass

open class OuterClass {
 constructor(): super()

 open fun test() {
  nestedinstanceinnerclass.`OuterClass$InnerClass$InnerInnerClass`(nestedinstanceinnerclass.`OuterClass$InnerClass`(nestedinstanceinnerclass.OuterClass()))
 }
}

open class `OuterClass$InnerClass$InnerInnerClass` {
 @JvmField val `this`: nestedinstanceinnerclass.`OuterClass$InnerClass`?

 constructor(`$outer_this`: nestedinstanceinnerclass.`OuterClass$InnerClass`?): super() {
  this.`this` = `$outer_this`
 }

 @JvmField var x: nestedinstanceinnerclass.`OuterClass$InnerClass`? = this.`this`

 @JvmField var y: nestedinstanceinnerclass.OuterClass? = this.`this`!!.`this`
}

open class `OuterClass$InnerClass` {
 @JvmField val `this`: nestedinstanceinnerclass.OuterClass?

 constructor(`$outer_this`: nestedinstanceinnerclass.OuterClass?): super() {
  this.`this` = `$outer_this`
 }
}
