// Generated from "compiletimeconstant/CompileTimeConstant.java"
@file:OptIn(ExperimentalObjCName::class)

package compiletimeconstant

import javaemul.lang.*
import java.lang.Class
import kotlin.Any
import kotlin.Boolean
import kotlin.Char
import kotlin.Int
import kotlin.Long
import kotlin.OptIn
import kotlin.String
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.javaObjectType
import kotlin.native.ObjCName

@ObjCName("CompiletimeconstantCompileTimeConstant", exact = true)
open class CompileTimeConstant<T> {
 @JvmField val A2: Int = 10

 @JvmField val B2: Int = 20

 @JvmField val C2: Int = 200

 @JvmField val D2: String = "Tur\"tle"

 @JvmField val E2: String = "Do\"ve"

 @JvmField val F2: String = "Tur\"tleDo\"ve"

 @JvmField val G2: Long = 10000L

 @JvmField val H2: Char = 'A'

 @JvmField val I2: Boolean = true

 init {
  val b: Boolean = this.I2
  val s: String? = "" + CompileTimeConstant.G + CompileTimeConstant.F
  val l: String? = CompileTimeConstant.L
  val m: String? = CompileTimeConstant.M
  val n: String? = CompileTimeConstant.N
  val c: Class<*>? = CompileTimeConstant.classLiteral
 }

 companion object {
  @ObjCName("OBJ", exact = false)
  @JvmField val OBJ: Any? = null

  @ObjCName("A", exact = false)
  const val A: Int = 10

  @ObjCName("B", exact = false)
  const val B: Int = 20

  @ObjCName("C", exact = false)
  const val C: Int = 200

  @ObjCName("D", exact = false)
  const val D: String = "Tur\"tle"

  @ObjCName("E", exact = false)
  const val E: String = "Do\'ve"

  @ObjCName("F", exact = false)
  const val F: String = "Tur\"tleDo\'ve"

  @ObjCName("J", exact = false)
  const val J: String = "Tur\"tleDo\'veTur\"tleDo\'ve"

  @ObjCName("K", exact = false)
  @JvmField val K: String? = null

  @ObjCName("L", exact = false)
  const val L: String = "ThisIsALongString"

  @ObjCName("M", exact = false)
  const val M: String = "ThisIsALongStringAlso"

  @ObjCName("N", exact = false)
  const val N: String = "ThisIsALongStringAlsoButLonger"

  @ObjCName("G", exact = false)
  const val G: Long = 10000L

  @ObjCName("H", exact = false)
  const val H: Char = 'A'

  @ObjCName("I", exact = false)
  const val I: Boolean = true

  @ObjCName("classLiteral", exact = false)
  @JvmField val classLiteral: Class<*>? = CompileTimeConstant::class.javaObjectType
 }
}
