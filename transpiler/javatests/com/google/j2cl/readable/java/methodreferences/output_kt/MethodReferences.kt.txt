// Generated from "methodreferences/MethodReferences.java"
package methodreferences

import javaemul.lang.*
import kotlin.jvm.*

open class MethodReferences<T> {
 open fun isA(): kotlin.Boolean? {
  return kotlin.Boolean.valueOf(true)
 }

 open fun self(): kotlin.Any? {
  return this
 }

 open fun sameAs(n: kotlin.Number?): kotlin.Boolean? {
  return kotlin.Boolean.valueOf(false)
 }

 open fun main() {
  var objectFactory: methodreferences.MethodReferences.Producer<kotlin.Any?>? = methodreferences.MethodReferences.Producer<kotlin.Any?> {

   return@Producer kotlin.Any()
  }
  objectFactory = methodreferences.MethodReferences.Producer<kotlin.Any?> {

   return@Producer methodreferences.MethodReferences.m()
  }
  objectFactory = kotlin.run {
   val ______q: methodreferences.MethodReferences<T> = methodreferences.MethodReferences<T>()
   methodreferences.MethodReferences.Producer<kotlin.Any?> {

    return@Producer ______q.isA()
   }
  }
  val biFunction: methodreferences.MethodReferences.BiFunction<methodreferences.MethodReferences<T>?, kotlin.Number?, kotlin.Boolean?>? = methodreferences.MethodReferences.BiFunction<methodreferences.MethodReferences<T>?, kotlin.Number?, kotlin.Boolean?> { arg0: methodreferences.MethodReferences<T>?, arg1: kotlin.Number? ->

   return@BiFunction arg0!!.sameAs(arg1)
  }
  val functionWithParameters: methodreferences.MethodReferences.Function<kotlin.Number?, kotlin.Boolean?>? = methodreferences.MethodReferences.Function<kotlin.Number?, kotlin.Boolean?> { arg0_1: kotlin.Number? ->

   return@Function this.sameAs(arg0_1)
  }
  val objectPredicate: methodreferences.MethodReferences.Predicate<methodreferences.MethodReferences<T>?>? = methodreferences.MethodReferences.Predicate<methodreferences.MethodReferences<T>?> { arg0_2: methodreferences.MethodReferences<T>? ->

   return@Predicate arg0_2!!.isA()!!.booleanValue()
  }
  val objectCapturingOuterProducer: methodreferences.MethodReferences.Producer<methodreferences.MethodReferences<T>.ObjectCapturingOuter?>? = methodreferences.MethodReferences.Producer<methodreferences.MethodReferences<T>.ObjectCapturingOuter?> {

   return@Producer ObjectCapturingOuter()
  }
  val arrayProducer: methodreferences.MethodReferences.ArrayProducer<kotlin.Any?>? = methodreferences.MethodReferences.ArrayProducer<kotlin.Any?> { arg0_3: kotlin.Int ->

   return@ArrayProducer kotlin.arrayOfNulls<kotlin.Double>(arg0_3) as kotlin.Array<kotlin.Any?>?
  }
  objectFactory = kotlin.run {
   val ______q_1: methodreferences.MethodReferences<kotlin.Any?> = methodreferences.MethodReferences<kotlin.Any?>()
   methodreferences.MethodReferences.Producer<kotlin.Any?> {

    return@Producer ______q_1.self()
   }
  }
  val function: methodreferences.MethodReferences.Function<methodreferences.MethodReferences<T>?, kotlin.Any?>? = methodreferences.MethodReferences.Function<methodreferences.MethodReferences<T>?, kotlin.Any?> { arg0_4: methodreferences.MethodReferences<T>? ->

   return@Function arg0_4!!.self()
  }
  val arrayFactory: methodreferences.MethodReferences.Function<kotlin.Int?, kotlin.Array<kotlin.Any?>?>? = methodreferences.MethodReferences.Function<kotlin.Int?, kotlin.Array<kotlin.Any?>?> { arg0_5: kotlin.Int? ->

   return@Function kotlin.arrayOfNulls<kotlin.Any>(arg0_5!!.toInt())
  }
  val superToStringProducer: methodreferences.MethodReferences.Producer<kotlin.String?>? = methodreferences.MethodReferences.Producer<kotlin.String?> {

   return@Producer this.toString()
  }
  var jsobjectFactory: methodreferences.MethodReferences.JsProducer<kotlin.Any?>? = methodreferences.MethodReferences.JsProducer<kotlin.Any?> {

   return@JsProducer kotlin.Any()
  }
  jsobjectFactory = methodreferences.MethodReferences.JsProducer<kotlin.Any?> {

   return@JsProducer methodreferences.MethodReferences.m()
  }
  jsobjectFactory = kotlin.run {
   val ______q_2: methodreferences.MethodReferences<kotlin.Any?> = methodreferences.MethodReferences<kotlin.Any?>()
   methodreferences.MethodReferences.JsProducer<kotlin.Any?> {

    return@JsProducer ______q_2.self()
   }
  }
  val jsfunction: methodreferences.MethodReferences.JsFunctionInterface<methodreferences.MethodReferences<T>?, kotlin.Any?>? = methodreferences.MethodReferences.JsFunctionInterface<methodreferences.MethodReferences<T>?, kotlin.Any?> { arg0_6: methodreferences.MethodReferences<T>? ->

   return@JsFunctionInterface arg0_6!!.self()
  }
  val jsarrayFactory: methodreferences.MethodReferences.JsFunctionInterface<kotlin.Int?, kotlin.Array<kotlin.Any?>?>? = methodreferences.MethodReferences.JsFunctionInterface<kotlin.Int?, kotlin.Array<kotlin.Any?>?> { arg0_7: kotlin.Int? ->

   return@JsFunctionInterface kotlin.arrayOfNulls<kotlin.Any>(arg0_7!!.toInt())
  }
  val jsSuperToStringProducer: methodreferences.MethodReferences.JsProducer<kotlin.String?>? = methodreferences.MethodReferences.JsProducer<kotlin.String?> {

   return@JsProducer this.toString()
  }
  val jsbiFunction: methodreferences.MethodReferences.JsBiFunction<methodreferences.MethodReferences<T>?, kotlin.Number?, kotlin.Boolean?>? = methodreferences.MethodReferences.JsBiFunction<methodreferences.MethodReferences<T>?, kotlin.Number?, kotlin.Boolean?> { arg0_8: methodreferences.MethodReferences<T>?, arg1_1: kotlin.Number? ->

   return@JsBiFunction arg0_8!!.sameAs(arg1_1)
  }
  val jsFunctionWithParameters: methodreferences.MethodReferences.JsFunctionInterface<kotlin.Number?, kotlin.Boolean?>? = methodreferences.MethodReferences.JsFunctionInterface<kotlin.Number?, kotlin.Boolean?> { arg0_9: kotlin.Number? ->

   return@JsFunctionInterface this.sameAs(arg0_9)
  }
 }

 companion object {
  @kotlin.jvm.JvmStatic
  fun m(): kotlin.Any? {
   return kotlin.Any()
  }

  @kotlin.jvm.JvmField var staticStringProducer: methodreferences.MethodReferences.Producer<kotlin.String?>? = kotlin.run {
   val ______q: kotlin.Any? = methodreferences.MethodReferences.m()
   methodreferences.MethodReferences.Producer<kotlin.String?> {

    return@Producer ______q!!.toString()
   }
  }
 }

 fun interface Producer<T> {
  fun produce(): T?
 }

 fun interface Predicate<T> {
  fun apply(parameter: T?): kotlin.Boolean
 }

 fun interface ArrayProducer<T> {
  fun produce(size: kotlin.Int): kotlin.Array<T?>?
 }

 open inner class ObjectCapturingOuter {
  open fun getMain(): methodreferences.MethodReferences<T>? {
   return this@MethodReferences
  }
 }

 fun interface Function<T, U> {
  fun apply(t: T?): U?
 }

 fun interface BiFunction<T, U, V> {
  fun apply(t: T?, u: U?): V?
 }

 fun interface JsProducer<T> {
  fun produce(): T?
 }

 fun interface JsFunctionInterface<T, U> {
  fun apply(t: T?): U?
 }

 fun interface JsBiFunction<T, U, V> {
  fun apply(t: T?, u: U?): V?
 }
}
