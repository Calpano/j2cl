;;; Code for functiontype.FunctionImpl [vtable]
(global $functiontype.FunctionImpl.vtable (mut (ref null $functiontype.FunctionImpl.vtable)) (ref.null $functiontype.FunctionImpl.vtable))

;;; Code for functiontype.Function [static fields]
(global $f_$initialized__functiontype_Function (mut i32) (i32.const 0))

;;; Code for functiontype.FunctionImpl [static fields]
(global $f_$initialized__functiontype_FunctionImpl (mut i32) (i32.const 0))

;;; Code for functiontype.Function [INTERFACE]
(type $functiontype.Function.vtable (struct
))

;;; void Function.$clinit()
(func $$clinit__void@functiontype.Function
 (block $return.label
  (block
   ;; if (functiontype.Function.$initialized) return;
   (if (global.get $f_$initialized__functiontype_Function)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (functiontype.Function.$initialized = true);
   (global.set $f_$initialized__functiontype_Function (i32.const 1))
  )
 )
)

;;; Class<?> Function.getClass()
(func $m_getClass__java_lang_Class@functiontype.Function
 (param $this (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getFunctiontype.Function();
   (local.set $return.value (call $$getFunctiontype.Function__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@functiontype.Function)

;;; Code for functiontype.FunctionImpl [CLASS]
(type $functiontype.FunctionImpl (struct
 (field $vtable (ref null $functiontype.FunctionImpl.vtable)) (field $itable (ref null $itable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $functiontype.FunctionImpl.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_test__functiontype_Function__void (mut (ref $function.$java.lang.Object__$void)))
))

;;; FunctionImpl()
(func $m_<init>__void@functiontype.FunctionImpl
 (param $this (ref null $functiontype.FunctionImpl))
 (result (ref null $functiontype.FunctionImpl))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void FunctionImpl.test(Function f)
(func $m_test__functiontype_Function__void@functiontype.FunctionImpl
 (param $this.untyped (ref null $java.lang.Object))
 (param $f (ref null $java.lang.Object))
 (local $this (ref null $functiontype.FunctionImpl))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $functiontype.FunctionImpl.rtt)))
 (block $return.label
  (block
  )
 )
)
(elem declare func $m_test__functiontype_Function__void@functiontype.FunctionImpl)

;;; void FunctionImpl.$clinit()
(func $$clinit__void@functiontype.FunctionImpl
 (block $return.label
  (block
   ;; if (functiontype.FunctionImpl.$initialized) return;
   (if (global.get $f_$initialized__functiontype_FunctionImpl)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (functiontype.FunctionImpl.$initialized = true);
   (global.set $f_$initialized__functiontype_FunctionImpl (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> FunctionImpl.getClass()
(func $m_getClass__java_lang_Class@functiontype.FunctionImpl
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $functiontype.FunctionImpl))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $functiontype.FunctionImpl.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getFunctiontype.FunctionImpl();
   (local.set $return.value (call $$getFunctiontype.FunctionImpl__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@functiontype.FunctionImpl)

 ;;; Code for functiontype.FunctionImpl [vtable.init]
 (global.set $functiontype.FunctionImpl.vtable
  (struct.new_with_rtt $functiontype.FunctionImpl.vtable
   (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object)
   (ref.func $m_hashCode__int@java.lang.Object)
   (ref.func $m_toString__java_lang_String@java.lang.Object)
   (ref.func $m_getClass__java_lang_Class@functiontype.FunctionImpl)
   (ref.func $m_test__functiontype_Function__void@functiontype.FunctionImpl)
   (rtt.canon $functiontype.FunctionImpl.vtable)
  )
 )

 ;;; Code for functiontype.FunctionImpl [itable.init]
 (global.set $functiontype.FunctionImpl.itable (array.new_default_with_rtt $itable (i32.const 1) (rtt.canon $itable)))
 (array.set $itable (global.get $functiontype.FunctionImpl.itable) (i32.const 0)
 (struct.new_with_rtt $functiontype.Function.vtable
  (rtt.canon $functiontype.Function.vtable)
 ))
