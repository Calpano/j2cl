package collisions

open class goog {}

open class Blah {
 companion object {
  @JvmStatic
  internal fun m() {}

  @JvmStatic
  internal fun getN(): Double {}
 }
}

open class foo {}

open class bar {
 init {
  val foo: Int
  val bar: Int
  val goog: Int
  val flip: Int
  val window: Int
  collisions.Blah.m()
  collisions.Blah.getN()
  collisions.Blah()
  collisions.goog()
  collisions.foo()
  val delete: Int = 1
  val undefined: Int = 3
 }
}

open class Other<T> {
 init {
  val T: Int = 3
  val o: collisions.Other<T>? = null as collisions.Other<T>?
 }

 internal open fun <T> m(): T {
  val T: Int = 5
  val o: collisions.Other<T>? = null as collisions.Other<T>?
  return null
 }
}

open class T<T: Number?> {
 internal open fun m(): T {
  return null
 }

 internal open fun n(): T {
  val t: T = collisions.T<T>().m()
  t.byteValue()
  return t
 }
}
