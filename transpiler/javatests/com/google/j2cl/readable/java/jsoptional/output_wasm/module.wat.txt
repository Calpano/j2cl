;;; Code for jsoptional.Main [vtable]
(global $jsoptional.Main.vtable (mut (ref null $jsoptional.Main.vtable)) (ref.null $jsoptional.Main.vtable))

;;; Code for jsoptional.Main.AFunction [vtable]
(global $jsoptional.Main.AFunction.vtable (mut (ref null $jsoptional.Main.AFunction.vtable)) (ref.null $jsoptional.Main.AFunction.vtable))

;;; Code for jsoptional.Main.TemplatedSubtype [vtable]
(global $jsoptional.Main.TemplatedSubtype.vtable (mut (ref null $jsoptional.Main.TemplatedSubtype.vtable)) (ref.null $jsoptional.Main.TemplatedSubtype.vtable))

;;; Code for jsoptional.Main.SpecializedSubtype [vtable]
(global $jsoptional.Main.SpecializedSubtype.vtable (mut (ref null $jsoptional.Main.SpecializedSubtype.vtable)) (ref.null $jsoptional.Main.SpecializedSubtype.vtable))

;;; Code for jsoptional.Main.NonJsTypeSubtype [vtable]
(global $jsoptional.Main.NonJsTypeSubtype.vtable (mut (ref null $jsoptional.Main.NonJsTypeSubtype.vtable)) (ref.null $jsoptional.Main.NonJsTypeSubtype.vtable))

;;; Code for jsoptional.Main [static fields]
(global $f_$initialized__jsoptional_Main (mut i32) (i32.const 0))

;;; Code for jsoptional.Main.Function [static fields]
(global $f_$initialized__jsoptional_Main_Function (mut i32) (i32.const 0))

;;; Code for jsoptional.Main.AFunction [static fields]
(global $f_$initialized__jsoptional_Main_AFunction (mut i32) (i32.const 0))

;;; Code for jsoptional.Main.I [static fields]
(global $f_$initialized__jsoptional_Main_I (mut i32) (i32.const 0))

;;; Code for jsoptional.Main.TemplatedSubtype [static fields]
(global $f_$initialized__jsoptional_Main_TemplatedSubtype (mut i32) (i32.const 0))

;;; Code for jsoptional.Main.SpecializedSubtype [static fields]
(global $f_$initialized__jsoptional_Main_SpecializedSubtype (mut i32) (i32.const 0))

;;; Code for jsoptional.Main.NonJsTypeSubtype [static fields]
(global $f_$initialized__jsoptional_Main_NonJsTypeSubtype (mut i32) (i32.const 0))

;;; Code for jsoptional.Main [CLASS]
(type $jsoptional.Main (struct
 (field $vtable (ref null $jsoptional.Main.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $f_f__jsoptional_Main (mut (ref null $java.lang.Object)))
))
(type $jsoptional.Main.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_method1__int__java_lang_Double__java_lang_Integer__void (mut (ref $function.$int__$java.lang.Double__$java.lang.Integer__$void)))
 (field $m_method2__java_lang_String__java_lang_Double__arrayOf_java_lang_Boolean__void (mut (ref $function.$java.lang.String__$java.lang.Double__$javaemul.internal.WasmArray.OfObject__$void)))
 (field $m_testFunction__jsoptional_Main_Function__void (mut (ref $function.$java.lang.Object__$void)))
 (field $m_testOptionalFunction__jsoptional_Main_Function__void (mut (ref $function.$java.lang.Object__$void)))
))

;;; void Main.method1(int i1, Double d, Integer i)
(func $m_method1__int__java_lang_Double__java_lang_Integer__void@jsoptional.Main
 (param $this.untyped (ref null $java.lang.Object))
 (param $i1 i32)
 (param $d (ref null $java.lang.Double))
 (param $i (ref null $java.lang.Integer))
 (local $this (ref null $jsoptional.Main))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsoptional.Main.rtt)))
 (block $return.label
  (block
  )
 )
)
(elem declare func $m_method1__int__java_lang_Double__java_lang_Integer__void@jsoptional.Main)

;;; void Main.method2(String s1, Double d, Boolean... i)
(func $m_method2__java_lang_String__java_lang_Double__arrayOf_java_lang_Boolean__void@jsoptional.Main
 (param $this.untyped (ref null $java.lang.Object))
 (param $s1 (ref null $java.lang.String))
 (param $d (ref null $java.lang.Double))
 (param $i (ref null $javaemul.internal.WasmArray.OfObject))
 (local $this (ref null $jsoptional.Main))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsoptional.Main.rtt)))
 (block $return.label
  (block
  )
 )
)
(elem declare func $m_method2__java_lang_String__java_lang_Double__arrayOf_java_lang_Boolean__void@jsoptional.Main)

;;; Main(String a)
(func $m_<init>__java_lang_String__void@jsoptional.Main
 (param $this (ref null $jsoptional.Main))
 (param $a (ref null $java.lang.String))
 (result (ref null $jsoptional.Main))
 (block $return.label
  (block
   ;; jsoptional.Main.$clinit();
   (call $$clinit__void@jsoptional.Main )
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
   ;; Main.this.$init();
   (call $$init__void_$p_jsoptional_Main@jsoptional.Main (local.get $this))
  )
 )
 (local.get $this)
)

;;; void Main.testFunction(Function f)
(func $m_testFunction__jsoptional_Main_Function__void@jsoptional.Main
 (param $this.untyped (ref null $java.lang.Object))
 (param $f (ref null $java.lang.Object))
 (local $this (ref null $jsoptional.Main))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsoptional.Main.rtt)))
 (block $return.label
  (block
  )
 )
)
(elem declare func $m_testFunction__jsoptional_Main_Function__void@jsoptional.Main)

;;; void Main.testOptionalFunction(Function f)
(func $m_testOptionalFunction__jsoptional_Main_Function__void@jsoptional.Main
 (param $this.untyped (ref null $java.lang.Object))
 (param $f (ref null $java.lang.Object))
 (local $this (ref null $jsoptional.Main))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsoptional.Main.rtt)))
 (block $return.label
  (block
  )
 )
)
(elem declare func $m_testOptionalFunction__jsoptional_Main_Function__void@jsoptional.Main)

;;; void Main.$init()
(func $$init__void_$p_jsoptional_Main@jsoptional.Main
 (param $this (ref null $jsoptional.Main))
 (local $s (ref null $java.lang.String))
 (local $varargs (ref null $javaemul.internal.WasmArray.OfObject))
 (block $return.label
  (block
   ;; (Main.this.f = function (String s,Object[] varargs){
   (struct.set $jsoptional.Main $f_f__jsoptional_Main(local.get $this) (ref.null $java.lang.Object))
  )
 )
)

;;; void Main.$clinit()
(func $$clinit__void@jsoptional.Main
 (block $return.label
  (block
   ;; if (jsoptional.Main.$initialized) return;
   (if (global.get $f_$initialized__jsoptional_Main)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsoptional.Main.$initialized = true);
   (global.set $f_$initialized__jsoptional_Main (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> Main.getClass()
(func $m_getClass__java_lang_Class@jsoptional.Main
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $jsoptional.Main))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsoptional.Main.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsoptional.Main();
   (local.set $return.value (call $$getJsoptional.Main__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsoptional.Main)

;;; Code for jsoptional.Main.Function [INTERFACE]

;;; void Function.$clinit()
(func $$clinit__void@jsoptional.Main.Function
 (block $return.label
  (block
   ;; if (jsoptional.Main.Function.$initialized) return;
   (if (global.get $f_$initialized__jsoptional_Main_Function)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsoptional.Main.Function.$initialized = true);
   (global.set $f_$initialized__jsoptional_Main_Function (i32.const 1))
  )
 )
)

;;; Class<?> Function.getClass()
(func $m_getClass__java_lang_Class@jsoptional.Main.Function
 (param $this (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsoptional.Main.Function();
   (local.set $return.value (call $$getJsoptional.Main.Function__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsoptional.Main.Function)

;;; Code for jsoptional.Main.AFunction [CLASS]
(type $jsoptional.Main.AFunction (struct
 (field $vtable (ref null $jsoptional.Main.AFunction.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $jsoptional.Main.AFunction.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_f1__java_lang_String__arrayOf_java_lang_Object__java_lang_Object (mut (ref $function.$java.lang.String__$javaemul.internal.WasmArray.OfObject__$java.lang.Object)))
))

;;; AFunction()
(func $m_<init>__void_$pp_jsoptional@jsoptional.Main.AFunction
 (param $this (ref null $jsoptional.Main.AFunction))
 (result (ref null $jsoptional.Main.AFunction))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; Object AFunction.f1(String i, Object... args)
(func $m_f1__java_lang_String__arrayOf_java_lang_Object__java_lang_Object@jsoptional.Main.AFunction
 (param $this.untyped (ref null $java.lang.Object))
 (param $i (ref null $java.lang.String))
 (param $args (ref null $javaemul.internal.WasmArray.OfObject))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (local $$cast_expression (ref null $java.lang.Object))
 (local $this (ref null $jsoptional.Main.AFunction))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsoptional.Main.AFunction.rtt)))
 (block $return.label
  (block
   ;; return (Object $cast_expression = args.elements[0],(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((Object) $cast_expression)));
   (local.set $return.value (block (result (ref null $java.lang.Object))
    
    (local.set $$cast_expression (array.get $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $args)) (i32.const 0)))
    (if (result (ref null $java.lang.Object)) (ref.is_null (local.get $$cast_expression)) (then (ref.null $java.lang.Object)) (else (ref.cast (local.get $$cast_expression) (global.get $java.lang.Object.rtt))))
   ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_f1__java_lang_String__arrayOf_java_lang_Object__java_lang_Object@jsoptional.Main.AFunction)

;;; void AFunction.$clinit()
(func $$clinit__void@jsoptional.Main.AFunction
 (block $return.label
  (block
   ;; if (jsoptional.Main.AFunction.$initialized) return;
   (if (global.get $f_$initialized__jsoptional_Main_AFunction)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsoptional.Main.AFunction.$initialized = true);
   (global.set $f_$initialized__jsoptional_Main_AFunction (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> AFunction.getClass()
(func $m_getClass__java_lang_Class@jsoptional.Main.AFunction
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $jsoptional.Main.AFunction))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsoptional.Main.AFunction.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsoptional.Main.AFunction();
   (local.set $return.value (call $$getJsoptional.Main.AFunction__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsoptional.Main.AFunction)

;;; Code for jsoptional.Main.I [INTERFACE]

;;; void I.$clinit()
(func $$clinit__void@jsoptional.Main.I
 (block $return.label
  (block
   ;; if (jsoptional.Main.I.$initialized) return;
   (if (global.get $f_$initialized__jsoptional_Main_I)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsoptional.Main.I.$initialized = true);
   (global.set $f_$initialized__jsoptional_Main_I (i32.const 1))
  )
 )
)

;;; Class<?> I.getClass()
(func $m_getClass__java_lang_Class@jsoptional.Main.I
 (param $this (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsoptional.Main.I();
   (local.set $return.value (call $$getJsoptional.Main.I__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsoptional.Main.I)

;;; Code for jsoptional.Main.TemplatedSubtype [CLASS]
(type $jsoptional.Main.TemplatedSubtype (struct
 (field $vtable (ref null $jsoptional.Main.TemplatedSubtype.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $jsoptional.Main.TemplatedSubtype.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_m__java_lang_String__java_lang_Object__void (mut (ref $function.$java.lang.String__$java.lang.Object__$void)))
 (field $m_m__java_lang_Object__java_lang_Object__void (mut (ref $function.$java.lang.Object__$java.lang.Object__$void)))
))

;;; TemplatedSubtype()
(func $m_<init>__void_$pp_jsoptional@jsoptional.Main.TemplatedSubtype
 (param $this (ref null $jsoptional.Main.TemplatedSubtype))
 (result (ref null $jsoptional.Main.TemplatedSubtype))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void TemplatedSubtype.m(T t, Object o)
(func $m_m__java_lang_String__java_lang_Object__void@jsoptional.Main.TemplatedSubtype
 (param $this.untyped (ref null $java.lang.Object))
 (param $t (ref null $java.lang.String))
 (param $o (ref null $java.lang.Object))
 (local $this (ref null $jsoptional.Main.TemplatedSubtype))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsoptional.Main.TemplatedSubtype.rtt)))
 (block $return.label
  (block
  )
 )
)
(elem declare func $m_m__java_lang_String__java_lang_Object__void@jsoptional.Main.TemplatedSubtype)

;;; void TemplatedSubtype.m(Object arg0, Object arg1)
(func $m_m__java_lang_Object__java_lang_Object__void@jsoptional.Main.TemplatedSubtype
 (param $this.untyped (ref null $java.lang.Object))
 (param $arg0 (ref null $java.lang.Object))
 (param $arg1 (ref null $java.lang.Object))
 (local $$cast_expression (ref null $java.lang.Object))
 (local $this (ref null $jsoptional.Main.TemplatedSubtype))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsoptional.Main.TemplatedSubtype.rtt)))
 (block $return.label
  (block
   ;; TemplatedSubtype.this.m((Object $cast_expression = arg0,(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((T) $cast_expression))),arg1);
   (call_ref (local.get $this)(block (result (ref null $java.lang.String))
    
    (local.set $$cast_expression (local.get $arg0))
    (if (result (ref null $java.lang.String)) (ref.is_null (local.get $$cast_expression)) (then (ref.null $java.lang.String)) (else (ref.cast (local.get $$cast_expression) (global.get $java.lang.String.rtt))))
   )(local.get $arg1)(struct.get $jsoptional.Main.TemplatedSubtype.vtable $m_m__java_lang_String__java_lang_Object__void (struct.get $jsoptional.Main.TemplatedSubtype $vtable(local.get $this))))
  )
 )
)
(elem declare func $m_m__java_lang_Object__java_lang_Object__void@jsoptional.Main.TemplatedSubtype)

;;; void TemplatedSubtype.$clinit()
(func $$clinit__void@jsoptional.Main.TemplatedSubtype
 (block $return.label
  (block
   ;; if (jsoptional.Main.TemplatedSubtype.$initialized) return;
   (if (global.get $f_$initialized__jsoptional_Main_TemplatedSubtype)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsoptional.Main.TemplatedSubtype.$initialized = true);
   (global.set $f_$initialized__jsoptional_Main_TemplatedSubtype (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> TemplatedSubtype.getClass()
(func $m_getClass__java_lang_Class@jsoptional.Main.TemplatedSubtype
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $jsoptional.Main.TemplatedSubtype))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsoptional.Main.TemplatedSubtype.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsoptional.Main.TemplatedSubtype();
   (local.set $return.value (call $$getJsoptional.Main.TemplatedSubtype__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsoptional.Main.TemplatedSubtype)

;;; Code for jsoptional.Main.SpecializedSubtype [CLASS]
(type $jsoptional.Main.SpecializedSubtype (struct
 (field $vtable (ref null $jsoptional.Main.SpecializedSubtype.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $$outer_this__jsoptional_Main_SpecializedSubtype (mut (ref null $jsoptional.Main)))
))
(type $jsoptional.Main.SpecializedSubtype.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_m__java_lang_String__java_lang_Object__void (mut (ref $function.$java.lang.String__$java.lang.Object__$void)))
 (field $m_m__java_lang_Object__java_lang_Object__void (mut (ref $function.$java.lang.Object__$java.lang.Object__$void)))
))

;;; SpecializedSubtype(Main $outer_this, Object a)
(func $m_<init>__jsoptional_Main__java_lang_Object__void@jsoptional.Main.SpecializedSubtype
 (param $this (ref null $jsoptional.Main.SpecializedSubtype))
 (param $$outer_this (ref null $jsoptional.Main))
 (param $a (ref null $java.lang.Object))
 (result (ref null $jsoptional.Main.SpecializedSubtype))
 (block $return.label
  (block
   ;; jsoptional.Main.SpecializedSubtype.$clinit();
   (call $$clinit__void@jsoptional.Main.SpecializedSubtype )
   ;; (SpecializedSubtype.this.this = $outer_this);
   (struct.set $jsoptional.Main.SpecializedSubtype $$outer_this__jsoptional_Main_SpecializedSubtype(local.get $this) (local.get $$outer_this))
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void SpecializedSubtype.m(String t, Object o)
(func $m_m__java_lang_String__java_lang_Object__void@jsoptional.Main.SpecializedSubtype
 (param $this.untyped (ref null $java.lang.Object))
 (param $t (ref null $java.lang.String))
 (param $o (ref null $java.lang.Object))
 (local $this (ref null $jsoptional.Main.SpecializedSubtype))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsoptional.Main.SpecializedSubtype.rtt)))
 (block $return.label
  (block
  )
 )
)
(elem declare func $m_m__java_lang_String__java_lang_Object__void@jsoptional.Main.SpecializedSubtype)

;;; void SpecializedSubtype.m(Object arg0, Object arg1)
(func $m_m__java_lang_Object__java_lang_Object__void@jsoptional.Main.SpecializedSubtype
 (param $this.untyped (ref null $java.lang.Object))
 (param $arg0 (ref null $java.lang.Object))
 (param $arg1 (ref null $java.lang.Object))
 (local $$cast_expression (ref null $java.lang.Object))
 (local $this (ref null $jsoptional.Main.SpecializedSubtype))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsoptional.Main.SpecializedSubtype.rtt)))
 (block $return.label
  (block
   ;; SpecializedSubtype.this.m((Object $cast_expression = arg0,(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((String) $cast_expression))),arg1);
   (call_ref (local.get $this)(block (result (ref null $java.lang.String))
    
    (local.set $$cast_expression (local.get $arg0))
    (if (result (ref null $java.lang.String)) (ref.is_null (local.get $$cast_expression)) (then (ref.null $java.lang.String)) (else (ref.cast (local.get $$cast_expression) (global.get $java.lang.String.rtt))))
   )(local.get $arg1)(struct.get $jsoptional.Main.SpecializedSubtype.vtable $m_m__java_lang_String__java_lang_Object__void (struct.get $jsoptional.Main.SpecializedSubtype $vtable(local.get $this))))
  )
 )
)
(elem declare func $m_m__java_lang_Object__java_lang_Object__void@jsoptional.Main.SpecializedSubtype)

;;; void SpecializedSubtype.$clinit()
(func $$clinit__void@jsoptional.Main.SpecializedSubtype
 (block $return.label
  (block
   ;; if (jsoptional.Main.SpecializedSubtype.$initialized) return;
   (if (global.get $f_$initialized__jsoptional_Main_SpecializedSubtype)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsoptional.Main.SpecializedSubtype.$initialized = true);
   (global.set $f_$initialized__jsoptional_Main_SpecializedSubtype (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> SpecializedSubtype.getClass()
(func $m_getClass__java_lang_Class@jsoptional.Main.SpecializedSubtype
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $jsoptional.Main.SpecializedSubtype))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsoptional.Main.SpecializedSubtype.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsoptional.Main.SpecializedSubtype();
   (local.set $return.value (call $$getJsoptional.Main.SpecializedSubtype__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsoptional.Main.SpecializedSubtype)

;;; Code for jsoptional.Main.NonJsTypeSubtype [CLASS]
(type $jsoptional.Main.NonJsTypeSubtype (struct
 (field $vtable (ref null $jsoptional.Main.NonJsTypeSubtype.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $jsoptional.Main.NonJsTypeSubtype.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_m__java_lang_String__java_lang_Object__void (mut (ref $function.$java.lang.String__$java.lang.Object__$void)))
 (field $m_m__java_lang_Object__java_lang_Object__void (mut (ref $function.$java.lang.Object__$java.lang.Object__$void)))
))

;;; NonJsTypeSubtype()
(func $m_<init>__void_$pp_jsoptional@jsoptional.Main.NonJsTypeSubtype
 (param $this (ref null $jsoptional.Main.NonJsTypeSubtype))
 (result (ref null $jsoptional.Main.NonJsTypeSubtype))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void NonJsTypeSubtype.m(String t, Object o)
(func $m_m__java_lang_String__java_lang_Object__void@jsoptional.Main.NonJsTypeSubtype
 (param $this.untyped (ref null $java.lang.Object))
 (param $t (ref null $java.lang.String))
 (param $o (ref null $java.lang.Object))
 (local $this (ref null $jsoptional.Main.NonJsTypeSubtype))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsoptional.Main.NonJsTypeSubtype.rtt)))
 (block $return.label
  (block
  )
 )
)
(elem declare func $m_m__java_lang_String__java_lang_Object__void@jsoptional.Main.NonJsTypeSubtype)

;;; void NonJsTypeSubtype.m(Object arg0, Object arg1)
(func $m_m__java_lang_Object__java_lang_Object__void@jsoptional.Main.NonJsTypeSubtype
 (param $this.untyped (ref null $java.lang.Object))
 (param $arg0 (ref null $java.lang.Object))
 (param $arg1 (ref null $java.lang.Object))
 (local $$cast_expression (ref null $java.lang.Object))
 (local $this (ref null $jsoptional.Main.NonJsTypeSubtype))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsoptional.Main.NonJsTypeSubtype.rtt)))
 (block $return.label
  (block
   ;; NonJsTypeSubtype.this.m((Object $cast_expression = arg0,(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((String) $cast_expression))),arg1);
   (call_ref (local.get $this)(block (result (ref null $java.lang.String))
    
    (local.set $$cast_expression (local.get $arg0))
    (if (result (ref null $java.lang.String)) (ref.is_null (local.get $$cast_expression)) (then (ref.null $java.lang.String)) (else (ref.cast (local.get $$cast_expression) (global.get $java.lang.String.rtt))))
   )(local.get $arg1)(struct.get $jsoptional.Main.NonJsTypeSubtype.vtable $m_m__java_lang_String__java_lang_Object__void (struct.get $jsoptional.Main.NonJsTypeSubtype $vtable(local.get $this))))
  )
 )
)
(elem declare func $m_m__java_lang_Object__java_lang_Object__void@jsoptional.Main.NonJsTypeSubtype)

;;; void NonJsTypeSubtype.$clinit()
(func $$clinit__void@jsoptional.Main.NonJsTypeSubtype
 (block $return.label
  (block
   ;; if (jsoptional.Main.NonJsTypeSubtype.$initialized) return;
   (if (global.get $f_$initialized__jsoptional_Main_NonJsTypeSubtype)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jsoptional.Main.NonJsTypeSubtype.$initialized = true);
   (global.set $f_$initialized__jsoptional_Main_NonJsTypeSubtype (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> NonJsTypeSubtype.getClass()
(func $m_getClass__java_lang_Class@jsoptional.Main.NonJsTypeSubtype
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $jsoptional.Main.NonJsTypeSubtype))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jsoptional.Main.NonJsTypeSubtype.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJsoptional.Main.NonJsTypeSubtype();
   (local.set $return.value (call $$getJsoptional.Main.NonJsTypeSubtype__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jsoptional.Main.NonJsTypeSubtype)

 ;;; Code for jsoptional.Main [vtable.init]
 (global.set $jsoptional.Main.vtable (struct.new_with_rtt $jsoptional.Main.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@jsoptional.Main) (ref.func $m_method1__int__java_lang_Double__java_lang_Integer__void@jsoptional.Main) (ref.func $m_method2__java_lang_String__java_lang_Double__arrayOf_java_lang_Boolean__void@jsoptional.Main) (ref.func $m_testFunction__jsoptional_Main_Function__void@jsoptional.Main) (ref.func $m_testOptionalFunction__jsoptional_Main_Function__void@jsoptional.Main) (rtt.canon $jsoptional.Main.vtable)))

 ;;; Code for jsoptional.Main.AFunction [vtable.init]
 (global.set $jsoptional.Main.AFunction.vtable (struct.new_with_rtt $jsoptional.Main.AFunction.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@jsoptional.Main.AFunction) (ref.func $m_f1__java_lang_String__arrayOf_java_lang_Object__java_lang_Object@jsoptional.Main.AFunction) (rtt.canon $jsoptional.Main.AFunction.vtable)))

 ;;; Code for jsoptional.Main.TemplatedSubtype [vtable.init]
 (global.set $jsoptional.Main.TemplatedSubtype.vtable (struct.new_with_rtt $jsoptional.Main.TemplatedSubtype.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@jsoptional.Main.TemplatedSubtype) (ref.func $m_m__java_lang_String__java_lang_Object__void@jsoptional.Main.TemplatedSubtype) (ref.func $m_m__java_lang_Object__java_lang_Object__void@jsoptional.Main.TemplatedSubtype) (rtt.canon $jsoptional.Main.TemplatedSubtype.vtable)))

 ;;; Code for jsoptional.Main.SpecializedSubtype [vtable.init]
 (global.set $jsoptional.Main.SpecializedSubtype.vtable (struct.new_with_rtt $jsoptional.Main.SpecializedSubtype.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@jsoptional.Main.SpecializedSubtype) (ref.func $m_m__java_lang_String__java_lang_Object__void@jsoptional.Main.SpecializedSubtype) (ref.func $m_m__java_lang_Object__java_lang_Object__void@jsoptional.Main.SpecializedSubtype) (rtt.canon $jsoptional.Main.SpecializedSubtype.vtable)))

 ;;; Code for jsoptional.Main.NonJsTypeSubtype [vtable.init]
 (global.set $jsoptional.Main.NonJsTypeSubtype.vtable (struct.new_with_rtt $jsoptional.Main.NonJsTypeSubtype.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@jsoptional.Main.NonJsTypeSubtype) (ref.func $m_m__java_lang_String__java_lang_Object__void@jsoptional.Main.NonJsTypeSubtype) (ref.func $m_m__java_lang_Object__java_lang_Object__void@jsoptional.Main.NonJsTypeSubtype) (rtt.canon $jsoptional.Main.NonJsTypeSubtype.vtable)))
