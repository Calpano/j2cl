package jsoptional

open class Main {
 open fun method1(i1: Int, d: kotlin.Double?, i: kotlin.Int?) {}

 open fun method2(s1: kotlin.String?, d: kotlin.Double?, vararg i: kotlin.Boolean?) {}

 @kotlin.jvm.JvmField internal var f: jsoptional.`Main$Function`? = jsoptional.`Main$Function` (fun(s: kotlin.String?, varargs: Array<kotlin.Any?>?): kotlin.Any? {
  return s
 })

 constructor(a: kotlin.String?): super()

 open fun testFunction(f: jsoptional.`Main$Function`?) {}

 open fun testOptionalFunction(f: jsoptional.`Main$Function`?) {}
}

fun interface `Main$Function` {
 fun f1(s: kotlin.String?, vararg args: kotlin.Any?): kotlin.Any?
}

class `Main$AFunction`: jsoptional.`Main$Function` {
 internal constructor(): super()

 open override fun f1(i: kotlin.String?, vararg args: kotlin.Any?): kotlin.Any? {
  return args!![0]
 }
}

fun interface `Main$I`<T> {
 fun m(t: T?, o: kotlin.Any?)
}

open class `Main$TemplatedSubtype`<T: kotlin.String?>: jsoptional.`Main$I`<T> {
 internal constructor(): super()

 open override fun m(t: T?, o: kotlin.Any?) {}
}

open class `Main$SpecializedSubtype`: jsoptional.`Main$I`<kotlin.String?> {
 @kotlin.jvm.JvmField val `this`: jsoptional.Main?

 constructor(`$outer_this`: jsoptional.Main?, a: kotlin.Any?): super() {
  this.`this` = `$outer_this`
 }

 open override fun m(t: kotlin.String?, o: kotlin.Any?) {}
}

open class `Main$NonJsTypeSubtype`: jsoptional.`Main$I`<kotlin.String?> {
 internal constructor(): super()

 open override fun m(t: kotlin.String?, o: kotlin.Any?) {}
}
