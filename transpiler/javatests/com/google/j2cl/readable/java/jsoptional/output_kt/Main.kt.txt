// Generated from "jsoptional/Main.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)

package jsoptional

import javaemul.lang.*
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.jvm.JvmField
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName

@ObjCName("JsoptionalMain", exact = true)
open class Main {
 @ObjCName("method1")
 open fun method1(
  @ObjCName("withInt") i1: Int,
  @ObjCName("withJavaLangDouble") d: Double?,
  @ObjCName("withJavaLangInteger") i: Int?
 ) {}

 @ObjCName("method2")
 open fun method2(
  @ObjCName("withNSString") s1: String?,
  @ObjCName("withJavaLangDouble") d: Double?,
  vararg @ObjCName("withJavaLangBooleanArray") i: Boolean?
 ) {
  val i_1: Array<Boolean?>? = i as Array<Boolean?>?
 }

 @JvmField
 @HiddenFromObjC
 var f_pp_jsoptional: Main.Function? = Main.Function { s: String?, varargs: Array<*>? ->
  val varargs_1: Array<Any?>? = varargs as Array<Any?>?
  return@Function s
 }

 constructor(
  @ObjCName("NSString") a: String?
 )

 @ObjCName("testFunction")
 open fun testFunction(
  @ObjCName("withJsoptionalMain_Function") f: Main.Function?
 ) {}

 @ObjCName("testOptionalFunction")
 open fun testOptionalFunction(
  @ObjCName("withJsoptionalMain_Function") f: Main.Function?
 ) {}

 fun interface Function {
  @ObjCName("f1")
  fun f1(
   @ObjCName("withNSString") s: String?,
   vararg @ObjCName("withNSObjectArray") args: Any?
  ): Any?
 }

 class AFunction: Main.Function {
  open override fun f1(i: String?, vararg args: Any?): Any? {
   val args_1: Array<Any?>? = args as Array<Any?>?
   return args_1!![0]
  }
 }

 fun interface I<T> {
  @ObjCName("m")
  fun m(
   @ObjCName("withId") t: T,
   @ObjCName("withId") o: Any?
  )
 }

 open class TemplatedSubtype<T: String?>: Main.I<T> {
  open override fun m(t: T, o: Any?) {}
 }

 open inner class SpecializedSubtype(
  @ObjCName("Id") a: Any?
 ): Main.I<String?> {
  open override fun m(t: String?, o: Any?) {}
 }

 open class NonJsTypeSubtype: Main.I<String?> {
  open override fun m(t: String?, o: Any?) {}
 }
}
