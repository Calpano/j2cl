// Generated by J2KT from "j2kt/ObjCName.java"

#import <Foundation/Foundation.h>

#import "third_party/java_src/j2objc/jre_emul/Classes/J2ObjC_types.h"

@class NewObjCName;
@class NewObjCName_Foo;

typedef NS_ENUM(NSUInteger, NewObjCName_Foo_Enum) {
 NewObjCName_Foo_Enum_allocFoo = 0,
 NewObjCName_Foo_Enum_initFoo = 1,
 NewObjCName_Foo_Enum_newFoo = 2,
 NewObjCName_Foo_Enum_copyFoo = 3,
 NewObjCName_Foo_Enum_mutableCopyFoo = 4,
 NewObjCName_Foo_Enum_register = 5,
 NewObjCName_Foo_Enum_struct = 6,
 NewObjCName_Foo_Enum_NULL = 7,
 NewObjCName_Foo_Enum_YES = 8,
 NewObjCName_Foo_Enum_NO = 9,
};

NS_INLINE NewObjCName_Foo* NewObjCName_Foo_get_allocFoo(void) {
 return NewObjCName_Foo.theAllocFoo;
}

NS_INLINE NewObjCName_Foo* NewObjCName_Foo_get_initFoo(void) {
 return NewObjCName_Foo.theInitFoo;
}

NS_INLINE NewObjCName_Foo* NewObjCName_Foo_get_newFoo(void) {
 return NewObjCName_Foo.theNewFoo;
}

NS_INLINE NewObjCName_Foo* NewObjCName_Foo_get_copyFoo(void) {
 return NewObjCName_Foo.theCopyFoo;
}

NS_INLINE NewObjCName_Foo* NewObjCName_Foo_get_mutableCopyFoo(void) {
 return NewObjCName_Foo.theMutableCopyFoo;
}

NS_INLINE NewObjCName_Foo* NewObjCName_Foo_get_register(void) {
 return NewObjCName_Foo.register__;
}

NS_INLINE NewObjCName_Foo* NewObjCName_Foo_get_struct(void) {
 return NewObjCName_Foo.struct__;
}

NS_INLINE NewObjCName_Foo* NewObjCName_Foo_get_NULL(void) {
 return NewObjCName_Foo.NULL__;
}

NS_INLINE NewObjCName_Foo* NewObjCName_Foo_get_YES(void) {
 return NewObjCName_Foo.YES__;
}

NS_INLINE NewObjCName_Foo* NewObjCName_Foo_get_NO(void) {
 return NewObjCName_Foo.NO__;
}

NS_INLINE NewObjCName_Foo* NewObjCName_Foo_withOrdinalWithInt_(jint ordinal) {
 return [NewObjCName_FooCompanion.shared withOrdinalWithInt:ordinal];
}

NS_INLINE jint NewObjCName_get_publicStaticField(void) {
 return NewObjCNameCompanion.shared.publicStaticField;
}

NS_INLINE id NewObjCName_get_objectField(void) {
 return NewObjCNameCompanion.shared.objectField;
}

NS_INLINE NSString* NewObjCName_get_stringField(void) {
 return NewObjCNameCompanion.shared.stringField;
}

NS_INLINE NewObjCName* NewObjCName_get_selfField(void) {
 return NewObjCNameCompanion.shared.selfField;
}

NS_INLINE jint NewObjCName_get_alloc(void) {
 return NewObjCNameCompanion.shared.theAlloc;
}

NS_INLINE jint NewObjCName_get_init(void) {
 return NewObjCNameCompanion.shared.theInit;
}

NS_INLINE jint NewObjCName_get_extern(void) {
 return NewObjCNameCompanion.shared.extern__;
}

NS_INLINE jint NewObjCName_get_inline(void) {
 return NewObjCNameCompanion.shared.inline__;
}

NS_INLINE jint NewObjCName_get_NULL(void) {
 return NewObjCNameCompanion.shared.NULL__;
}

NS_INLINE void NewObjCName_newFoo(void) {
 [NewObjCNameCompanion.shared doNewFoo];
}

NS_INLINE void NewObjCName_newFooFromInt_(jint i) {
 [NewObjCNameCompanion.shared doNewFooFromInt:i];
}

NS_INLINE void NewObjCName_newFooFromInt_withInteger_(NSString* s, jint i) {
 [NewObjCNameCompanion.shared doNewFooFromInt:s withInteger:i];
}

NS_INLINE void NewObjCName_fooWithNSString_withNSString_(NSString* s, NSString* i) {
 [NewObjCNameCompanion.shared fooWithNSString:s withNSString:i];
}

NS_INLINE void NewObjCName_alloc(void) {
 [NewObjCNameCompanion.shared doAlloc];
}

NS_INLINE void NewObjCName_allocFoo(void) {
 [NewObjCNameCompanion.shared doAllocFoo];
}

NS_INLINE void NewObjCName_allocatedFoo(void) {
 [NewObjCNameCompanion.shared allocatedFoo];
}

NS_INLINE void NewObjCName_initFoo(void) {
 [NewObjCNameCompanion.shared doInitFoo];
}

NS_INLINE void NewObjCName_newFoo(void) {
 [NewObjCNameCompanion.shared doNewFoo];
}

NS_INLINE void NewObjCName_copyFoo(void) {
 [NewObjCNameCompanion.shared doCopyFoo];
}

NS_INLINE void NewObjCName_mutableCopyFoo(void) {
 [NewObjCNameCompanion.shared doMutableCopyFoo];
}

NS_INLINE void NewObjCName_reservedParamNamesWithInt_withInt_withInt_withInt_(jint extern_, jint struct_, jint register_, jint inline_) {
 [NewObjCNameCompanion.shared reservedParamNamesWithInt:extern_ withInt:struct_ withInt:register_ withInt:inline_];
}

NS_INLINE NSString* NewObjCName_nativeTypesWithNSString_withId_withNSNumber_(NSString* s, id o, NSNumber* n) {
 return [NewObjCNameCompanion.shared nativeTypesWithNSString:s withId:o withNSNumber:n];
}
