// Generated from "kotlinkeywords/KotlinKeywords.java"
@file:OptIn(ExperimentalObjCName::class)

package kotlinkeywords

import javaemul.lang.*
import kotlin.Int
import kotlin.OptIn
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.native.ObjCName

@ObjCName("KotlinkeywordsKotlinKeywords", exact = true)
open class KotlinKeywords {
 @JvmField
 var `as`: Int = 0

 @JvmField
 var delete: Int = 0

 @JvmField
 var `fun`: Int = 0

 @JvmField
 var `in`: Int = 0

 @JvmField
 var initialize: Int = 0

 @JvmField
 var `is`: Int = 0

 @JvmField
 var `object`: Int = 0

 @JvmField
 var scale: Int = 0

 @JvmField
 var `typealias`: Int = 0

 @JvmField
 var `typeof`: Int = 0

 @JvmField
 var `val`: Int = 0

 @JvmField
 var `var`: Int = 0

 @JvmField
 var `when`: Int = 0

 @ObjCName("test")
 open fun test(
  @ObjCName("withInt") `in`: Int
 ): Int {
  val `as`: Int = this.`as` + `in`
  val delete: Int = this.delete + `in`
  val `fun`: Int = this.`fun` + `in`
  val initialize: Int = this.initialize + `in`
  val `is`: Int = this.`is` + `in`
  val `object`: Int = this.`object` + `in`
  val scale: Int = this.scale + `in`
  val `typealias`: Int = this.`typealias` + `in`
  val `typeof`: Int = this.`typeof` + `in`
  val `val`: Int = this.`val` + `in`
  val `var`: Int = this.`var` + `in`
  val `when`: Int = this.`when` + `in`
  val temp: Int = KotlinKeywords.OVERFLOW + KotlinKeywords.DOMAIN + `in`
  return KotlinKeywords.BIG_ENDIAN + KotlinKeywords.LITTLE_ENDIAN + KotlinKeywords.NULL + `in`
 }

 companion object {
  @JvmField
  @ObjCName("BIG_ENDIAN___")
  var BIG_ENDIAN: Int = 7

  @JvmField
  @ObjCName("LITTLE_ENDIAN___")
  var LITTLE_ENDIAN: Int = - 7

  @JvmField
  @ObjCName("NULL___")
  var NULL: Int = 745

  @JvmField
  @ObjCName("OVERFLOW___")
  var OVERFLOW: Int = - 24

  @JvmField
  @ObjCName("DOMAIN___")
  var DOMAIN: Int = - 32
 }
}
