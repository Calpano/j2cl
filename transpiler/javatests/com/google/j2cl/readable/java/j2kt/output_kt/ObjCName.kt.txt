// Generated from "j2kt/ObjCName.java"
@file:OptIn(ExperimentalObjCName::class)

package j2kt

import javaemul.lang.*
import java.util.HashMap
import java.util.LinkedList
import kotlin.Any
import kotlin.Int
import kotlin.Number
import kotlin.OptIn
import kotlin.String
import kotlin.collections.HashSet
import kotlin.collections.MutableCollection
import kotlin.collections.MutableIterable
import kotlin.collections.MutableIterator
import kotlin.collections.MutableList
import kotlin.collections.MutableListIterator
import kotlin.collections.MutableMap
import kotlin.collections.MutableSet
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic

@kotlin.native.ObjCName("NewObjCName", exact = true)
open class ObjCName {
 constructor()

 constructor(
  @kotlin.native.ObjCName("Integer", exact = false) i: Int
 )

 constructor(
  @kotlin.native.ObjCName("Int", exact = false) i: Int,
  @kotlin.native.ObjCName("withNSString", exact = false) s: String?
 )

 @kotlin.native.ObjCName("newFoo", exact = false)
 open fun foo() {}

 @kotlin.native.ObjCName("newProtectedFoo", exact = false)
 open fun protectedFoo() {}

 @kotlin.native.ObjCName("newFooFrom", exact = false)
 open fun newFoo(
  @kotlin.native.ObjCName("Int", exact = false) i: Int
 ) {}

 @kotlin.native.ObjCName("newFooFrom", exact = false)
 open fun foo(
  @kotlin.native.ObjCName("Int", exact = false) s: String?,
  @kotlin.native.ObjCName("withInteger", exact = false) i: Int
 ) {}

 open fun foo(
  @kotlin.native.ObjCName("withNSString", exact = false) s: String?,
  @kotlin.native.ObjCName("withNSString", exact = false) i: String?
 ) {}

 companion object {
  @JvmStatic
  fun alloc() {}

  @JvmStatic
  fun allocFoo() {}

  @JvmStatic
  fun allocatedFoo() {}

  @JvmStatic
  fun initFoo() {}

  @JvmStatic
  fun newFoo() {}

  @JvmStatic
  fun copyFoo() {}

  @JvmStatic
  fun mutableCopyFoo() {}

  @JvmStatic
  fun reservedParamNames(
   @kotlin.native.ObjCName("withInt", exact = false) extern: Int,
   @kotlin.native.ObjCName("withInt", exact = false) struct: Int,
   @kotlin.native.ObjCName("withInt", exact = false) register: Int,
   @kotlin.native.ObjCName("withInt", exact = false) inline: Int
  ) {}

  @JvmStatic
  fun nativeTypes(
   @kotlin.native.ObjCName("withNSString", exact = false) s: String?,
   @kotlin.native.ObjCName("withId", exact = false) o: Any?,
   @kotlin.native.ObjCName("withNSNumber", exact = false) n: Number?
  ): String? {
   return s
  }

  @JvmStatic
  fun iterableType(
   @kotlin.native.ObjCName("withJavaLangIterable", exact = false) l: MutableIterable<String?>?
  ) {}

  @JvmStatic
  fun iteratorType(
   @kotlin.native.ObjCName("withJavaUtilIterator", exact = false) l: MutableIterator<String?>?
  ) {}

  @JvmStatic
  fun listIteratorType(
   @kotlin.native.ObjCName("withJavaUtilListIterator", exact = false) l: MutableListIterator<String?>?
  ) {}

  @JvmStatic
  fun collectionType(
   @kotlin.native.ObjCName("withJavaUtilCollection", exact = false) l: MutableCollection<String?>?
  ) {}

  @JvmStatic
  fun listType(
   @kotlin.native.ObjCName("withJavaUtilList", exact = false) l: MutableList<String?>?
  ) {}

  @JvmStatic
  fun setType(
   @kotlin.native.ObjCName("withJavaUtilSet", exact = false) l: MutableSet<String?>?
  ) {}

  @JvmStatic
  fun mapType(
   @kotlin.native.ObjCName("withJavaUtilMap", exact = false) l: MutableMap<String?, String?>?
  ) {}

  @JvmStatic
  fun linkedListType(
   @kotlin.native.ObjCName("withJavaUtilLinkedList", exact = false) l: LinkedList<String?>?
  ) {}

  @JvmStatic
  fun hashSetType(
   @kotlin.native.ObjCName("withJavaUtilHashSet", exact = false) l: HashSet<String?>?
  ) {}

  @JvmStatic
  fun hashMapType(
   @kotlin.native.ObjCName("withJavaUtilHashMap", exact = false) l: HashMap<String?, String?>?
  ) {}
 }

 @kotlin.native.ObjCName("InnerClassNewName", exact = true)
 open inner class InnerClassOldName {}

 @kotlin.native.ObjCName("NewObjCName_Foo", exact = true)
 enum class Foo {
  @kotlin.native.ObjCName("allocFoo", exact = false)
  allocFoo,
  @kotlin.native.ObjCName("initFoo", exact = false)
  initFoo,
  @kotlin.native.ObjCName("newFoo", exact = false)
  newFoo,
  @kotlin.native.ObjCName("copyFoo", exact = false)
  copyFoo,
  @kotlin.native.ObjCName("mutableCopyFoo", exact = false)
  mutableCopyFoo,
  @kotlin.native.ObjCName("register__", exact = false)
  register,
  @kotlin.native.ObjCName("struct__", exact = false)
  struct,
  @kotlin.native.ObjCName("NULL__", exact = false)
  NULL__,
  @kotlin.native.ObjCName("YES__", exact = false)
  YES,
  @kotlin.native.ObjCName("NO__", exact = false)
  NO;

  companion object {
   @JvmStatic
   fun withOrdinal(
    @kotlin.native.ObjCName("withInt", exact = false) ordinal: Int
   ): ObjCName.Foo? {
    return ObjCName.Foo.values()!![ordinal]
   }
  }
 }
}
