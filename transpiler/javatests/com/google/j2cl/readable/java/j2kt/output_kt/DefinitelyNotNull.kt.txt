// Generated from "j2kt/DefinitelyNotNull.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress("REPEATED_BOUND", "UNNECESSARY_NOT_NULL_ASSERTION", "VARIABLE_WITH_REDUNDANT_INITIALIZER", "UNCHECKED_CAST", "PARAMETER_NAME_CHANGED_ON_OVERRIDE", "ALWAYS_NULL", "SENSELESS_COMPARISON", "UNUSED_PARAMETER")

package j2kt

import javaemul.lang.*
import java.lang.RuntimeException
import kotlin.Any
import kotlin.Boolean
import kotlin.OptIn
import kotlin.Suppress
import kotlin.collections.MutableIterable
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.jvm.JvmStatic
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName

@ObjCName("J2ktDefinitelyNotNull", exact = true)
open class DefinitelyNotNull {
 companion object {
  @JvmStatic
  @ObjCName("testEquivalence")
  fun <T> testEquivalence(
   @ObjCName("withJ2ktDefinitelyNotNull_Equivalence") equivalence: DefinitelyNotNull.Equivalence<in T & Any>,
   @ObjCName("withId") a: T?,
   @ObjCName("withId") b: T?
  ): Boolean {
   return equivalence!!.equivalent(a, b)
  }
 }

 open class Ordering<T> {
  @HiddenFromObjC
  open fun <S: T> reverse_pp_j2kt(): DefinitelyNotNull.Ordering<S> {
   throw RuntimeException()
  }

  companion object {
   @JvmStatic
   @HiddenFromObjC
   fun <E> reversed_pp_j2kt(ordering: DefinitelyNotNull.Ordering<in E>): DefinitelyNotNull.Ordering<in E> {
    return ordering!!.reverse_pp_j2kt<E>()
   }
  }
 }

 @ObjCName("J2ktDefinitelyNotNull_ImmutableList", exact = true)
 open class ImmutableList<E: Any> {
  companion object {
   @JvmStatic
   @ObjCName("copyOf")
   fun <E: Any> copyOf(
    @ObjCName("withJavaLangIterable") iterable: MutableIterable<E>
   ): DefinitelyNotNull.ImmutableList<E> {
    throw RuntimeException()
   }

   @JvmStatic
   @ObjCName("copyOfNullable")
   fun <E> copyOfNullable(
    @ObjCName("withJavaLangIterable") iterable: MutableIterable<E>
   ): DefinitelyNotNull.ImmutableList<E & Any> {
    return DefinitelyNotNull.ImmutableList.copyOf<E & Any>((iterable as MutableIterable<E & Any>?)!!)
   }
  }
 }

 fun interface Equivalence<T: Any> {
  @ObjCName("equivalent")
  fun equivalent(
   @ObjCName("withId") a: T?,
   @ObjCName("withId") b: T?
  ): Boolean
 }
}
