// Generated from "j2kt/TypeWildCards.java"
@file:OptIn(ExperimentalObjCRefinement::class, ExperimentalObjCName::class)

package j2kt

import javaemul.lang.*
import kotlin.OptIn
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.jvm.JvmStatic
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName

open class TypeWildCards {
 companion object {
  @JvmStatic
  @HiddenFromObjC
  fun testSupplierWithUpperAndLowerBounds_pp_j2kt(supplier: TypeWildCards.SupplierWithUpperBound<in TypeWildCards.Child?>?) {
   val parent: TypeWildCards.Parent? = supplier!!.get() as TypeWildCards.Parent?
  }

  @JvmStatic
  fun testObservable(
   @ObjCName("withJ2ktTypeWildCards_Observable") observable: TypeWildCards.Observable<*>?
  ) {}

  @JvmStatic
  fun testSuperWildcardObservable(
   @ObjCName("withJ2ktTypeWildCards_SuperWildcardObservable") observable: TypeWildCards.SuperWildcardObservable<*>?
  ) {
   observable!!.addObserver(TypeWildCards.Observer { e ->
   })
  }

  @JvmStatic
  fun testKtInObservable(
   @ObjCName("withJ2ktTypeWildCards_KtInObservable") observable: TypeWildCards.KtInObservable<*>?
  ) {
   observable!!.addObserver(TypeWildCards.KtInObserver { e ->
   })
  }
 }

 open class Parent {}

 open class Child: TypeWildCards.Parent() {}

 fun interface SupplierWithUpperBound<T: TypeWildCards.Parent?> {
  fun get(): T
 }

 fun interface Observer<E> {
  fun on(
   @ObjCName("withId") event: E
  )
 }

 fun interface KtInObserver<in E> {
  fun on(
   @ObjCName("withId") event: E
  )
 }

 fun interface Observable<E> {
  fun addObserver(
   @ObjCName("withJ2ktTypeWildCards_Observer") observer: TypeWildCards.Observer<E>?
  )
 }

 fun interface SuperWildcardObservable<E> {
  fun addObserver(
   @ObjCName("withJ2ktTypeWildCards_Observer") observer: TypeWildCards.Observer<in E>?
  )
 }

 fun interface KtInObservable<E> {
  fun addObserver(
   @ObjCName("withJ2ktTypeWildCards_KtInObserver") observer: TypeWildCards.KtInObserver<E>?
  )
 }
}
