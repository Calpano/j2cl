package inferreturn

open class InferReturn {
 companion object {
  @JvmStatic
  fun inferGeneric(foo: T): inferreturn.InferReturn<T>? {
   return inferreturn.InferReturn<T>()
  }

  @JvmStatic
  fun tightenType(foo: inferreturn.InferReturn<String?>?): inferreturn.InferReturn<inferreturn.InferReturn<String?>?>? {
   if (foo != null) {
    return inferreturn.InferReturn.inferGeneric(foo)
   }
   return null
  }

  @JvmStatic
  fun main() {
   val list: java.util.ArrayList<Any?>? = inferreturn.InferReturn.newArrayList("foo")
   inferreturn.InferReturn.acceptsArrayListOfObject(list)
   val array: Array<Any?>? = inferreturn.InferReturn.newArray("foo")
   inferreturn.InferReturn.acceptsArrayOfObject(array)
  }

  @JvmStatic
  fun newArrayList(foo: V): java.util.ArrayList<V>? {
   return java.util.ArrayList<V>()
  }

  @JvmStatic
  fun newArray(foo: V): Array<V>? {
   return arrayOfNulls<Any?>(0) as Array<V>?
  }

  @JvmStatic
  fun acceptsArrayListOfObject(foo: java.util.ArrayList<Any?>?) {}

  @JvmStatic
  fun acceptsArrayOfObject(foo: Array<Any?>?) {}
 }
}
