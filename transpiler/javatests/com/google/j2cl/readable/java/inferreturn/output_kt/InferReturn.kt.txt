// Generated from "inferreturn/InferReturn.java"
package inferreturn

import javaemul.lang.*
import kotlin.jvm.*

open class InferReturn<T> {
 companion object {
  @kotlin.jvm.JvmStatic
  fun <T_1> inferGeneric(foo: T_1): inferreturn.InferReturn<T_1>? {
   return inferreturn.InferReturn<T_1>()
  }

  @kotlin.jvm.JvmStatic
  fun tightenType(foo: inferreturn.InferReturn<kotlin.String?>?): inferreturn.InferReturn<inferreturn.InferReturn<kotlin.String?>?>? {
   if (foo !== null) {
    return inferreturn.InferReturn.inferGeneric<inferreturn.InferReturn<kotlin.String?>?>(foo)
   }
   return null
  }

  @kotlin.jvm.JvmStatic
  fun main() {
   val list: kotlin.collections.ArrayList<kotlin.Any?>? = inferreturn.InferReturn.newArrayList<kotlin.Any?>("foo")
   inferreturn.InferReturn.acceptsArrayListOfObject(list)
   val array: kotlin.Array<kotlin.Any?>? = inferreturn.InferReturn.newArray<kotlin.String?>("foo") as kotlin.Array<kotlin.Any?>?
   inferreturn.InferReturn.acceptsArrayOfObject(array)
  }

  @kotlin.jvm.JvmStatic
  fun <V> newArrayList(foo: V): kotlin.collections.ArrayList<V>? {
   return kotlin.collections.ArrayList<V>()
  }

  @kotlin.jvm.JvmStatic
  fun <V> newArray(foo: V): kotlin.Array<V>? {
   return kotlin.arrayOfNulls<kotlin.Any>(0) as kotlin.Array<V>?
  }

  @kotlin.jvm.JvmStatic
  fun acceptsArrayListOfObject(foo: kotlin.collections.ArrayList<kotlin.Any?>?) {}

  @kotlin.jvm.JvmStatic
  fun acceptsArrayOfObject(foo: kotlin.Array<kotlin.Any?>?) {}
 }
}
