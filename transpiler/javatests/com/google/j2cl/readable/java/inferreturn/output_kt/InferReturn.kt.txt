package inferreturn

open class InferReturn<T> {
 companion object {
  @kotlin.jvm.JvmStatic
  fun <T_1> inferGeneric(foo: T_1?): inferreturn.InferReturn<T_1>? {
   return inferreturn.InferReturn<T_1>()
  }

  @kotlin.jvm.JvmStatic
  fun tightenType(foo: inferreturn.InferReturn<kotlin.String?>?): inferreturn.InferReturn<inferreturn.InferReturn<kotlin.String?>?>? {
   if (foo !== null) {
    return inferreturn.InferReturn.inferGeneric(foo)
   }
   return null
  }

  @kotlin.jvm.JvmStatic
  fun main() {
   val list: java.util.ArrayList<kotlin.Any?>? = inferreturn.InferReturn.newArrayList("foo")
   inferreturn.InferReturn.acceptsArrayListOfObject(list)
   val array: Array<kotlin.Any?>? = inferreturn.InferReturn.newArray("foo") as Array<kotlin.Any?>
   inferreturn.InferReturn.acceptsArrayOfObject(array)
  }

  @kotlin.jvm.JvmStatic
  fun <V> newArrayList(foo: V?): java.util.ArrayList<V>? {
   return java.util.ArrayList<V>()
  }

  @kotlin.jvm.JvmStatic
  fun <V> newArray(foo: V?): Array<V>? {
   return arrayOfNulls<kotlin.Any?>(0) as Array<V>?
  }

  @kotlin.jvm.JvmStatic
  fun acceptsArrayListOfObject(foo: java.util.ArrayList<kotlin.Any?>?) {}

  @kotlin.jvm.JvmStatic
  fun acceptsArrayOfObject(foo: Array<kotlin.Any?>?) {}
 }
}
