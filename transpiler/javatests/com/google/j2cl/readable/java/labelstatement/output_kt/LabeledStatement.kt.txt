// Generated from "labelstatement/LabeledStatement.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress("REPEATED_BOUND", "UNNECESSARY_NOT_NULL_ASSERTION", "VARIABLE_WITH_REDUNDANT_INITIALIZER", "UNCHECKED_CAST", "PARAMETER_NAME_CHANGED_ON_OVERRIDE", "ALWAYS_NULL", "SENSELESS_COMPARISON", "UNUSED_PARAMETER")

package labelstatement

import javaemul.lang.*
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName

@ObjCName("LabelstatementLabeledStatement", exact = true)
open class LabeledStatement {
 @ObjCName("loopStatements")
 open fun loopStatements() {
  LABEL@ while (true) {
   break@LABEL
  }
 }

 @ObjCName("simpleStatement")
 open fun simpleStatement() {
  this.foo_private_2()
  LOOP@ do {
   continue@LOOP
  } while (false)
  return
 }

 @ObjCName("block")
 open fun block() {
  LABEL@ do {
   break@LABEL
  } while (false)
 }

 @ObjCName("ifStatement")
 open fun ifStatement() {
  LABEL@ do {
   if (true) {
    break@LABEL
   }
  } while (false)
 }

 @ObjCName("switchStatement")
 open fun switchStatement() {
  LABEL@ do {
   CASE@ do {
    CASE_1@ do {
     when (0) {
      0 -> {
       break@CASE_1
      }
      else -> {
       break@CASE
      }
     }
     break@LABEL
    } while (false)
    if (true) {
     break@LABEL
    }
   } while (false)
  } while (false)
 }

 @HiddenFromObjC
 fun foo_private_2() {}
}
