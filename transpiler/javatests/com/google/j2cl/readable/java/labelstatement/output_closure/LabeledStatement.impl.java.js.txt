goog.module('labelstatement.LabeledStatement$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

class LabeledStatement extends j_l_Object {
 /** @protected */
 constructor() {
  super();
 }
 /** @return {!LabeledStatement} */
 static $create__() {
  LabeledStatement.$clinit();
  let $instance = new LabeledStatement();
  $instance.$ctor__labelstatement_LabeledStatement__();
  return $instance;
 }
 
 $ctor__labelstatement_LabeledStatement__() {
  this.$ctor__java_lang_Object__();
 }
 
 m_loopStatements__() {
  LABEL: for (; true; ) {
   break LABEL;
  }
 }
 
 m_simpleStatement__() {
  LABEL: this.m_foo___$p_labelstatement_LabeledStatement();
  do {
   LABEL: continue;
  }while (false);
  LABEL: return;
 }
 
 m_block__() {
  LABEL: {
   break LABEL;
  }
 }
 
 m_ifStatement__() {
  LABEL: if (true) {
   break LABEL;
  }
 }
 
 m_switchStatement__() {
  LABEL: switch (0) {
   case 0: 
    if (true) {
     break;
    }
  }
 }
 
 m_foo___$p_labelstatement_LabeledStatement() {}
 
 static $clinit() {
  LabeledStatement.$clinit = () =>{};
  LabeledStatement.$loadModules();
  j_l_Object.$clinit();
 }
 /** @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof LabeledStatement;
 }
 
 static $loadModules() {}
}
$Util.$setClassMetadata(LabeledStatement, 'labelstatement.LabeledStatement');

exports = LabeledStatement;

//# sourceMappingURL=LabeledStatement.js.map
