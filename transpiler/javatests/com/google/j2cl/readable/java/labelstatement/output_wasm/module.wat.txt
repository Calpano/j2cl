;;; Code for labelstatement.LabeledStatement [static fields]
(global $f_$initialized__labelstatement_LabeledStatement (mut i32) (i32.const 0))

;;; Code for labelstatement.LabeledStatement [vtable.init]
(global $labelstatement.LabeledStatement.vtable (ref $labelstatement.LabeledStatement.vtable) 
 (struct.new_with_rtt $labelstatement.LabeledStatement.vtable
  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object)
  (ref.func $m_hashCode__int@java.lang.Object)
  (ref.func $m_toString__java_lang_String@java.lang.Object)
  (ref.func $m_getClass__java_lang_Class@labelstatement.LabeledStatement)
  (ref.func $m_loopStatements__void@labelstatement.LabeledStatement)
  (ref.func $m_simpleStatement__void@labelstatement.LabeledStatement)
  (ref.func $m_block__void@labelstatement.LabeledStatement)
  (ref.func $m_ifStatement__void@labelstatement.LabeledStatement)
  (ref.func $m_switchStatement__void@labelstatement.LabeledStatement)
  (rtt.canon $labelstatement.LabeledStatement.vtable)
 )
)

;;; Code for labelstatement.LabeledStatement [itable.init]
(global $labelstatement.LabeledStatement.itable (ref $itable) (array.init $itable 
 (rtt.canon $itable)))

;;; Code for labelstatement.LabeledStatement [CLASS]
(type $labelstatement.LabeledStatement (struct_subtype 
 (field $vtable (ref $labelstatement.LabeledStatement.vtable)) 
 (field $itable (ref $itable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
  $java.lang.Object)
)
(type $labelstatement.LabeledStatement.vtable (struct_subtype 
 (field $m_equals__java_lang_Object__boolean (ref $function.$java.lang.Object__$java.lang.Object__$boolean))
 (field $m_hashCode__int (ref $function.$java.lang.Object__$int))
 (field $m_toString__java_lang_String (ref $function.$java.lang.Object__$java.lang.String))
 (field $m_getClass__java_lang_Class (ref $function.$java.lang.Object__$java.lang.Class))
 (field $m_loopStatements__void (ref $function.$java.lang.Object__$void))
 (field $m_simpleStatement__void (ref $function.$java.lang.Object__$void))
 (field $m_block__void (ref $function.$java.lang.Object__$void))
 (field $m_ifStatement__void (ref $function.$java.lang.Object__$void))
 (field $m_switchStatement__void (ref $function.$java.lang.Object__$void))
  $java.lang.Object.vtable)
)

;;; LabeledStatement()
(func $m_<init>__@labelstatement.LabeledStatement
 (param $this (ref null $labelstatement.LabeledStatement))
 (result (ref null $labelstatement.LabeledStatement))
 ;;@ labelstatement/LabeledStatement.java:18:13
 (block
  ;; labelstatement.LabeledStatement.$clinit();
  ;;@ labelstatement/LabeledStatement.java:18:13
  (call $$clinit__void@labelstatement.LabeledStatement )
  ;; Object.this.Object.<init>();
  ;;@ labelstatement/LabeledStatement.java:18:13
  (drop (call $m_<init>__@java.lang.Object (local.get $this)))
  ;; return LabeledStatement.this;
  ;;@ labelstatement/LabeledStatement.java:18:13
  (return (local.get $this))
 )
)

;;; void LabeledStatement.loopStatements()
(func $m_loopStatements__void@labelstatement.LabeledStatement
 (type $function.$java.lang.Object__$void)
 (param $this.untyped (ref null $java.lang.Object))
 ;;@ labelstatement/LabeledStatement.java:19:14
 (local $this (ref null $labelstatement.LabeledStatement))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $labelstatement.LabeledStatement.rtt)))
 (block
  ;; LABEL: for (;true;) {
  ;;@ labelstatement/LabeledStatement.java:20:4
  (block $LABEL.BREAK
   (loop
    (block $LABEL.CONTINUE
     (block
      ;; break LABEL;
      ;;@ labelstatement/LabeledStatement.java:22:6
      (br $LABEL.BREAK)
     )
    )
    (br 0)
    
   )
  )
 )
)
(elem declare func $m_loopStatements__void@labelstatement.LabeledStatement)

;;; void LabeledStatement.simpleStatement()
(func $m_simpleStatement__void@labelstatement.LabeledStatement
 (type $function.$java.lang.Object__$void)
 (param $this.untyped (ref null $java.lang.Object))
 ;;@ labelstatement/LabeledStatement.java:26:14
 (local $this (ref null $labelstatement.LabeledStatement))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $labelstatement.LabeledStatement.rtt)))
 (block
  ;; LABEL: LabeledStatement.this.foo();
  ;;@ labelstatement/LabeledStatement.java:27:4
  (block $LABEL.BREAK
   ;; LabeledStatement.this.foo();
   ;;@ labelstatement/LabeledStatement.java:28:4
   (call $m_foo__void_$p_labelstatement_LabeledStatement@labelstatement.LabeledStatement (local.get $this))
  )
  ;; LOOP: do {
  ;;@ labelstatement/LabeledStatement.java:33:4
  (block $LOOP.BREAK
   (loop
    (block $LOOP.CONTINUE
     (block
      ;; LABEL: continue LOOP;
      ;;@ labelstatement/LabeledStatement.java:34:6
      (block $LABEL_1.BREAK
       ;; continue LOOP;
       ;;@ labelstatement/LabeledStatement.java:35:6
       (br $LOOP.CONTINUE)
      )
     )
    )
    
   )
  )
  ;; LABEL: return;
  ;;@ labelstatement/LabeledStatement.java:38:4
  (block $LABEL_2.BREAK
   ;; return;
   ;;@ labelstatement/LabeledStatement.java:39:4
   (return )
  )
 )
)
(elem declare func $m_simpleStatement__void@labelstatement.LabeledStatement)

;;; void LabeledStatement.block()
(func $m_block__void@labelstatement.LabeledStatement
 (type $function.$java.lang.Object__$void)
 (param $this.untyped (ref null $java.lang.Object))
 ;;@ labelstatement/LabeledStatement.java:42:14
 (local $this (ref null $labelstatement.LabeledStatement))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $labelstatement.LabeledStatement.rtt)))
 (block
  ;; LABEL: {
  ;;@ labelstatement/LabeledStatement.java:43:4
  (block $LABEL.BREAK
   (block
    ;; break LABEL;
    ;;@ labelstatement/LabeledStatement.java:45:6
    (br $LABEL.BREAK)
   )
  )
 )
)
(elem declare func $m_block__void@labelstatement.LabeledStatement)

;;; void LabeledStatement.ifStatement()
(func $m_ifStatement__void@labelstatement.LabeledStatement
 (type $function.$java.lang.Object__$void)
 (param $this.untyped (ref null $java.lang.Object))
 ;;@ labelstatement/LabeledStatement.java:49:14
 (local $this (ref null $labelstatement.LabeledStatement))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $labelstatement.LabeledStatement.rtt)))
 (block
  ;; LABEL: if (true) {
  ;;@ labelstatement/LabeledStatement.java:50:4
  (block $LABEL.BREAK
   ;; if (true) {
   ;;@ labelstatement/LabeledStatement.java:51:4
   (if (i32.const 1)
    (then
     (block
      ;; break LABEL;
      ;;@ labelstatement/LabeledStatement.java:52:6
      (br $LABEL.BREAK)
     )
    )
   )
  )
 )
)
(elem declare func $m_ifStatement__void@labelstatement.LabeledStatement)

;;; void LabeledStatement.switchStatement()
(func $m_switchStatement__void@labelstatement.LabeledStatement
 (type $function.$java.lang.Object__$void)
 (param $this.untyped (ref null $java.lang.Object))
 ;;@ labelstatement/LabeledStatement.java:56:14
 (local $this (ref null $labelstatement.LabeledStatement))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $labelstatement.LabeledStatement.rtt)))
 (block
  ;; LABEL: switch (0) {
  ;;@ labelstatement/LabeledStatement.java:57:4
  (block $LABEL.BREAK
   ;; switch (0) {
   ;;@ labelstatement/LabeledStatement.java:58:4
   (block
    (block ;; evaluate expression and jump
     (br_table 0 1 (i32.const 0))
    )
    ;; case 0:
    ;; if (true) {
    ;;@ labelstatement/LabeledStatement.java:60:8
    (if (i32.const 1)
     (then
      (block
       ;; break LABEL;
       ;;@ labelstatement/LabeledStatement.java:61:10
       (br $LABEL.BREAK)
      )
     )
    )
   )
  )
 )
)
(elem declare func $m_switchStatement__void@labelstatement.LabeledStatement)

;;; void LabeledStatement.foo()
(func $m_foo__void_$p_labelstatement_LabeledStatement@labelstatement.LabeledStatement
 (param $this (ref null $labelstatement.LabeledStatement))
 ;;@ labelstatement/LabeledStatement.java:66:15
 (block
 )
)

;;; void LabeledStatement.$clinit()
(func $$clinit__void@labelstatement.LabeledStatement
 ;;@ labelstatement/LabeledStatement.java:18:13
 (block
  ;; if (labelstatement.LabeledStatement.$initialized) return;
  ;;@ labelstatement/LabeledStatement.java:18:13
  (if (global.get $f_$initialized__labelstatement_LabeledStatement)
   (then
    ;; return;
    ;;@ labelstatement/LabeledStatement.java:18:13
    (return )
   )
  )
  ;; (labelstatement.LabeledStatement.$initialized = true);
  ;;@ labelstatement/LabeledStatement.java:18:13
  (global.set $f_$initialized__labelstatement_LabeledStatement (i32.const 1))
  ;; java.lang.Object.$clinit();
  ;;@ labelstatement/LabeledStatement.java:18:13
  (call $$clinit__void@java.lang.Object )
 )
)

;;; Class<?> LabeledStatement.getClass()
(func $m_getClass__java_lang_Class@labelstatement.LabeledStatement
 (type $function.$java.lang.Object__$java.lang.Class)
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $this (ref null $labelstatement.LabeledStatement))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $labelstatement.LabeledStatement.rtt)))
 (block
  ;; return javaemul.internal.ClassLiteralPool.$getLabelstatement.LabeledStatement();
  (return (call $function.no.side.effects.__$java.lang.Class (ref.func $$getLabelstatement.LabeledStatement__java_lang_Class@javaemul.internal.ClassLiteralPool) ))
 )
)
(elem declare func $m_getClass__java_lang_Class@labelstatement.LabeledStatement)
