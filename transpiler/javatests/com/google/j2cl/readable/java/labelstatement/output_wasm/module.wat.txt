;;; Code for labelstatement.LabeledStatement [vtable]
(global $labelstatement.LabeledStatement.vtable (mut (ref null $labelstatement.LabeledStatement.vtable)) (ref.null $labelstatement.LabeledStatement.vtable))

;;; Code for labelstatement.LabeledStatement [static fields]
(global $f_$initialized__labelstatement_LabeledStatement (mut i32) (i32.const 0))

;;; Code for labelstatement.LabeledStatement [CLASS]
(type $labelstatement.LabeledStatement (struct
 (field $vtable (ref null $labelstatement.LabeledStatement.vtable)) (field $itable (ref null $itable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $labelstatement.LabeledStatement.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_test__void (mut (ref $function.__$void)))
))

;;; LabeledStatement()
(func $m_<init>__void@labelstatement.LabeledStatement
 (param $this (ref null $labelstatement.LabeledStatement))
 (result (ref null $labelstatement.LabeledStatement))
 (block $return.label
  ;;@ labelstatement/LabeledStatement.java:18:13
  (block
   ;; labelstatement.LabeledStatement.$clinit();
   ;;@ labelstatement/LabeledStatement.java:18:13
   (call $$clinit__void@labelstatement.LabeledStatement )
   ;; Object.this.Object.<init>();
   ;;@ labelstatement/LabeledStatement.java:18:13
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void LabeledStatement.test()
(func $m_test__void@labelstatement.LabeledStatement
 (param $this.untyped (ref null $java.lang.Object))
 (local $this (ref null $labelstatement.LabeledStatement))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $labelstatement.LabeledStatement.rtt)))
 (block $return.label
  ;;@ labelstatement/LabeledStatement.java:19:14
  (block
   ;; LABEL: for (;true;) {
   ;;@ labelstatement/LabeledStatement.java:20:4
   
   (block $LABEL.BREAK
    (loop
     (br_if 1 (i32.eqz (i32.const 1)))
     (block $LABEL.CONTINUE
      ;;@ labelstatement/LabeledStatement.java:21:15
      (block
       ;; break LABEL;
       ;;@ labelstatement/LabeledStatement.java:22:6
       (br $LABEL.BREAK)
      )
     )
     (br 0)
     
    )
   )
   ;; LABEL1: for (;true;) {
   ;;@ labelstatement/LabeledStatement.java:25:4
   
   (block $LABEL1.BREAK
    (loop
     (br_if 1 (i32.eqz (i32.const 1)))
     (block $LABEL1.CONTINUE
      ;;@ labelstatement/LabeledStatement.java:26:15
      (block
       ;; continue LABEL1;
       ;;@ labelstatement/LabeledStatement.java:27:6
       (br $LABEL1.CONTINUE)
      )
     )
     (br 0)
     
    )
   )
  )
 )
)
(elem declare func $m_test__void@labelstatement.LabeledStatement)

;;; void LabeledStatement.$clinit()
(func $$clinit__void@labelstatement.LabeledStatement
 (block $return.label
  ;;@ labelstatement/LabeledStatement.java:18:13
  (block
   ;; if (labelstatement.LabeledStatement.$initialized) return;
   ;;@ labelstatement/LabeledStatement.java:18:13
   (if (global.get $f_$initialized__labelstatement_LabeledStatement)
    (then
     ;; return;
     ;;@ labelstatement/LabeledStatement.java:18:13
     (br $return.label)
    )
   )
   ;; (labelstatement.LabeledStatement.$initialized = true);
   ;;@ labelstatement/LabeledStatement.java:18:13
   (global.set $f_$initialized__labelstatement_LabeledStatement (i32.const 1))
   ;; java.lang.Object.$clinit();
   ;;@ labelstatement/LabeledStatement.java:18:13
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> LabeledStatement.getClass()
(func $m_getClass__java_lang_Class@labelstatement.LabeledStatement
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $labelstatement.LabeledStatement))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $labelstatement.LabeledStatement.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getLabelstatement.LabeledStatement();
   (local.set $return.value (call $$getLabelstatement.LabeledStatement__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@labelstatement.LabeledStatement)

 ;;; Code for labelstatement.LabeledStatement [vtable.init]
 (global.set $labelstatement.LabeledStatement.vtable
  (struct.new_with_rtt $labelstatement.LabeledStatement.vtable
   (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object)
   (ref.func $m_hashCode__int@java.lang.Object)
   (ref.func $m_toString__java_lang_String@java.lang.Object)
   (ref.func $m_getClass__java_lang_Class@labelstatement.LabeledStatement)
   (ref.func $m_test__void@labelstatement.LabeledStatement)
   (rtt.canon $labelstatement.LabeledStatement.vtable)
  )
 )

 ;;; Code for labelstatement.LabeledStatement [itable.init]
 (global.set $labelstatement.LabeledStatement.itable (array.new_default_with_rtt $itable (i32.const 0) (rtt.canon $itable)))
