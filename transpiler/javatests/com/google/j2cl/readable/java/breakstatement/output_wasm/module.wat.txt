;;; Code for breakstatement.BreakStatement [vtable]
(global $breakstatement.BreakStatement.vtable (mut (ref null $breakstatement.BreakStatement.vtable)) (ref.null $breakstatement.BreakStatement.vtable))

;;; Code for breakstatement.BreakStatement [static fields]
(global $f_$initialized__breakstatement_BreakStatement (mut i32) (i32.const 0))

;;; Code for breakstatement.BreakStatement [CLASS]
(type $breakstatement.BreakStatement (struct
 (field $vtable (ref null $breakstatement.BreakStatement.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $breakstatement.BreakStatement.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_test__void (mut (ref $function.__$void)))
))

;;; BreakStatement()
(func $m_<init>__void@breakstatement.BreakStatement
 (param $this (ref null $breakstatement.BreakStatement))
 (result (ref null $breakstatement.BreakStatement))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void BreakStatement.test()
(func $m_test__void@breakstatement.BreakStatement
 (param $this.untyped (ref null $java.lang.Object))
 (local $this (ref null $breakstatement.BreakStatement))
 (local.set $this (ref.cast $java.lang.Object $breakstatement.BreakStatement (local.get $this.untyped) (global.get $breakstatement.BreakStatement.rtt)))
 (block $return.label
  (block
   ;; LOOP: for (;true;) {
   
   (block $LOOP.BREAK
    (loop
     (br_if 1 (i32.eqz (i32.const 1)))
     (block $LOOP.CONTINUE
      (block
       ;; break LOOP;
       (br $LOOP.BREAK)
      )
     )
     (br 0)
     
    )
   )
  )
 )
)
(elem declare func $m_test__void@breakstatement.BreakStatement)

;;; void BreakStatement.$clinit()
(func $$clinit__void@breakstatement.BreakStatement
 (block $return.label
  (block
   ;; if (breakstatement.BreakStatement.$initialized) return;
   (if (global.get $f_$initialized__breakstatement_BreakStatement)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (breakstatement.BreakStatement.$initialized = true);
   (global.set $f_$initialized__breakstatement_BreakStatement (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

 ;;; Code for breakstatement.BreakStatement [vtable.init]
 (global.set $breakstatement.BreakStatement.vtable (struct.new_with_rtt $breakstatement.BreakStatement.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_test__void@breakstatement.BreakStatement) (rtt.canon $breakstatement.BreakStatement.vtable)))
