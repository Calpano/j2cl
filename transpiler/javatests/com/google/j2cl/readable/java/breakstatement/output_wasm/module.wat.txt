;;; Code for breakstatement.BreakStatement [vtable]
(global $breakstatement.BreakStatement.vtable (mut (ref null $breakstatement.BreakStatement.vtable)) (ref.null $breakstatement.BreakStatement.vtable))

;;; Code for breakstatement.BreakStatement [static fields]
(global $f_$initialized__breakstatement_BreakStatement (mut i32) (i32.const 0))

;;; Code for breakstatement.BreakStatement [CLASS]
(type $breakstatement.BreakStatement (struct
 (field $vtable (ref $breakstatement.BreakStatement.vtable)) (field $itable (ref $itable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $breakstatement.BreakStatement.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_test__void (mut (ref $function.__$void)))
))

;;; BreakStatement()
(func $m_<init>__@breakstatement.BreakStatement
 (param $this (ref null $breakstatement.BreakStatement))
 (result (ref null $breakstatement.BreakStatement))
 (block
  ;; breakstatement.BreakStatement.$clinit();
  ;;@ breakstatement/BreakStatement.java:18:13
  (call $$clinit__void@breakstatement.BreakStatement )
  ;; Object.this.Object.<init>();
  ;;@ breakstatement/BreakStatement.java:18:13
  (drop (call $m_<init>__@java.lang.Object (local.get $this)))
  ;; return BreakStatement.this;
  ;;@ breakstatement/BreakStatement.java:18:13
  (return (local.get $this))
 )
)

;;; void BreakStatement.test()
(func $m_test__void@breakstatement.BreakStatement
 (param $this.untyped (ref null $java.lang.Object))
 (local $this (ref null $breakstatement.BreakStatement))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $breakstatement.BreakStatement.rtt)))
 (block
  ;; LOOP: for (;true;) {
  ;;@ breakstatement/BreakStatement.java:20:4
  (block $LOOP.BREAK
   (loop
    (block $LOOP.CONTINUE
     (block
      ;; break LOOP;
      ;;@ breakstatement/BreakStatement.java:21:6
      (br $LOOP.BREAK)
     )
    )
    (br 0)
    
   )
  )
 )
)
(elem declare func $m_test__void@breakstatement.BreakStatement)

;;; void BreakStatement.$clinit()
(func $$clinit__void@breakstatement.BreakStatement
 (block
  ;; if (breakstatement.BreakStatement.$initialized) return;
  ;;@ breakstatement/BreakStatement.java:18:13
  (if (global.get $f_$initialized__breakstatement_BreakStatement)
   (then
    ;; return;
    ;;@ breakstatement/BreakStatement.java:18:13
    (return )
   )
  )
  ;; (breakstatement.BreakStatement.$initialized = true);
  ;;@ breakstatement/BreakStatement.java:18:13
  (global.set $f_$initialized__breakstatement_BreakStatement (i32.const 1))
  ;; java.lang.Object.$clinit();
  ;;@ breakstatement/BreakStatement.java:18:13
  (call $$clinit__void@java.lang.Object )
 )
)

;;; Class<?> BreakStatement.getClass()
(func $m_getClass__java_lang_Class@breakstatement.BreakStatement
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $this (ref null $breakstatement.BreakStatement))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $breakstatement.BreakStatement.rtt)))
 (block
  ;; return javaemul.internal.ClassLiteralPool.$getBreakstatement.BreakStatement();
  (return (call $$getBreakstatement.BreakStatement__java_lang_Class@javaemul.internal.ClassLiteralPool ))
 )
)
(elem declare func $m_getClass__java_lang_Class@breakstatement.BreakStatement)

 ;;; Code for breakstatement.BreakStatement [vtable.init]
 (global.set $breakstatement.BreakStatement.vtable
  (struct.new_with_rtt $breakstatement.BreakStatement.vtable
   (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object)
   (ref.func $m_hashCode__int@java.lang.Object)
   (ref.func $m_toString__java_lang_String@java.lang.Object)
   (ref.func $m_getClass__java_lang_Class@breakstatement.BreakStatement)
   (ref.func $m_test__void@breakstatement.BreakStatement)
   (rtt.canon $breakstatement.BreakStatement.vtable)
  )
 )

 ;;; Code for breakstatement.BreakStatement [itable.init]
 (global.set $breakstatement.BreakStatement.itable (array.new_default_with_rtt $itable (i32.const 0) (rtt.canon $itable)))
