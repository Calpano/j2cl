// Generated from "switchstatement/SwitchStatement.java"
package switchstatement

import javaemul.lang.*
import kotlin.jvm.*

enum class Numbers {
 ONE,
 TWO;

}

open class SwitchStatement {
 open fun main() {
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     CASE_2@ do {
      when ("one") {
       "one" -> {
        break@CASE_2
       }
       "two" -> {
        break@CASE_1
       }
       else -> {
        break@CASE
       }
      }
      break@SWITCH
     } while (false)
    } while (false)
    break@SWITCH
   } while (false)
   return
  } while (false)
  SWITCH_1@ do {
   CASE_3@ do {
    CASE_4@ do {
     CASE_5@ do {
      when ('1') {
       '1' -> {
        break@CASE_5
       }
       '2' -> {
        break@CASE_4
       }
       else -> {
        break@CASE_3
       }
      }
      break@SWITCH_1
     } while (false)
    } while (false)
    break@SWITCH_1
   } while (false)
   return
  } while (false)
  SWITCH_2@ do {
   CASE_6@ do {
    CASE_7@ do {
     CASE_8@ do {
      CASE_9@ do {
       when (1) {
        -2 -> {
         break@CASE_9
        }
        1 -> {
         break@CASE_8
        }
        2 -> {
         break@CASE_7
        }
        else -> {
         break@CASE_6
        }
       }
       break@SWITCH_2
      } while (false)
     } while (false)
    } while (false)
    break@SWITCH_2
   } while (false)
   return
  } while (false)
  SWITCH_3@ do {
   CASE_10@ do {
    CASE_11@ do {
     CASE_12@ do {
      when (switchstatement.Numbers.ONE) {
       switchstatement.Numbers.ONE -> {
        break@CASE_12
       }
       switchstatement.Numbers.TWO -> {
        break@CASE_11
       }
       else -> {
        break@CASE_10
       }
      }
      break@SWITCH_3
     } while (false)
    } while (false)
    break@SWITCH_3
   } while (false)
   return
  } while (false)
 }

 fun testCaseExpressionTypes_private_switchstatement_SwitchStatement(ch: kotlin.Char, i: kotlin.Int, b: kotlin.Byte, s: kotlin.Short) {
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     CASE_2@ do {
      CASE_3@ do {
       when (ch) {
        'a' -> {
         break@CASE_3
        }
        '\u0001' -> {
         break@CASE_2
        }
        '\u0002' -> {
         break@CASE_1
        }
        '\u0003' -> {
         break@CASE
        }
       }
       break@SWITCH
      } while (false)
      break@SWITCH
     } while (false)
     break@SWITCH
    } while (false)
    break@SWITCH
   } while (false)
   break@SWITCH
  } while (false)
  SWITCH_1@ do {
   CASE_4@ do {
    CASE_5@ do {
     CASE_6@ do {
      CASE_7@ do {
       when (i) {
        97 -> {
         break@CASE_7
        }
        1 -> {
         break@CASE_6
        }
        2 -> {
         break@CASE_5
        }
        3 -> {
         break@CASE_4
        }
       }
       break@SWITCH_1
      } while (false)
      break@SWITCH_1
     } while (false)
     break@SWITCH_1
    } while (false)
    break@SWITCH_1
   } while (false)
   break@SWITCH_1
  } while (false)
  SWITCH_2@ do {
   CASE_8@ do {
    CASE_9@ do {
     CASE_10@ do {
      CASE_11@ do {
       when (b) {
        (97).toByte() -> {
         break@CASE_11
        }
        (1).toByte() -> {
         break@CASE_10
        }
        (2).toByte() -> {
         break@CASE_9
        }
        (3).toByte() -> {
         break@CASE_8
        }
       }
       break@SWITCH_2
      } while (false)
      break@SWITCH_2
     } while (false)
     break@SWITCH_2
    } while (false)
    break@SWITCH_2
   } while (false)
   break@SWITCH_2
  } while (false)
  SWITCH_3@ do {
   CASE_12@ do {
    CASE_13@ do {
     CASE_14@ do {
      CASE_15@ do {
       when (s) {
        (97).toShort() -> {
         break@CASE_15
        }
        (1).toShort() -> {
         break@CASE_14
        }
        (2).toShort() -> {
         break@CASE_13
        }
        (3).toShort() -> {
         break@CASE_12
        }
       }
       break@SWITCH_3
      } while (false)
      break@SWITCH_3
     } while (false)
     break@SWITCH_3
    } while (false)
    break@SWITCH_3
   } while (false)
   break@SWITCH_3
  } while (false)
 }

 companion object {
  @kotlin.jvm.JvmStatic
  fun testSwitchVariableDeclarations_private_switchstatement_SwitchStatement() {
   val unassigned: kotlin.Int = 0
   val unassigned2: kotlin.Int = 0
   var i: kotlin.Int = 0
   var j: kotlin.Int = 0
   var b: kotlin.Int = 0
   var i_1: kotlin.Int = 0
   SWITCH@ do {
    CASE@ do {
     CASE_1@ do {
      when (3) {
       1 -> {
        break@CASE_1
       }
       3 -> {
        break@CASE
       }
      }
      break@SWITCH
     } while (false)
     null
     i = 0
     j = 2
     b = j + 1
     break@SWITCH
    } while (false)
    i = 3
    assert(i === 3)
    return
   } while (false)
   SWITCH_1@ do {
    CASE_2@ do {
     when (5) {
      5 -> {
       break@CASE_2
      }
     }
     break@SWITCH_1
    } while (false)
    i_1 = 1
    break@SWITCH_1
   } while (false)
   assert(false)
  }
 }
}
