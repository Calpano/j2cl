// Generated from "switchstatement/SwitchStatement.java"
package switchstatement

import javaemul.lang.*
import kotlin.jvm.*

enum class Numbers {
 ONE,
 TWO;

}

open class SwitchStatement {
 open fun main() {
  SWITCH@ do {
   when ("one") {
    "one", "two" -> {
     break@SWITCH
    }
    else -> {
     return
    }
   }
  } while (false)
  SWITCH_1@ do {
   when ('1') {
    '1', '2' -> {
     break@SWITCH_1
    }
    else -> {
     return
    }
   }
  } while (false)
  SWITCH_2@ do {
   when (1) {
    -2, 1, 2 -> {
     break@SWITCH_2
    }
    else -> {
     return
    }
   }
  } while (false)
  SWITCH_3@ do {
   when (switchstatement.Numbers.ONE) {
    switchstatement.Numbers.ONE, switchstatement.Numbers.TWO -> {
     break@SWITCH_3
    }
    else -> {
     return
    }
   }
  } while (false)
 }

 fun testCaseExpressionTypes_private_switchstatement_SwitchStatement(ch: kotlin.Char, i: kotlin.Int, b: kotlin.Byte, s: kotlin.Short) {
  SWITCH@ do {
   when (ch) {
    'a' -> {
     break@SWITCH
    }
    '\u0001' -> {
     break@SWITCH
    }
    '\u0002' -> {
     break@SWITCH
    }
    '\u0003' -> {
     break@SWITCH
    }
   }
  } while (false)
  SWITCH_1@ do {
   when (i) {
    97 -> {
     break@SWITCH_1
    }
    1 -> {
     break@SWITCH_1
    }
    2 -> {
     break@SWITCH_1
    }
    3 -> {
     break@SWITCH_1
    }
   }
  } while (false)
  SWITCH_2@ do {
   when (b) {
    (97).toByte() -> {
     break@SWITCH_2
    }
    (1).toByte() -> {
     break@SWITCH_2
    }
    (2).toByte() -> {
     break@SWITCH_2
    }
    (3).toByte() -> {
     break@SWITCH_2
    }
   }
  } while (false)
  SWITCH_3@ do {
   when (s) {
    (97).toShort() -> {
     break@SWITCH_3
    }
    (1).toShort() -> {
     break@SWITCH_3
    }
    (2).toShort() -> {
     break@SWITCH_3
    }
    (3).toShort() -> {
     break@SWITCH_3
    }
   }
  } while (false)
 }

 fun testBlocksInSwitchCase_private_switchstatement_SwitchStatement(i: kotlin.Int) {
  SWITCH@ do {
   when (i) {
    1 -> {
     this.foo_private_switchstatement_SwitchStatement(1)
     this.foo_private_switchstatement_SwitchStatement(2)
     this.foo_private_switchstatement_SwitchStatement(3)
     this.foo_private_switchstatement_SwitchStatement(4)
     this.foo_private_switchstatement_SwitchStatement(5)
     break@SWITCH
    }
   }
  } while (false)
 }

 fun testLabelInSwitchCase_private_switchstatement_SwitchStatement(i: kotlin.Int) {
  SWITCH@ do {
   when (i) {
    1 -> {
     LABEL@ do {
      break@LABEL
     } while (true)
    }
   }
  } while (false)
 }

 fun testNonFallThroughBreakCase_private_switchstatement_SwitchStatement(i: kotlin.Int) {
  SWITCH@ do {
   when (i) {
    1 -> {
     this.foo_private_switchstatement_SwitchStatement(1)
     break@SWITCH
    }
    else -> {
     this.foo_private_switchstatement_SwitchStatement(2)
     break@SWITCH
    }
   }
  } while (false)
 }

 fun testNonFallThroughBreakOuterCase_private_switchstatement_SwitchStatement(i: kotlin.Int) {
  OUTER_LABEL@ do {
   SWITCH@ do {
    when (i) {
     1 -> {
      this.foo_private_switchstatement_SwitchStatement(1)
      break@OUTER_LABEL
     }
     else -> {
      this.foo_private_switchstatement_SwitchStatement(2)
      break@SWITCH
     }
    }
   } while (false)
  } while (false)
 }

 fun testNonFallThroughContinueCase_private_switchstatement_SwitchStatement(i: kotlin.Int) {
  LOOP@ do {
   SWITCH@ do {
    when (i) {
     3 -> {
      this.foo_private_switchstatement_SwitchStatement(1)
      continue@LOOP
     }
     else -> {
      this.foo_private_switchstatement_SwitchStatement(2)
      break@SWITCH
     }
    }
   } while (false)
  } while (false)
 }

 fun testNonFallThroughReturnCase_private_switchstatement_SwitchStatement(i: kotlin.Int) {
  SWITCH@ do {
   when (i) {
    4 -> {
     this.foo_private_switchstatement_SwitchStatement(1)
     return
    }
    else -> {
     this.foo_private_switchstatement_SwitchStatement(2)
     break@SWITCH
    }
   }
  } while (false)
 }

 fun testNonFallThroughThrowCase_private_switchstatement_SwitchStatement(i: kotlin.Int) {
  SWITCH@ do {
   when (i) {
    5 -> {
     this.foo_private_switchstatement_SwitchStatement(1)
     throw java.lang.RuntimeException()
    }
    else -> {
     this.foo_private_switchstatement_SwitchStatement(2)
     break@SWITCH
    }
   }
  } while (false)
 }

 fun testNonFallThroughIfCase_private_switchstatement_SwitchStatement(i: kotlin.Int) {
  SWITCH@ do {
   when (i) {
    1 -> {
     this.foo_private_switchstatement_SwitchStatement(1)
     if (false) {
      break@SWITCH
     } else {
      break@SWITCH
     }
    }
    else -> {
     this.foo_private_switchstatement_SwitchStatement(2)
     break@SWITCH
    }
   }
  } while (false)
 }

 fun testNonFallThroughBlockCase_private_switchstatement_SwitchStatement(i: kotlin.Int) {
  SWITCH@ do {
   when (i) {
    1 -> {
     this.foo_private_switchstatement_SwitchStatement(1)
     break@SWITCH
    }
    else -> {
     this.foo_private_switchstatement_SwitchStatement(2)
     break@SWITCH
    }
   }
  } while (false)
 }

 fun testNonFallThrough_defaultIsNotLast_private_switchstatement_SwitchStatement(i: kotlin.Int) {
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     CASE_2@ do {
      CASE_3@ do {
       when (i) {
        1 -> {
         break@CASE_3
        }
        2 -> {
         break@CASE_2
        }
        3 -> {
         break@CASE
        }
        else -> {
         break@CASE_1
        }
       }
       break@SWITCH
      } while (false)
      this.foo_private_switchstatement_SwitchStatement(1)
      break@SWITCH
     } while (false)
     this.foo_private_switchstatement_SwitchStatement(2)
     break@SWITCH
    } while (false)
    this.foo_private_switchstatement_SwitchStatement(3)
    break@SWITCH
   } while (false)
   this.foo_private_switchstatement_SwitchStatement(4)
   break@SWITCH
  } while (false)
 }

 fun testFallThroughCase_private_switchstatement_SwitchStatement(i: kotlin.Int) {
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     when (i) {
      1 -> {
       break@CASE_1
      }
      else -> {
       break@CASE
      }
     }
     break@SWITCH
    } while (false)
    this.foo_private_switchstatement_SwitchStatement(1)
   } while (false)
   this.foo_private_switchstatement_SwitchStatement(2)
   break@SWITCH
  } while (false)
 }

 fun testFallThroughBreakInnerCase_private_switchstatement_SwitchStatement(i: kotlin.Int) {
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     when (i) {
      1 -> {
       break@CASE_1
      }
      else -> {
       break@CASE
      }
     }
     break@SWITCH
    } while (false)
    this.foo_private_switchstatement_SwitchStatement(1)
    INNER_LABEL@ do {
     break@INNER_LABEL
    } while (false)
   } while (false)
   this.foo_private_switchstatement_SwitchStatement(2)
   break@SWITCH
  } while (false)
 }

 fun testFallThroughContinueInnerCase_private_switchstatement_SwitchStatement(i: kotlin.Int) {
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     when (i) {
      1 -> {
       break@CASE_1
      }
      else -> {
       break@CASE
      }
     }
     break@SWITCH
    } while (false)
    this.foo_private_switchstatement_SwitchStatement(1)
    INNER_LABEL@ do {
     continue@INNER_LABEL
    } while (false)
   } while (false)
   this.foo_private_switchstatement_SwitchStatement(2)
   break@SWITCH
  } while (false)
 }

 fun testFallThroughLabeledStatement_private_switchstatement_SwitchStatement(i: kotlin.Int) {
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     when (i) {
      1 -> {
       break@CASE_1
      }
      else -> {
       break@CASE
      }
     }
     break@SWITCH
    } while (false)
    INNER_LABEL@ do {
     if (false) {
      break@INNER_LABEL
     }
     return
    } while (false)
   } while (false)
   this.foo_private_switchstatement_SwitchStatement(2)
   break@SWITCH
  } while (false)
 }

 fun testFallThroughIfCase_private_switchstatement_SwitchStatement(i: kotlin.Int) {
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     when (i) {
      1 -> {
       break@CASE_1
      }
      else -> {
       break@CASE
      }
     }
     break@SWITCH
    } while (false)
    this.foo_private_switchstatement_SwitchStatement(1)
    if (false) {
     break@SWITCH
    }
   } while (false)
   this.foo_private_switchstatement_SwitchStatement(2)
   break@SWITCH
  } while (false)
 }

 fun testFallThroughIfElseCase_private_switchstatement_SwitchStatement(i: kotlin.Int) {
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     when (i) {
      1 -> {
       break@CASE_1
      }
      else -> {
       break@CASE
      }
     }
     break@SWITCH
    } while (false)
    if (true) {
     this.foo_private_switchstatement_SwitchStatement(1)
     break@SWITCH
    } else {
     this.foo_private_switchstatement_SwitchStatement(2)
    }
   } while (false)
   this.foo_private_switchstatement_SwitchStatement(2)
   break@SWITCH
  } while (false)
 }

 fun testFallThoughLastCase_private_switchstatement_SwitchStatement(i: kotlin.Int) {
  SWITCH@ do {
   when (i) {
    1 -> {
     this.foo_private_switchstatement_SwitchStatement(1)
     break@SWITCH
    }
    else -> {
     this.foo_private_switchstatement_SwitchStatement(2)
    }
   }
  } while (false)
 }

 fun testDefaultIsNotLast_fallThrough_private_switchstatement_SwitchStatement(i: kotlin.Int) {
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     CASE_2@ do {
      CASE_3@ do {
       when (i) {
        1 -> {
         break@CASE_3
        }
        2 -> {
         break@CASE_2
        }
        4 -> {
         break@CASE
        }
        else -> {
         break@CASE_1
        }
       }
       break@SWITCH
      } while (false)
      this.foo_private_switchstatement_SwitchStatement(1)
     } while (false)
     this.foo_private_switchstatement_SwitchStatement(2)
    } while (false)
    this.foo_private_switchstatement_SwitchStatement(3)
   } while (false)
   this.foo_private_switchstatement_SwitchStatement(4)
  } while (false)
 }

 fun testDefaultNotLast_fallThroughCase_private_switchstatement_SwitchStatement(i: kotlin.Int): kotlin.Int {
  var result: kotlin.Int = 0
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     CASE_2@ do {
      when (i) {
       1 -> {
        break@CASE_2
       }
       3 -> {
        break@CASE
       }
       else -> {
        break@CASE_1
       }
      }
      break@SWITCH
     } while (false)
    } while (false)
    result = result + 10
    break@SWITCH
   } while (false)
   result = result + 100
   break@SWITCH
  } while (false)
  return result
 }

 fun testDefaultNotLast_fallThroughDefault_private_switchstatement_SwitchStatement(i: kotlin.Int): kotlin.Int {
  var result: kotlin.Int = 0
  SWITCH@ do {
   CASE@ do {
    CASE_1@ do {
     CASE_2@ do {
      when (i) {
       1 -> {
        break@CASE_2
       }
       3 -> {
        break@CASE
       }
       else -> {
        break@CASE_1
       }
      }
      break@SWITCH
     } while (false)
     result = result + 10
     break@SWITCH
    } while (false)
   } while (false)
   result = result + 100
   break@SWITCH
  } while (false)
  return result
 }

 fun foo_private_switchstatement_SwitchStatement(i: kotlin.Int) {}

 companion object {
  @kotlin.jvm.JvmStatic
  fun testSwitchVariableDeclarations_private_switchstatement_SwitchStatement() {
   val unassigned: kotlin.Int = 0
   val unassigned2: kotlin.Int = 0
   var i: kotlin.Int = 0
   var j: kotlin.Int = 0
   var b: kotlin.Int = 0
   var i_1: kotlin.Int = 0
   SWITCH@ do {
    when (3) {
     1 -> {
      null
      i = 0
      j = 2
      b = j + 1
      break@SWITCH
     }
     3 -> {
      i = 3
      kotlin.assert(i === 3)
      return
     }
    }
   } while (false)
   SWITCH_1@ do {
    when (5) {
     5 -> {
      i_1 = 1
      break@SWITCH_1
     }
    }
   } while (false)
   kotlin.assert(false)
  }
 }
}
