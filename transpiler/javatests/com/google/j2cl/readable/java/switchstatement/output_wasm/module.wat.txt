;;; Code for switchstatement.Numbers [vtable]
(global $switchstatement.Numbers.vtable (mut (ref null $switchstatement.Numbers.vtable)) (ref.null $switchstatement.Numbers.vtable))

;;; Code for switchstatement.SwitchStatement [vtable]
(global $switchstatement.SwitchStatement.vtable (mut (ref null $switchstatement.SwitchStatement.vtable)) (ref.null $switchstatement.SwitchStatement.vtable))

;;; Code for switchstatement.Numbers [static fields]
(global $f_ONE__switchstatement_Numbers (mut (ref null $switchstatement.Numbers)) (ref.null $switchstatement.Numbers))
(global $f_TWO__switchstatement_Numbers (mut (ref null $switchstatement.Numbers)) (ref.null $switchstatement.Numbers))
(global $f_namesToValuesMap__switchstatement_Numbers_ (mut (ref null $java.lang.Object)) (ref.null $java.lang.Object))
(global $$ordinal_ONE__switchstatement_Numbers i32 (i32.const 0))
(global $$ordinal_TWO__switchstatement_Numbers i32 (i32.const 1))
(global $f_$initialized__switchstatement_Numbers (mut i32) (i32.const 0))

;;; Code for switchstatement.SwitchStatement [static fields]
(global $f_$initialized__switchstatement_SwitchStatement (mut i32) (i32.const 0))

;;; Code for switchstatement.Numbers [ENUM]
(type $switchstatement.Numbers (struct
 (field $vtable (ref $switchstatement.Numbers.vtable)) (field $itable (ref $itable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $f_name__java_lang_Enum_ (mut (ref null $java.lang.String)))
 (field $f_ordinal__java_lang_Enum_ (mut i32))
))
(type $switchstatement.Numbers.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_getDeclaringClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_name__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_ordinal__int (mut (ref $function.__$int)))
 (field $m_compareTo__java_lang_Enum__int (mut (ref $function.$java.lang.Enum__$int)))
 (field $m_compareTo__java_lang_Object__int (mut (ref $function.$java.lang.Object__$int)))
))

;;; Numbers(String $name, int $ordinal)
(func $m_<init>__java_lang_String__int__void_$p_switchstatement_Numbers@switchstatement.Numbers
 (param $this (ref null $switchstatement.Numbers))
 (param $$name (ref null $java.lang.String))
 (param $$ordinal i32)
 (result (ref null $switchstatement.Numbers))
 (block $return.label
  ;;@ switchstatement/SwitchStatement.java:18:5
  (block
   ;; (Enum.this.name = $name);
   ;;@ switchstatement/SwitchStatement.java:18:5
   (struct.set $java.lang.Enum $f_name__java_lang_Enum_(local.get $this) (local.get $$name))
   ;; (Enum.this.ordinal = $ordinal);
   ;;@ switchstatement/SwitchStatement.java:18:5
   (struct.set $java.lang.Enum $f_ordinal__java_lang_Enum_(local.get $this) (local.get $$ordinal))
   ;; Enum.this.Enum.<init>($name,$ordinal);
   ;;@ switchstatement/SwitchStatement.java:18:5
   (drop (call $m_<init>__java_lang_String__int__void@java.lang.Enum (local.get $this)(local.get $$name)(local.get $$ordinal)))
  )
 )
 (local.get $this)
)

;;; Numbers Numbers.valueOf(String name)
(func $m_valueOf__java_lang_String__switchstatement_Numbers@switchstatement.Numbers
 (param $name (ref null $java.lang.String))
 (result (ref null $switchstatement.Numbers))
 (local $return.value (ref null $switchstatement.Numbers))
 (block $return.label
  ;;@ switchstatement/SwitchStatement.java:18:5
  (block
   ;; switchstatement.Numbers.$clinit();
   ;;@ switchstatement/SwitchStatement.java:18:5
   (call $$clinit__void@switchstatement.Numbers )
   ;; if (javaemul.internal.Platform.isNull(switchstatement.Numbers.namesToValuesMap)) {
   ;;@ switchstatement/SwitchStatement.java:18:5
   (if (ref.is_null (global.get $f_namesToValuesMap__switchstatement_Numbers_))
    (then
     ;;@ switchstatement/SwitchStatement.java:18:5
     (block
      ;; (switchstatement.Numbers.namesToValuesMap = javaemul.internal.Enums.createMapFromValues(switchstatement.Numbers.values()));
      ;;@ switchstatement/SwitchStatement.java:18:5
      (global.set $f_namesToValuesMap__switchstatement_Numbers_ (call $m_createMapFromValues__arrayOf_java_lang_Enum__java_util_Map@javaemul.internal.Enums (call $m_values__arrayOf_switchstatement_Numbers@switchstatement.Numbers )))
     )
    )
   )
   ;; return ((Numbers) javaemul.internal.Enums.getValueFromNameAndMap(name,switchstatement.Numbers.namesToValuesMap));
   ;;@ switchstatement/SwitchStatement.java:18:5
   (local.set $return.value (ref.cast (call $m_getValueFromNameAndMap__java_lang_String__java_util_Map__java_lang_Object@javaemul.internal.Enums (local.get $name)(global.get $f_namesToValuesMap__switchstatement_Numbers_)) (global.get $switchstatement.Numbers.rtt)))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; Numbers[] Numbers.values()
(func $m_values__arrayOf_switchstatement_Numbers@switchstatement.Numbers
 (result (ref null $javaemul.internal.WasmArray.OfObject))
 (local $return.value (ref null $javaemul.internal.WasmArray.OfObject))
 (local $$array_literal (ref null $javaemul.internal.WasmArray.OfObject))
 (block $return.label
  ;;@ switchstatement/SwitchStatement.java:18:5
  (block
   ;; switchstatement.Numbers.$clinit();
   ;;@ switchstatement/SwitchStatement.java:18:5
   (call $$clinit__void@switchstatement.Numbers )
   ;; return (Numbers[] $array_literal = new OfObject.<init>(2),($array_literal.elements[0] = (switchstatement.Numbers.$clinit(),switchstatement.Numbers.ONE)),($array_literal.elements[1] = (switchstatement.Numbers.$clinit(),switchstatement.Numbers.TWO)),$array_literal);
   ;;@ switchstatement/SwitchStatement.java:18:5
   (local.set $return.value (block (result (ref null $javaemul.internal.WasmArray.OfObject))
    
    (local.set $$array_literal (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfObject (struct.new_with_rtt $javaemul.internal.WasmArray.OfObject (ref.as_non_null (global.get $javaemul.internal.WasmArray.OfObject.vtable)) (ref.as_non_null (global.get $javaemul.internal.WasmArray.OfObject.itable)) (i32.const 0) (i32.const 0) (ref.null $java.lang.Object.array) (global.get $javaemul.internal.WasmArray.OfObject.rtt))(i32.const 2)))
    (array.set $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $$array_literal)) (i32.const 0) (block (result (ref null $switchstatement.Numbers))
     (call $$clinit__void@switchstatement.Numbers )
     (global.get $f_ONE__switchstatement_Numbers)
    ))
    (array.set $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $$array_literal)) (i32.const 1) (block (result (ref null $switchstatement.Numbers))
     (call $$clinit__void@switchstatement.Numbers )
     (global.get $f_TWO__switchstatement_Numbers)
    ))
    (local.get $$array_literal)
   ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; void Numbers.$clinit()
(func $$clinit__void@switchstatement.Numbers
 (block $return.label
  ;;@ switchstatement/SwitchStatement.java:18:5
  (block
   ;; if (switchstatement.Numbers.$initialized) return;
   ;;@ switchstatement/SwitchStatement.java:18:5
   (if (global.get $f_$initialized__switchstatement_Numbers)
    (then
     ;; return;
     ;;@ switchstatement/SwitchStatement.java:18:5
     (br $return.label)
    )
   )
   ;; (switchstatement.Numbers.$initialized = true);
   ;;@ switchstatement/SwitchStatement.java:18:5
   (global.set $f_$initialized__switchstatement_Numbers (i32.const 1))
   ;; java.lang.Enum.$clinit();
   ;;@ switchstatement/SwitchStatement.java:18:5
   (call $$clinit__void@java.lang.Enum )
   ;;@ switchstatement/SwitchStatement.java:19:2
   (block
    ;; switchstatement.Numbers.$clinit();
    ;;@ switchstatement/SwitchStatement.java:19:2
    (call $$clinit__void@switchstatement.Numbers )
    ;; (switchstatement.Numbers.ONE = new Numbers.<init>(javaemul.internal.StringPool.$getString_|ONE|(),switchstatement.Numbers.ONE));
    ;;@ switchstatement/SwitchStatement.java:19:2
    (global.set $f_ONE__switchstatement_Numbers (call $m_<init>__java_lang_String__int__void_$p_switchstatement_Numbers@switchstatement.Numbers (struct.new_with_rtt $switchstatement.Numbers (ref.as_non_null (global.get $switchstatement.Numbers.vtable)) (ref.as_non_null (global.get $switchstatement.Numbers.itable)) (i32.const 0) (ref.null $java.lang.String) (i32.const 0) (global.get $switchstatement.Numbers.rtt))(call $$getString_|ONE|__java_lang_String@javaemul.internal.StringPool )(global.get $$ordinal_ONE__switchstatement_Numbers)))
   )
   ;;@ switchstatement/SwitchStatement.java:20:2
   (block
    ;; switchstatement.Numbers.$clinit();
    ;;@ switchstatement/SwitchStatement.java:20:2
    (call $$clinit__void@switchstatement.Numbers )
    ;; (switchstatement.Numbers.TWO = new Numbers.<init>(javaemul.internal.StringPool.$getString_|TWO|(),switchstatement.Numbers.TWO));
    ;;@ switchstatement/SwitchStatement.java:20:2
    (global.set $f_TWO__switchstatement_Numbers (call $m_<init>__java_lang_String__int__void_$p_switchstatement_Numbers@switchstatement.Numbers (struct.new_with_rtt $switchstatement.Numbers (ref.as_non_null (global.get $switchstatement.Numbers.vtable)) (ref.as_non_null (global.get $switchstatement.Numbers.itable)) (i32.const 0) (ref.null $java.lang.String) (i32.const 0) (global.get $switchstatement.Numbers.rtt))(call $$getString_|TWO|__java_lang_String@javaemul.internal.StringPool )(global.get $$ordinal_TWO__switchstatement_Numbers)))
   )
   ;; (switchstatement.Numbers.namesToValuesMap = null);
   ;;@ switchstatement/SwitchStatement.java:18:5
   (global.set $f_namesToValuesMap__switchstatement_Numbers_ (ref.null $java.lang.Object))
  )
 )
)

;;; Class<?> Numbers.getClass()
(func $m_getClass__java_lang_Class@switchstatement.Numbers
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $switchstatement.Numbers))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $switchstatement.Numbers.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getSwitchstatement.Numbers();
   (local.set $return.value (call $$getSwitchstatement.Numbers__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@switchstatement.Numbers)

;;; Code for switchstatement.SwitchStatement [CLASS]
(type $switchstatement.SwitchStatement (struct
 (field $vtable (ref $switchstatement.SwitchStatement.vtable)) (field $itable (ref $itable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $switchstatement.SwitchStatement.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_main__void (mut (ref $function.__$void)))
))

;;; SwitchStatement()
(func $m_<init>__void@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (result (ref null $switchstatement.SwitchStatement))
 (block $return.label
  ;;@ switchstatement/SwitchStatement.java:23:13
  (block
   ;; switchstatement.SwitchStatement.$clinit();
   ;;@ switchstatement/SwitchStatement.java:23:13
   (call $$clinit__void@switchstatement.SwitchStatement )
   ;; Object.this.Object.<init>();
   ;;@ switchstatement/SwitchStatement.java:23:13
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void SwitchStatement.main()
(func $m_main__void@switchstatement.SwitchStatement
 (param $this.untyped (ref null $java.lang.Object))
 (local $$expression (ref null $java.lang.Object))
 (local $$expression_1 i32)
 (local $$qualifier (ref null $switchstatement.Numbers))
 (local $this (ref null $switchstatement.SwitchStatement))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $switchstatement.SwitchStatement.rtt)))
 (block $return.label
  ;;@ switchstatement/SwitchStatement.java:24:14
  (block
   ;; SWITCH: {
   ;;@ switchstatement/SwitchStatement.java:26:4
   (block $SWITCH.BREAK
    (block
     ;; T $expression = javaemul.internal.InternalPreconditions.checkNotNull(javaemul.internal.StringPool.$getString_|one|());
     ;;@ switchstatement/SwitchStatement.java:26:4
     
     (local.set $$expression (call $m_checkNotNull__java_lang_Object__java_lang_Object@javaemul.internal.InternalPreconditions (call $$getString_|one|__java_lang_String@javaemul.internal.StringPool )))
     ;; switch ($expression) {
     ;;@ switchstatement/SwitchStatement.java:26:4
     
     (block
      (block
       (block
        (block ;; evaluate expression and jump
         (br_if 0 (ref.eq (local.get $$expression) (call $$getString_|one|__java_lang_String@javaemul.internal.StringPool )))
         (br_if 1 (ref.eq (local.get $$expression) (call $$getString_|two|__java_lang_String@javaemul.internal.StringPool )))
         (br 2)
        )
        ;; case javaemul.internal.StringPool.$getString_|one|():
       )
       ;; case javaemul.internal.StringPool.$getString_|two|():
       ;; break SWITCH;
       ;;@ switchstatement/SwitchStatement.java:29:8
       (br $SWITCH.BREAK)
      )
      ;; default:
      ;; return;
      ;;@ switchstatement/SwitchStatement.java:31:8
      (br $return.label)
     )
    )
   )
   ;; SWITCH: switch (49) {
   ;;@ switchstatement/SwitchStatement.java:35:4
   (block $SWITCH_1.BREAK
    ;; switch (49) {
    ;;@ switchstatement/SwitchStatement.java:35:4
    
    (block
     (block
      (block
       (block ;; evaluate expression and jump
        (br_if 0 (i32.eq (i32.const 49) (i32.const 49)))
        (br_if 1 (i32.eq (i32.const 49) (i32.const 50)))
        (br 2)
       )
       ;; case 49:
      )
      ;; case 50:
      ;; break SWITCH;
      ;;@ switchstatement/SwitchStatement.java:38:8
      (br $SWITCH_1.BREAK)
     )
     ;; default:
     ;; return;
     ;;@ switchstatement/SwitchStatement.java:40:8
     (br $return.label)
    )
   )
   ;; SWITCH: switch (1) {
   ;;@ switchstatement/SwitchStatement.java:44:4
   (block $SWITCH_2.BREAK
    ;; switch (1) {
    ;;@ switchstatement/SwitchStatement.java:44:4
    
    (block
     (block
      (block
       (block ;; evaluate expression and jump
        (br_if 0 (i32.eq (i32.const 1) (i32.const 1)))
        (br_if 1 (i32.eq (i32.const 1) (i32.const 2)))
        (br 2)
       )
       ;; case 1:
      )
      ;; case 2:
      ;; break SWITCH;
      ;;@ switchstatement/SwitchStatement.java:47:8
      (br $SWITCH_2.BREAK)
     )
     ;; default:
     ;; return;
     ;;@ switchstatement/SwitchStatement.java:49:8
     (br $return.label)
    )
   )
   ;; SWITCH: {
   ;;@ switchstatement/SwitchStatement.java:53:4
   (block $SWITCH_3.BREAK
    (block
     ;; int $expression = (Numbers $qualifier = (switchstatement.Numbers.$clinit(),switchstatement.Numbers.ONE),$qualifier.ordinal());
     ;;@ switchstatement/SwitchStatement.java:53:4
     
     (local.set $$expression_1 (block (result i32)
      
      (local.set $$qualifier (block (result (ref null $switchstatement.Numbers))
       (call $$clinit__void@switchstatement.Numbers )
       (global.get $f_ONE__switchstatement_Numbers)
      ))
      (call_ref (local.get $$qualifier)(struct.get $java.lang.Enum.vtable $m_ordinal__int (struct.get $java.lang.Enum $vtable(local.get $$qualifier))))
     ))
     ;; switch ($expression) {
     ;;@ switchstatement/SwitchStatement.java:53:4
     
     (block
      (block
       (block
        (block ;; evaluate expression and jump
         (br_if 0 (i32.eq (local.get $$expression_1) (global.get $$ordinal_ONE__switchstatement_Numbers)))
         (br_if 1 (i32.eq (local.get $$expression_1) (global.get $$ordinal_TWO__switchstatement_Numbers)))
         (br 2)
        )
        ;; case switchstatement.Numbers.ONE:
       )
       ;; case switchstatement.Numbers.TWO:
       ;; break SWITCH;
       ;;@ switchstatement/SwitchStatement.java:56:8
       (br $SWITCH_3.BREAK)
      )
      ;; default:
      ;; return;
      ;;@ switchstatement/SwitchStatement.java:58:8
      (br $return.label)
     )
    )
   )
  )
 )
)
(elem declare func $m_main__void@switchstatement.SwitchStatement)

;;; void SwitchStatement.testSwitchVariableDeclarations()
(func $m_testSwitchVariableDeclarations__void@switchstatement.SwitchStatement
 (local $unassigned i32)
 (local $unassigned2 i32)
 (local $i i32)
 (local $j i32)
 (local $b i32)
 (local $i_1 i32)
 (block $return.label
  ;;@ switchstatement/SwitchStatement.java:63:22
  (block
   ;; SWITCH: switch (3) {
   ;;@ switchstatement/SwitchStatement.java:64:4
   (block $SWITCH.BREAK
    ;; switch (3) {
    ;;@ switchstatement/SwitchStatement.java:64:4
    
    (block
     (block
      (block ;; evaluate expression and jump
       (br_if 0 (i32.eq (i32.const 3) (i32.const 1)))
       (br_if 1 (i32.eq (i32.const 3) (i32.const 3)))
       (br 2)
      )
      ;; case 1:
      ;; int unassigned,int unassigned2;
      ;;@ switchstatement/SwitchStatement.java:66:8
      
      ;; int i = 0;
      ;;@ switchstatement/SwitchStatement.java:67:8
      
      (local.set $i (i32.const 0))
      ;; int j = 2,int b = (j + 1);
      ;;@ switchstatement/SwitchStatement.java:68:8
      
      (local.set $j (i32.const 2))
      (local.set $b (i32.add (local.get $j) (i32.const 1)))
      ;; break SWITCH;
      ;;@ switchstatement/SwitchStatement.java:69:8
      (br $SWITCH.BREAK)
     )
     ;; case 3:
     ;; (i = 3);
     ;;@ switchstatement/SwitchStatement.java:71:8
     (local.set $i (i32.const 3))
     ;; return;
     ;;@ switchstatement/SwitchStatement.java:73:8
     (br $return.label)
    )
   )
   ;; SWITCH: switch (5) {
   ;;@ switchstatement/SwitchStatement.java:76:4
   (block $SWITCH_1.BREAK
    ;; switch (5) {
    ;;@ switchstatement/SwitchStatement.java:76:4
    
    (block
     (block ;; evaluate expression and jump
      (br_if 0 (i32.eq (i32.const 5) (i32.const 5)))
      (br 1)
     )
     ;; case 5:
     ;; int i = 1;
     ;;@ switchstatement/SwitchStatement.java:78:8
     
     (local.set $i_1 (i32.const 1))
     ;; break SWITCH;
     ;;@ switchstatement/SwitchStatement.java:79:8
     (br $SWITCH_1.BREAK)
    )
   )
  )
 )
)

;;; void SwitchStatement.$clinit()
(func $$clinit__void@switchstatement.SwitchStatement
 (block $return.label
  ;;@ switchstatement/SwitchStatement.java:23:13
  (block
   ;; if (switchstatement.SwitchStatement.$initialized) return;
   ;;@ switchstatement/SwitchStatement.java:23:13
   (if (global.get $f_$initialized__switchstatement_SwitchStatement)
    (then
     ;; return;
     ;;@ switchstatement/SwitchStatement.java:23:13
     (br $return.label)
    )
   )
   ;; (switchstatement.SwitchStatement.$initialized = true);
   ;;@ switchstatement/SwitchStatement.java:23:13
   (global.set $f_$initialized__switchstatement_SwitchStatement (i32.const 1))
   ;; java.lang.Object.$clinit();
   ;;@ switchstatement/SwitchStatement.java:23:13
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> SwitchStatement.getClass()
(func $m_getClass__java_lang_Class@switchstatement.SwitchStatement
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $switchstatement.SwitchStatement))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $switchstatement.SwitchStatement.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getSwitchstatement.SwitchStatement();
   (local.set $return.value (call $$getSwitchstatement.SwitchStatement__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@switchstatement.SwitchStatement)

 ;;; Code for switchstatement.Numbers [vtable.init]
 (global.set $switchstatement.Numbers.vtable
  (struct.new_with_rtt $switchstatement.Numbers.vtable
   (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object)
   (ref.func $m_hashCode__int@java.lang.Object)
   (ref.func $m_toString__java_lang_String@java.lang.Enum)
   (ref.func $m_getClass__java_lang_Class@switchstatement.Numbers)
   (ref.func $m_getDeclaringClass__java_lang_Class@java.lang.Enum)
   (ref.func $m_name__java_lang_String@java.lang.Enum)
   (ref.func $m_ordinal__int@java.lang.Enum)
   (ref.func $m_compareTo__java_lang_Enum__int@java.lang.Enum)
   (ref.func $m_compareTo__java_lang_Object__int@java.lang.Enum)
   (rtt.canon $switchstatement.Numbers.vtable)
  )
 )

 ;;; Code for switchstatement.Numbers [itable.init]
 (global.set $switchstatement.Numbers.itable (array.new_default_with_rtt $itable (i32.const 2) (rtt.canon $itable)))
 (array.set $itable (global.get $switchstatement.Numbers.itable) (i32.const 1)
 (struct.new_with_rtt $java.lang.Comparable.vtable
  (ref.func $m_compareTo__java_lang_Object__int@java.lang.Enum)
  (rtt.canon $java.lang.Comparable.vtable)
 ))
 (array.set $itable (global.get $switchstatement.Numbers.itable) (i32.const 0)
 (struct.new_with_rtt $java.io.Serializable.vtable
  (rtt.canon $java.io.Serializable.vtable)
 ))

 ;;; Code for switchstatement.SwitchStatement [vtable.init]
 (global.set $switchstatement.SwitchStatement.vtable
  (struct.new_with_rtt $switchstatement.SwitchStatement.vtable
   (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object)
   (ref.func $m_hashCode__int@java.lang.Object)
   (ref.func $m_toString__java_lang_String@java.lang.Object)
   (ref.func $m_getClass__java_lang_Class@switchstatement.SwitchStatement)
   (ref.func $m_main__void@switchstatement.SwitchStatement)
   (rtt.canon $switchstatement.SwitchStatement.vtable)
  )
 )

 ;;; Code for switchstatement.SwitchStatement [itable.init]
 (global.set $switchstatement.SwitchStatement.itable (array.new_default_with_rtt $itable (i32.const 0) (rtt.canon $itable)))
