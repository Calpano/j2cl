;;; Code for switchstatement.Numbers [static fields]
(global $f_ONE__switchstatement_Numbers (mut (ref null $switchstatement.Numbers)) (ref.null $switchstatement.Numbers))
(global $f_TWO__switchstatement_Numbers (mut (ref null $switchstatement.Numbers)) (ref.null $switchstatement.Numbers))
(global $f_namesToValuesMap__switchstatement_Numbers_ (mut (ref null $java.lang.Object)) (ref.null $java.lang.Object))
(global $f_$initialized__switchstatement_Numbers (mut i32) (i32.const 0))

;;; Code for switchstatement.SwitchStatement [static fields]
(global $f_$initialized__switchstatement_SwitchStatement (mut i32) (i32.const 0))

;;; Code for switchstatement.Numbers [vtable.init]
(global $switchstatement.Numbers.vtable (ref $switchstatement.Numbers.vtable) 
 (struct.new $switchstatement.Numbers.vtable
  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object)
  (ref.func $m_hashCode__int@java.lang.Object)
  (ref.func $m_toString__java_lang_String@java.lang.Enum)
  (ref.func $m_getClass__java_lang_Class@switchstatement.Numbers)
  (ref.func $m_getDeclaringClass__java_lang_Class@java.lang.Enum)
  (ref.func $m_name__java_lang_String@java.lang.Enum)
  (ref.func $m_ordinal__int@java.lang.Enum)
  (ref.func $m_compareTo__java_lang_Enum__int@java.lang.Enum)
  (ref.func $m_compareTo__java_lang_Object__int@java.lang.Enum)
 )
)

;;; Code for switchstatement.Numbers [itable.init]
(global $switchstatement.Numbers.itable (ref $itable) (array.init_static $itable 
 (struct.new $java.io.Serializable.vtable
 )
 (struct.new $java.lang.Comparable.vtable
  (ref.func $m_compareTo__java_lang_Object__int@java.lang.Enum)
 )
 ))

;;; Code for switchstatement.SwitchStatement [vtable.init]
(global $switchstatement.SwitchStatement.vtable (ref $switchstatement.SwitchStatement.vtable) 
 (struct.new $switchstatement.SwitchStatement.vtable
  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object)
  (ref.func $m_hashCode__int@java.lang.Object)
  (ref.func $m_toString__java_lang_String@java.lang.Object)
  (ref.func $m_getClass__java_lang_Class@switchstatement.SwitchStatement)
  (ref.func $m_main__void@switchstatement.SwitchStatement)
 )
)

;;; Code for switchstatement.SwitchStatement [itable.init]
(global $switchstatement.SwitchStatement.itable (ref $itable) (array.init_static $itable 
 ))

;;; Code for switchstatement.Numbers [ENUM]
(type $switchstatement.Numbers (struct_subtype 
 (field $vtable (ref $switchstatement.Numbers.vtable)) 
 (field $itable (ref $itable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $f_name__java_lang_Enum_ (mut (ref null $java.lang.String)))
 (field $f_ordinal__java_lang_Enum_ (mut i32))
  $java.lang.Enum)
)
(type $switchstatement.Numbers.vtable (struct_subtype 
 (field $m_equals__java_lang_Object__boolean (ref $function.m_equals__java_lang_Object__boolean))
 (field $m_hashCode__int (ref $function.m_hashCode__int))
 (field $m_toString__java_lang_String (ref $function.m_toString__java_lang_String))
 (field $m_getClass__java_lang_Class (ref $function.m_getClass__java_lang_Class))
 (field $m_getDeclaringClass__java_lang_Class (ref $function.m_getDeclaringClass__java_lang_Class))
 (field $m_name__java_lang_String (ref $function.m_name__java_lang_String))
 (field $m_ordinal__int (ref $function.m_ordinal__int))
 (field $m_compareTo__java_lang_Enum__int (ref $function.m_compareTo__java_lang_Enum__int))
 (field $m_compareTo__java_lang_Object__int (ref $function.m_compareTo__java_lang_Object__int))
  $java.lang.Enum.vtable)
)

;;; Numbers Numbers.$create(String $name, int $ordinal)
(func $$create__java_lang_String__int@switchstatement.Numbers
 (param $$name (ref null $java.lang.String))
 (param $$ordinal i32)
 (result (ref null $switchstatement.Numbers))
 ;;@ switchstatement/SwitchStatement.java:18:5
 (local $$instance (ref null $switchstatement.Numbers))
 (block
  ;; Numbers $instance = new Numbers.<init>(0,null,0);
  ;;@ switchstatement/SwitchStatement.java:18:5
  (local.set $$instance (struct.new $switchstatement.Numbers (ref.as_non_null (global.get $switchstatement.Numbers.vtable)) (ref.as_non_null (global.get $switchstatement.Numbers.itable)) (i32.const 0) (ref.null $java.lang.String) (i32.const 0)))
  ;; $instance.$ctor($name,$ordinal);
  ;;@ switchstatement/SwitchStatement.java:18:5
  (call $$ctor__java_lang_String__int__void_$p_switchstatement_Numbers@switchstatement.Numbers (ref.as_non_null (local.get $$instance))(local.get $$name)(local.get $$ordinal))
  ;; return $instance;
  ;;@ switchstatement/SwitchStatement.java:18:5
  (return (local.get $$instance))
 )
)

;;; void Numbers.$ctor(String $name, int $ordinal)
(func $$ctor__java_lang_String__int__void_$p_switchstatement_Numbers@switchstatement.Numbers
 (param $this (ref null $switchstatement.Numbers))
 (param $$name (ref null $java.lang.String))
 (param $$ordinal i32)
 ;;@ switchstatement/SwitchStatement.java:18:5
 (block
  ;; (Enum.this.name = $name);
  ;;@ switchstatement/SwitchStatement.java:18:5
  (struct.set $java.lang.Enum $f_name__java_lang_Enum_(local.get $this) (local.get $$name))
  ;; (Enum.this.ordinal = $ordinal);
  ;;@ switchstatement/SwitchStatement.java:18:5
  (struct.set $java.lang.Enum $f_ordinal__java_lang_Enum_(local.get $this) (local.get $$ordinal))
  ;; Enum.this.$ctor($name,$ordinal);
  ;;@ switchstatement/SwitchStatement.java:18:5
  (call $$ctor__java_lang_String__int__void_$p_java_lang_Enum@java.lang.Enum (ref.as_non_null (local.get $this))(local.get $$name)(local.get $$ordinal))
 )
)

;;; Numbers Numbers.valueOf(String name)
(func $m_valueOf__java_lang_String__switchstatement_Numbers@switchstatement.Numbers
 (param $name (ref null $java.lang.String))
 (result (ref null $switchstatement.Numbers))
 ;;@ switchstatement/SwitchStatement.java:18:5
 (block
  ;; switchstatement.Numbers.$clinit();
  ;;@ switchstatement/SwitchStatement.java:18:5
  (call $$clinit__void@switchstatement.Numbers )
  ;; if (javaemul.internal.Platform.isNull(switchstatement.Numbers.namesToValuesMap)) {
  ;;@ switchstatement/SwitchStatement.java:18:5
  (if (ref.is_null (global.get $f_namesToValuesMap__switchstatement_Numbers_))
   (then
    (block
     ;; (switchstatement.Numbers.namesToValuesMap = javaemul.internal.Enums.createMapFromValues(switchstatement.Numbers.values()));
     ;;@ switchstatement/SwitchStatement.java:18:5
     (global.set $f_namesToValuesMap__switchstatement_Numbers_ (call $m_createMapFromValues__arrayOf_java_lang_Enum__java_util_Map@javaemul.internal.Enums (call $m_values__arrayOf_switchstatement_Numbers@switchstatement.Numbers )))
    )
   )
  )
  ;; return ((Numbers) javaemul.internal.Enums.getValueFromNameAndMap(name,switchstatement.Numbers.namesToValuesMap));
  ;;@ switchstatement/SwitchStatement.java:18:5
  (return (ref.cast_static $switchstatement.Numbers (call $m_getValueFromNameAndMap__java_lang_String__java_util_Map__java_lang_Object@javaemul.internal.Enums (local.get $name)(global.get $f_namesToValuesMap__switchstatement_Numbers_))))
 )
)

;;; Numbers[] Numbers.values()
(func $m_values__arrayOf_switchstatement_Numbers@switchstatement.Numbers
 (result (ref null $javaemul.internal.WasmArray.OfObject))
 ;;@ switchstatement/SwitchStatement.java:18:5
 (block
  ;; switchstatement.Numbers.$clinit();
  ;;@ switchstatement/SwitchStatement.java:18:5
  (call $$clinit__void@switchstatement.Numbers )
  ;; return javaemul.internal.WasmArray.OfObject.$create([switchstatement.Numbers.ONE,switchstatement.Numbers.TWO]);
  ;;@ switchstatement/SwitchStatement.java:18:5
  (return (call $$create__arrayOf_java_lang_Object@javaemul.internal.WasmArray.OfObject (array.init_static $java.lang.Object.array (global.get $f_ONE__switchstatement_Numbers)(global.get $f_TWO__switchstatement_Numbers))))
 )
)

;;; void Numbers.$clinit()
(func $$clinit__void@switchstatement.Numbers
 ;;@ switchstatement/SwitchStatement.java:18:5
 (block
  ;; if (switchstatement.Numbers.$initialized) return;
  ;;@ switchstatement/SwitchStatement.java:18:5
  (if (global.get $f_$initialized__switchstatement_Numbers)
   (then
    ;; return;
    ;;@ switchstatement/SwitchStatement.java:18:5
    (return )
   )
  )
  ;; (switchstatement.Numbers.$initialized = true);
  ;;@ switchstatement/SwitchStatement.java:18:5
  (global.set $f_$initialized__switchstatement_Numbers (i32.const 1))
  ;; java.lang.Enum.$clinit();
  ;;@ switchstatement/SwitchStatement.java:18:5
  (call $$clinit__void@java.lang.Enum )
  ;; (switchstatement.Numbers.ONE = switchstatement.Numbers.$create(javaemul.internal.StringPool.$getString_|ONE|(),0));
  ;;@ switchstatement/SwitchStatement.java:19:2
  (global.set $f_ONE__switchstatement_Numbers (call $$create__java_lang_String__int@switchstatement.Numbers (call $function.no.side.effects.$getString_|ONE|__java_lang_String (ref.func $$getString_|ONE|__java_lang_String@javaemul.internal.StringPool) )(i32.const 0)))
  ;; (switchstatement.Numbers.TWO = switchstatement.Numbers.$create(javaemul.internal.StringPool.$getString_|TWO|(),1));
  ;;@ switchstatement/SwitchStatement.java:20:2
  (global.set $f_TWO__switchstatement_Numbers (call $$create__java_lang_String__int@switchstatement.Numbers (call $function.no.side.effects.$getString_|TWO|__java_lang_String (ref.func $$getString_|TWO|__java_lang_String@javaemul.internal.StringPool) )(i32.const 1)))
 )
)

;;; Class<?> Numbers.getClass()
(func $m_getClass__java_lang_Class@switchstatement.Numbers
 (type $function.m_getClass__java_lang_Class)
 (param $this.untyped (ref $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $this (ref null $switchstatement.Numbers))
 (local.set $this (ref.cast_static $switchstatement.Numbers (local.get $this.untyped)))
 (block
  ;; return javaemul.internal.ClassLiteralPool.$getSwitchstatement.Numbers();
  (return (call $function.no.side.effects.$getSwitchstatement.Numbers__java_lang_Class (ref.func $$getSwitchstatement.Numbers__java_lang_Class@javaemul.internal.ClassLiteralPool) ))
 )
)
(elem declare func $m_getClass__java_lang_Class@switchstatement.Numbers)

;;; Code for switchstatement.SwitchStatement [CLASS]
(type $switchstatement.SwitchStatement (struct_subtype 
 (field $vtable (ref $switchstatement.SwitchStatement.vtable)) 
 (field $itable (ref $itable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
  $java.lang.Object)
)
(type $switchstatement.SwitchStatement.vtable (struct_subtype 
 (field $m_equals__java_lang_Object__boolean (ref $function.m_equals__java_lang_Object__boolean))
 (field $m_hashCode__int (ref $function.m_hashCode__int))
 (field $m_toString__java_lang_String (ref $function.m_toString__java_lang_String))
 (field $m_getClass__java_lang_Class (ref $function.m_getClass__java_lang_Class))
 (field $m_main__void (ref $function.m_main__void))
  $java.lang.Object.vtable)
)

;;; SwitchStatement SwitchStatement.$create()
(func $$create__@switchstatement.SwitchStatement
 (result (ref null $switchstatement.SwitchStatement))
 ;;@ switchstatement/SwitchStatement.java:23:13
 (local $$instance (ref null $switchstatement.SwitchStatement))
 (block
  ;; SwitchStatement $instance = new SwitchStatement.<init>(0);
  ;;@ switchstatement/SwitchStatement.java:23:13
  (local.set $$instance (struct.new $switchstatement.SwitchStatement (ref.as_non_null (global.get $switchstatement.SwitchStatement.vtable)) (ref.as_non_null (global.get $switchstatement.SwitchStatement.itable)) (i32.const 0)))
  ;; $instance.$ctor();
  ;;@ switchstatement/SwitchStatement.java:23:13
  (call $$ctor__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $$instance)))
  ;; return $instance;
  ;;@ switchstatement/SwitchStatement.java:23:13
  (return (local.get $$instance))
 )
)

;;; void SwitchStatement.$ctor()
(func $$ctor__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 ;;@ switchstatement/SwitchStatement.java:23:13
 (block
  ;; switchstatement.SwitchStatement.$clinit();
  ;;@ switchstatement/SwitchStatement.java:23:13
  (call $$clinit__void@switchstatement.SwitchStatement )
  ;; Object.this.$ctor();
  ;;@ switchstatement/SwitchStatement.java:23:13
  (call $$ctor__void_$p_java_lang_Object@java.lang.Object (ref.as_non_null (local.get $this)))
 )
)

;;; void SwitchStatement.main()
(func $m_main__void@switchstatement.SwitchStatement
 (type $function.m_main__void)
 (param $this.untyped (ref $java.lang.Object))
 ;;@ switchstatement/SwitchStatement.java:24:14
 (local $$expression (ref null $java.lang.Object))
 (local $$expression_1 i32)
 (local $$qualifier (ref null $switchstatement.Numbers))
 (local $this (ref null $switchstatement.SwitchStatement))
 (local.set $this (ref.cast_static $switchstatement.SwitchStatement (local.get $this.untyped)))
 (block
  ;; SWITCH: {
  ;;@ switchstatement/SwitchStatement.java:26:4
  (block $SWITCH.BREAK
   (block
    ;; T $expression = javaemul.internal.InternalPreconditions.checkNotNull(javaemul.internal.StringPool.$getString_|one|());
    ;;@ switchstatement/SwitchStatement.java:26:4
    (local.set $$expression (call $m_checkNotNull__java_lang_Object__java_lang_Object@javaemul.internal.InternalPreconditions (call $function.no.side.effects.$getString_|one|__java_lang_String (ref.func $$getString_|one|__java_lang_String@javaemul.internal.StringPool) )))
    ;; switch ($expression) {
    ;;@ switchstatement/SwitchStatement.java:26:4
    (block
     (block
      (block
       (block ;; evaluate expression and jump
        (br_if 0 (ref.eq (local.get $$expression) (call $function.no.side.effects.$getString_|one|__java_lang_String (ref.func $$getString_|one|__java_lang_String@javaemul.internal.StringPool) )))
        (br_if 1 (ref.eq (local.get $$expression) (call $function.no.side.effects.$getString_|two|__java_lang_String (ref.func $$getString_|two|__java_lang_String@javaemul.internal.StringPool) )))
        (br 2)
       )
       ;; case javaemul.internal.StringPool.$getString_|one|():
      )
      ;; case javaemul.internal.StringPool.$getString_|two|():
      ;; break SWITCH;
      ;;@ switchstatement/SwitchStatement.java:29:8
      (br $SWITCH.BREAK)
     )
     ;; default:
     ;; return;
     ;;@ switchstatement/SwitchStatement.java:31:8
     (return )
    )
   )
  )
  ;; SWITCH: switch (49) {
  ;;@ switchstatement/SwitchStatement.java:35:4
  (block $SWITCH_1.BREAK
   ;; switch (49) {
   ;;@ switchstatement/SwitchStatement.java:35:4
   (block
    (block
     (block
      (block ;; evaluate expression and jump
       (br_table 0 1 2 (i32.sub (i32.const 49) (i32.const 49)))
      )
      ;; case 49:
     )
     ;; case 50:
     ;; break SWITCH;
     ;;@ switchstatement/SwitchStatement.java:38:8
     (br $SWITCH_1.BREAK)
    )
    ;; default:
    ;; return;
    ;;@ switchstatement/SwitchStatement.java:40:8
    (return )
   )
  )
  ;; SWITCH: switch (1) {
  ;;@ switchstatement/SwitchStatement.java:44:4
  (block $SWITCH_2.BREAK
   ;; switch (1) {
   ;;@ switchstatement/SwitchStatement.java:44:4
   (block
    (block
     (block
      (block
       (block ;; evaluate expression and jump
        (br_table 0 3 3 1 2 3 (i32.sub (i32.const 1) (i32.const -2)))
       )
       ;; case -2:
      )
      ;; case 1:
     )
     ;; case 2:
     ;; break SWITCH;
     ;;@ switchstatement/SwitchStatement.java:48:8
     (br $SWITCH_2.BREAK)
    )
    ;; default:
    ;; return;
    ;;@ switchstatement/SwitchStatement.java:50:8
    (return )
   )
  )
  ;; SWITCH: {
  ;;@ switchstatement/SwitchStatement.java:54:4
  (block $SWITCH_3.BREAK
   (block
    ;; int $expression = (Numbers $qualifier = (switchstatement.Numbers.$clinit(),switchstatement.Numbers.ONE),$qualifier.ordinal());
    ;;@ switchstatement/SwitchStatement.java:54:4
    (local.set $$expression_1 (block (result i32)
     (local.set $$qualifier (block (result (ref null $switchstatement.Numbers))
      (call $$clinit__void@switchstatement.Numbers )
      (global.get $f_ONE__switchstatement_Numbers)
     ))
     (call_ref $function.m_ordinal__int (ref.as_non_null (local.get $$qualifier))(struct.get $java.lang.Enum.vtable $m_ordinal__int (struct.get $java.lang.Enum $vtable(local.get $$qualifier))))
    ))
    ;; switch ($expression) {
    ;;@ switchstatement/SwitchStatement.java:54:4
    (block
     (block
      (block
       (block ;; evaluate expression and jump
        (br_table 0 1 2 (local.get $$expression_1))
       )
       ;; case 0:
      )
      ;; case 1:
      ;; break SWITCH;
      ;;@ switchstatement/SwitchStatement.java:57:8
      (br $SWITCH_3.BREAK)
     )
     ;; default:
     ;; return;
     ;;@ switchstatement/SwitchStatement.java:59:8
     (return )
    )
   )
  )
 )
)
(elem declare func $m_main__void@switchstatement.SwitchStatement)

;;; void SwitchStatement.testSwitchVariableDeclarations()
(func $m_testSwitchVariableDeclarations__void@switchstatement.SwitchStatement
 ;;@ switchstatement/SwitchStatement.java:64:22
 (local $unassigned i32)
 (local $unassigned2 i32)
 (local $i i32)
 (local $j i32)
 (local $b i32)
 (local $i_1 i32)
 (block
  ;; SWITCH: switch (3) {
  ;;@ switchstatement/SwitchStatement.java:65:4
  (block $SWITCH.BREAK
   ;; switch (3) {
   ;;@ switchstatement/SwitchStatement.java:65:4
   (block
    (block
     (block ;; evaluate expression and jump
      (br_table 0 2 1 2 (i32.sub (i32.const 3) (i32.const 1)))
     )
     ;; case 1:
     ;; int unassigned,int unassigned2;
     ;;@ switchstatement/SwitchStatement.java:67:8
     
     ;; int i = 0;
     ;;@ switchstatement/SwitchStatement.java:68:8
     (local.set $i (i32.const 0))
     ;; int j = 2,int b = (j + 1);
     ;;@ switchstatement/SwitchStatement.java:69:8
     (local.set $j (i32.const 2))
     (local.set $b (i32.add (local.get $j) (i32.const 1)))
     ;; break SWITCH;
     ;;@ switchstatement/SwitchStatement.java:70:8
     (br $SWITCH.BREAK)
    )
    ;; case 3:
    ;; (i = 3);
    ;;@ switchstatement/SwitchStatement.java:72:8
    (local.set $i (i32.const 3))
    ;; return;
    ;;@ switchstatement/SwitchStatement.java:74:8
    (return )
   )
  )
  ;; SWITCH: switch (5) {
  ;;@ switchstatement/SwitchStatement.java:77:4
  (block $SWITCH_1.BREAK
   ;; switch (5) {
   ;;@ switchstatement/SwitchStatement.java:77:4
   (block
    (block ;; evaluate expression and jump
     (br_table 0 1 (i32.sub (i32.const 5) (i32.const 5)))
    )
    ;; case 5:
    ;; int i = 1;
    ;;@ switchstatement/SwitchStatement.java:79:8
    (local.set $i_1 (i32.const 1))
    ;; break SWITCH;
    ;;@ switchstatement/SwitchStatement.java:80:8
    (br $SWITCH_1.BREAK)
   )
  )
 )
)

;;; void SwitchStatement.testCaseExpressionTypes(char ch, int i, byte b, short s)
(func $m_testCaseExpressionTypes__char__int__byte__short__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $ch i32)
 (param $i i32)
 (param $b i32)
 (param $s i32)
 ;;@ switchstatement/SwitchStatement.java:85:15
 (block
  ;; SWITCH: switch (ch) {
  ;;@ switchstatement/SwitchStatement.java:86:4
  (block $SWITCH.BREAK
   ;; switch (ch) {
   ;;@ switchstatement/SwitchStatement.java:86:4
   (block
    (block
     (block
      (block
       (block ;; evaluate expression and jump
        (br_if 0 (i32.eq (local.get $ch) (i32.const 97)))
        (br_if 1 (i32.eq (local.get $ch) (i32.const 1)))
        (br_if 2 (i32.eq (local.get $ch) (i32.const 2)))
        (br_if 3 (i32.eq (local.get $ch) (i32.const 3)))
        (br 4)
       )
       ;; case 97:
       ;; break SWITCH;
       ;;@ switchstatement/SwitchStatement.java:88:8
       (br $SWITCH.BREAK)
      )
      ;; case 1:
      ;; break SWITCH;
      ;;@ switchstatement/SwitchStatement.java:90:8
      (br $SWITCH.BREAK)
     )
     ;; case 2:
     ;; break SWITCH;
     ;;@ switchstatement/SwitchStatement.java:92:8
     (br $SWITCH.BREAK)
    )
    ;; case 3:
    ;; break SWITCH;
    ;;@ switchstatement/SwitchStatement.java:94:8
    (br $SWITCH.BREAK)
   )
  )
  ;; SWITCH: switch (i) {
  ;;@ switchstatement/SwitchStatement.java:97:4
  (block $SWITCH_1.BREAK
   ;; switch (i) {
   ;;@ switchstatement/SwitchStatement.java:97:4
   (block
    (block
     (block
      (block
       (block ;; evaluate expression and jump
        (br_if 0 (i32.eq (local.get $i) (i32.const 97)))
        (br_if 1 (i32.eq (local.get $i) (i32.const 1)))
        (br_if 2 (i32.eq (local.get $i) (i32.const 2)))
        (br_if 3 (i32.eq (local.get $i) (i32.const 3)))
        (br 4)
       )
       ;; case 97:
       ;; break SWITCH;
       ;;@ switchstatement/SwitchStatement.java:99:8
       (br $SWITCH_1.BREAK)
      )
      ;; case 1:
      ;; break SWITCH;
      ;;@ switchstatement/SwitchStatement.java:101:8
      (br $SWITCH_1.BREAK)
     )
     ;; case 2:
     ;; break SWITCH;
     ;;@ switchstatement/SwitchStatement.java:103:8
     (br $SWITCH_1.BREAK)
    )
    ;; case 3:
    ;; break SWITCH;
    ;;@ switchstatement/SwitchStatement.java:105:8
    (br $SWITCH_1.BREAK)
   )
  )
  ;; SWITCH: switch (b) {
  ;;@ switchstatement/SwitchStatement.java:108:4
  (block $SWITCH_2.BREAK
   ;; switch (b) {
   ;;@ switchstatement/SwitchStatement.java:108:4
   (block
    (block
     (block
      (block
       (block ;; evaluate expression and jump
        (br_if 0 (i32.eq (local.get $b) (i32.const 97)))
        (br_if 1 (i32.eq (local.get $b) (i32.const 1)))
        (br_if 2 (i32.eq (local.get $b) (i32.const 2)))
        (br_if 3 (i32.eq (local.get $b) (i32.const 3)))
        (br 4)
       )
       ;; case 97:
       ;; break SWITCH;
       ;;@ switchstatement/SwitchStatement.java:110:8
       (br $SWITCH_2.BREAK)
      )
      ;; case 1:
      ;; break SWITCH;
      ;;@ switchstatement/SwitchStatement.java:112:8
      (br $SWITCH_2.BREAK)
     )
     ;; case 2:
     ;; break SWITCH;
     ;;@ switchstatement/SwitchStatement.java:114:8
     (br $SWITCH_2.BREAK)
    )
    ;; case 3:
    ;; break SWITCH;
    ;;@ switchstatement/SwitchStatement.java:116:8
    (br $SWITCH_2.BREAK)
   )
  )
  ;; SWITCH: switch (s) {
  ;;@ switchstatement/SwitchStatement.java:119:4
  (block $SWITCH_3.BREAK
   ;; switch (s) {
   ;;@ switchstatement/SwitchStatement.java:119:4
   (block
    (block
     (block
      (block
       (block ;; evaluate expression and jump
        (br_if 0 (i32.eq (local.get $s) (i32.const 97)))
        (br_if 1 (i32.eq (local.get $s) (i32.const 1)))
        (br_if 2 (i32.eq (local.get $s) (i32.const 2)))
        (br_if 3 (i32.eq (local.get $s) (i32.const 3)))
        (br 4)
       )
       ;; case 97:
       ;; break SWITCH;
       ;;@ switchstatement/SwitchStatement.java:121:8
       (br $SWITCH_3.BREAK)
      )
      ;; case 1:
      ;; break SWITCH;
      ;;@ switchstatement/SwitchStatement.java:123:8
      (br $SWITCH_3.BREAK)
     )
     ;; case 2:
     ;; break SWITCH;
     ;;@ switchstatement/SwitchStatement.java:125:8
     (br $SWITCH_3.BREAK)
    )
    ;; case 3:
    ;; break SWITCH;
    ;;@ switchstatement/SwitchStatement.java:127:8
    (br $SWITCH_3.BREAK)
   )
  )
 )
)

;;; void SwitchStatement.testBlocksInSwitchCase(int i)
(func $m_testBlocksInSwitchCase__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $i i32)
 ;;@ switchstatement/SwitchStatement.java:131:15
 (block
  ;; SWITCH: switch (i) {
  ;;@ switchstatement/SwitchStatement.java:132:4
  (block $SWITCH.BREAK
   ;; switch (i) {
   ;;@ switchstatement/SwitchStatement.java:132:4
   (block
    (block ;; evaluate expression and jump
     (br_table 0 1 (i32.sub (local.get $i) (i32.const 1)))
    )
    ;; case 1:
    ;; SwitchStatement.this.foo(1);
    ;;@ switchstatement/SwitchStatement.java:134:8
    (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 1))
    (block
     ;; SwitchStatement.this.foo(2);
     ;;@ switchstatement/SwitchStatement.java:136:10
     (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 2))
    )
    ;; SwitchStatement.this.foo(3);
    ;;@ switchstatement/SwitchStatement.java:138:8
    (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 3))
    (block
     ;; SwitchStatement.this.foo(4);
     ;;@ switchstatement/SwitchStatement.java:140:10
     (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 4))
     ;; SwitchStatement.this.foo(5);
     ;;@ switchstatement/SwitchStatement.java:141:10
     (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 5))
    )
    ;; break SWITCH;
    ;;@ switchstatement/SwitchStatement.java:143:8
    (br $SWITCH.BREAK)
   )
  )
 )
)

;;; void SwitchStatement.testLabelInSwitchCase(int i)
(func $m_testLabelInSwitchCase__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $i i32)
 ;;@ switchstatement/SwitchStatement.java:147:15
 (block
  ;; SWITCH: switch (i) {
  ;;@ switchstatement/SwitchStatement.java:148:4
  (block $SWITCH.BREAK
   ;; switch (i) {
   ;;@ switchstatement/SwitchStatement.java:148:4
   (block
    (block ;; evaluate expression and jump
     (br_table 0 1 (i32.sub (local.get $i) (i32.const 1)))
    )
    ;; case 1:
    ;; LABEL: do {
    ;;@ switchstatement/SwitchStatement.java:150:8
    (block $LABEL.BREAK
     (loop
      (block $LABEL.CONTINUE
       (block
        ;; break LABEL;
        ;;@ switchstatement/SwitchStatement.java:152:10
        (br $LABEL.BREAK)
       )
      )
      (br_if 0 (i32.const 1))
      
     )
    )
   )
  )
 )
)

;;; void SwitchStatement.testNonFallThroughBreakCase(int i)
(func $m_testNonFallThroughBreakCase__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $i i32)
 ;;@ switchstatement/SwitchStatement.java:157:15
 (block
  ;; SWITCH: switch (i) {
  ;;@ switchstatement/SwitchStatement.java:158:4
  (block $SWITCH.BREAK
   ;; switch (i) {
   ;;@ switchstatement/SwitchStatement.java:158:4
   (block
    (block
     (block ;; evaluate expression and jump
      (br_table 0 1 (i32.sub (local.get $i) (i32.const 1)))
     )
     ;; case 1:
     ;; SwitchStatement.this.foo(1);
     ;;@ switchstatement/SwitchStatement.java:160:8
     (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 1))
     ;; break SWITCH;
     ;;@ switchstatement/SwitchStatement.java:161:8
     (br $SWITCH.BREAK)
    )
    ;; default:
    ;; SwitchStatement.this.foo(2);
    ;;@ switchstatement/SwitchStatement.java:163:8
    (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 2))
    ;; break SWITCH;
    ;;@ switchstatement/SwitchStatement.java:164:8
    (br $SWITCH.BREAK)
   )
  )
 )
)

;;; void SwitchStatement.testNonFallThroughBreakOuterCase(int i)
(func $m_testNonFallThroughBreakOuterCase__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $i i32)
 ;;@ switchstatement/SwitchStatement.java:168:15
 (block
  ;; OUTER_LABEL: do {
  ;;@ switchstatement/SwitchStatement.java:169:4
  (block $OUTER_LABEL.BREAK
   (loop
    (block $OUTER_LABEL.CONTINUE
     (block
      ;; SWITCH: switch (i) {
      ;;@ switchstatement/SwitchStatement.java:171:6
      (block $SWITCH.BREAK
       ;; switch (i) {
       ;;@ switchstatement/SwitchStatement.java:171:6
       (block
        (block
         (block ;; evaluate expression and jump
          (br_table 0 1 (i32.sub (local.get $i) (i32.const 1)))
         )
         ;; case 1:
         ;; SwitchStatement.this.foo(1);
         ;;@ switchstatement/SwitchStatement.java:173:10
         (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 1))
         ;; break OUTER_LABEL;
         ;;@ switchstatement/SwitchStatement.java:174:10
         (br $OUTER_LABEL.BREAK)
        )
        ;; default:
        ;; SwitchStatement.this.foo(2);
        ;;@ switchstatement/SwitchStatement.java:176:10
        (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 2))
        ;; break SWITCH;
        ;;@ switchstatement/SwitchStatement.java:177:10
        (br $SWITCH.BREAK)
       )
      )
     )
    )
    
   )
  )
 )
)

;;; void SwitchStatement.testNonFallThroughContinueCase(int i)
(func $m_testNonFallThroughContinueCase__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $i i32)
 ;;@ switchstatement/SwitchStatement.java:182:15
 (block
  ;; LOOP: do {
  ;;@ switchstatement/SwitchStatement.java:183:4
  (block $LOOP.BREAK
   (loop
    (block $LOOP.CONTINUE
     (block
      ;; SWITCH: switch (i) {
      ;;@ switchstatement/SwitchStatement.java:184:6
      (block $SWITCH.BREAK
       ;; switch (i) {
       ;;@ switchstatement/SwitchStatement.java:184:6
       (block
        (block
         (block ;; evaluate expression and jump
          (br_table 0 1 (i32.sub (local.get $i) (i32.const 3)))
         )
         ;; case 3:
         ;; SwitchStatement.this.foo(1);
         ;;@ switchstatement/SwitchStatement.java:186:10
         (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 1))
         ;; continue LOOP;
         ;;@ switchstatement/SwitchStatement.java:187:10
         (br $LOOP.CONTINUE)
        )
        ;; default:
        ;; SwitchStatement.this.foo(2);
        ;;@ switchstatement/SwitchStatement.java:189:10
        (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 2))
        ;; break SWITCH;
        ;;@ switchstatement/SwitchStatement.java:190:10
        (br $SWITCH.BREAK)
       )
      )
     )
    )
    
   )
  )
 )
)

;;; void SwitchStatement.testNonFallThroughReturnCase(int i)
(func $m_testNonFallThroughReturnCase__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $i i32)
 ;;@ switchstatement/SwitchStatement.java:195:15
 (block
  ;; SWITCH: switch (i) {
  ;;@ switchstatement/SwitchStatement.java:196:4
  (block $SWITCH.BREAK
   ;; switch (i) {
   ;;@ switchstatement/SwitchStatement.java:196:4
   (block
    (block
     (block ;; evaluate expression and jump
      (br_table 0 1 (i32.sub (local.get $i) (i32.const 4)))
     )
     ;; case 4:
     ;; SwitchStatement.this.foo(1);
     ;;@ switchstatement/SwitchStatement.java:198:8
     (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 1))
     ;; return;
     ;;@ switchstatement/SwitchStatement.java:199:8
     (return )
    )
    ;; default:
    ;; SwitchStatement.this.foo(2);
    ;;@ switchstatement/SwitchStatement.java:201:8
    (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 2))
    ;; break SWITCH;
    ;;@ switchstatement/SwitchStatement.java:202:8
    (br $SWITCH.BREAK)
   )
  )
 )
)

;;; void SwitchStatement.testNonFallThroughThrowCase(int i)
(func $m_testNonFallThroughThrowCase__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $i i32)
 ;;@ switchstatement/SwitchStatement.java:206:15
 (block
  ;; SWITCH: switch (i) {
  ;;@ switchstatement/SwitchStatement.java:207:4
  (block $SWITCH.BREAK
   ;; switch (i) {
   ;;@ switchstatement/SwitchStatement.java:207:4
   (block
    (block
     (block ;; evaluate expression and jump
      (br_table 0 1 (i32.sub (local.get $i) (i32.const 5)))
     )
     ;; case 5:
     ;; SwitchStatement.this.foo(1);
     ;;@ switchstatement/SwitchStatement.java:209:8
     (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 1))
     ;; throw java.lang.RuntimeException.$create();
     ;;@ switchstatement/SwitchStatement.java:210:8
     (throw $exception.event (call $$create__@java.lang.RuntimeException ))
    )
    ;; default:
    ;; SwitchStatement.this.foo(2);
    ;;@ switchstatement/SwitchStatement.java:212:8
    (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 2))
    ;; break SWITCH;
    ;;@ switchstatement/SwitchStatement.java:213:8
    (br $SWITCH.BREAK)
   )
  )
 )
)

;;; void SwitchStatement.testNonFallThroughIfCase(int i)
(func $m_testNonFallThroughIfCase__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $i i32)
 ;;@ switchstatement/SwitchStatement.java:217:15
 (block
  ;; SWITCH: switch (i) {
  ;;@ switchstatement/SwitchStatement.java:218:4
  (block $SWITCH.BREAK
   ;; switch (i) {
   ;;@ switchstatement/SwitchStatement.java:218:4
   (block
    (block
     (block ;; evaluate expression and jump
      (br_table 0 1 (i32.sub (local.get $i) (i32.const 1)))
     )
     ;; case 1:
     ;; SwitchStatement.this.foo(1);
     ;;@ switchstatement/SwitchStatement.java:220:8
     (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 1))
     ;; if (false) {
     ;;@ switchstatement/SwitchStatement.java:221:8
     (if (i32.const 0)
      (then
       (block
        ;; break SWITCH;
        ;;@ switchstatement/SwitchStatement.java:222:10
        (br $SWITCH.BREAK)
       )
      )(else
       (block
        ;; break SWITCH;
        ;;@ switchstatement/SwitchStatement.java:224:10
        (br $SWITCH.BREAK)
       )
      )
     )
    )
    ;; default:
    ;; SwitchStatement.this.foo(2);
    ;;@ switchstatement/SwitchStatement.java:227:8
    (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 2))
    ;; break SWITCH;
    ;;@ switchstatement/SwitchStatement.java:228:8
    (br $SWITCH.BREAK)
   )
  )
 )
)

;;; void SwitchStatement.testNonFallThroughBlockCase(int i)
(func $m_testNonFallThroughBlockCase__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $i i32)
 ;;@ switchstatement/SwitchStatement.java:232:15
 (block
  ;; SWITCH: switch (i) {
  ;;@ switchstatement/SwitchStatement.java:233:4
  (block $SWITCH.BREAK
   ;; switch (i) {
   ;;@ switchstatement/SwitchStatement.java:233:4
   (block
    (block
     (block ;; evaluate expression and jump
      (br_table 0 1 (i32.sub (local.get $i) (i32.const 1)))
     )
     ;; case 1:
     (block
      ;; SwitchStatement.this.foo(1);
      ;;@ switchstatement/SwitchStatement.java:236:10
      (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 1))
      ;; break SWITCH;
      ;;@ switchstatement/SwitchStatement.java:237:10
      (br $SWITCH.BREAK)
     )
    )
    ;; default:
    ;; SwitchStatement.this.foo(2);
    ;;@ switchstatement/SwitchStatement.java:240:8
    (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 2))
    ;; break SWITCH;
    ;;@ switchstatement/SwitchStatement.java:241:8
    (br $SWITCH.BREAK)
   )
  )
 )
)

;;; void SwitchStatement.testNonFallThrough_defaultIsNotLast(int i)
(func $m_testNonFallThrough_defaultIsNotLast__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $i i32)
 ;;@ switchstatement/SwitchStatement.java:245:15
 (block
  ;; SWITCH: switch (i) {
  ;;@ switchstatement/SwitchStatement.java:246:4
  (block $SWITCH.BREAK
   ;; switch (i) {
   ;;@ switchstatement/SwitchStatement.java:246:4
   (block
    (block
     (block
      (block
       (block ;; evaluate expression and jump
        (br_table 0 1 3 2 (i32.sub (local.get $i) (i32.const 1)))
       )
       ;; case 1:
       ;; SwitchStatement.this.foo(1);
       ;;@ switchstatement/SwitchStatement.java:248:8
       (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 1))
       ;; break SWITCH;
       ;;@ switchstatement/SwitchStatement.java:249:8
       (br $SWITCH.BREAK)
      )
      ;; case 2:
      ;; SwitchStatement.this.foo(2);
      ;;@ switchstatement/SwitchStatement.java:251:8
      (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 2))
      ;; break SWITCH;
      ;;@ switchstatement/SwitchStatement.java:252:8
      (br $SWITCH.BREAK)
     )
     ;; default:
     ;; SwitchStatement.this.foo(3);
     ;;@ switchstatement/SwitchStatement.java:254:8
     (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 3))
     ;; break SWITCH;
     ;;@ switchstatement/SwitchStatement.java:255:8
     (br $SWITCH.BREAK)
    )
    ;; case 3:
    ;; SwitchStatement.this.foo(4);
    ;;@ switchstatement/SwitchStatement.java:257:8
    (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 4))
    ;; break SWITCH;
    ;;@ switchstatement/SwitchStatement.java:258:8
    (br $SWITCH.BREAK)
   )
  )
 )
)

;;; void SwitchStatement.testFallThroughCase(int i)
(func $m_testFallThroughCase__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $i i32)
 ;;@ switchstatement/SwitchStatement.java:262:15
 (block
  ;; SWITCH: switch (i) {
  ;;@ switchstatement/SwitchStatement.java:263:4
  (block $SWITCH.BREAK
   ;; switch (i) {
   ;;@ switchstatement/SwitchStatement.java:263:4
   (block
    (block
     (block ;; evaluate expression and jump
      (br_table 0 1 (i32.sub (local.get $i) (i32.const 1)))
     )
     ;; case 1:
     ;; SwitchStatement.this.foo(1);
     ;;@ switchstatement/SwitchStatement.java:265:8
     (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 1))
    )
    ;; default:
    ;; SwitchStatement.this.foo(2);
    ;;@ switchstatement/SwitchStatement.java:268:8
    (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 2))
    ;; break SWITCH;
    ;;@ switchstatement/SwitchStatement.java:269:8
    (br $SWITCH.BREAK)
   )
  )
 )
)

;;; void SwitchStatement.testFallThroughBreakInnerCase(int i)
(func $m_testFallThroughBreakInnerCase__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $i i32)
 ;;@ switchstatement/SwitchStatement.java:273:15
 (block
  ;; SWITCH: switch (i) {
  ;;@ switchstatement/SwitchStatement.java:274:4
  (block $SWITCH.BREAK
   ;; switch (i) {
   ;;@ switchstatement/SwitchStatement.java:274:4
   (block
    (block
     (block ;; evaluate expression and jump
      (br_table 0 1 (i32.sub (local.get $i) (i32.const 1)))
     )
     ;; case 1:
     ;; SwitchStatement.this.foo(1);
     ;;@ switchstatement/SwitchStatement.java:276:8
     (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 1))
     ;; INNER_LABEL: do {
     ;;@ switchstatement/SwitchStatement.java:277:8
     (block $INNER_LABEL.BREAK
      (loop
       (block $INNER_LABEL.CONTINUE
        (block
         ;; break INNER_LABEL;
         ;;@ switchstatement/SwitchStatement.java:279:10
         (br $INNER_LABEL.BREAK)
        )
       )
       
      )
     )
    )
    ;; default:
    ;; SwitchStatement.this.foo(2);
    ;;@ switchstatement/SwitchStatement.java:283:8
    (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 2))
    ;; break SWITCH;
    ;;@ switchstatement/SwitchStatement.java:284:8
    (br $SWITCH.BREAK)
   )
  )
 )
)

;;; void SwitchStatement.testFallThroughContinueInnerCase(int i)
(func $m_testFallThroughContinueInnerCase__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $i i32)
 ;;@ switchstatement/SwitchStatement.java:288:15
 (block
  ;; SWITCH: switch (i) {
  ;;@ switchstatement/SwitchStatement.java:289:4
  (block $SWITCH.BREAK
   ;; switch (i) {
   ;;@ switchstatement/SwitchStatement.java:289:4
   (block
    (block
     (block ;; evaluate expression and jump
      (br_table 0 1 (i32.sub (local.get $i) (i32.const 1)))
     )
     ;; case 1:
     ;; SwitchStatement.this.foo(1);
     ;;@ switchstatement/SwitchStatement.java:291:8
     (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 1))
     ;; INNER_LABEL: do {
     ;;@ switchstatement/SwitchStatement.java:292:8
     (block $INNER_LABEL.BREAK
      (loop
       (block $INNER_LABEL.CONTINUE
        (block
         ;; continue INNER_LABEL;
         ;;@ switchstatement/SwitchStatement.java:294:10
         (br $INNER_LABEL.CONTINUE)
        )
       )
       
      )
     )
    )
    ;; default:
    ;; SwitchStatement.this.foo(2);
    ;;@ switchstatement/SwitchStatement.java:298:8
    (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 2))
    ;; break SWITCH;
    ;;@ switchstatement/SwitchStatement.java:299:8
    (br $SWITCH.BREAK)
   )
  )
 )
)

;;; void SwitchStatement.testFallThroughLabeledStatement(int i)
(func $m_testFallThroughLabeledStatement__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $i i32)
 ;;@ switchstatement/SwitchStatement.java:303:15
 (block
  ;; SWITCH: switch (i) {
  ;;@ switchstatement/SwitchStatement.java:304:4
  (block $SWITCH.BREAK
   ;; switch (i) {
   ;;@ switchstatement/SwitchStatement.java:304:4
   (block
    (block
     (block ;; evaluate expression and jump
      (br_table 0 1 (i32.sub (local.get $i) (i32.const 1)))
     )
     ;; case 1:
     ;; INNER_LABEL: {
     ;;@ switchstatement/SwitchStatement.java:306:8
     (block $INNER_LABEL.BREAK
      (block
       ;; if (false) {
       ;;@ switchstatement/SwitchStatement.java:308:10
       (if (i32.const 0)
        (then
         (block
          ;; break INNER_LABEL;
          ;;@ switchstatement/SwitchStatement.java:309:12
          (br $INNER_LABEL.BREAK)
         )
        )
       )
       ;; return;
       ;;@ switchstatement/SwitchStatement.java:311:10
       (return )
      )
     )
    )
    ;; default:
    ;; SwitchStatement.this.foo(2);
    ;;@ switchstatement/SwitchStatement.java:315:8
    (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 2))
    ;; break SWITCH;
    ;;@ switchstatement/SwitchStatement.java:316:8
    (br $SWITCH.BREAK)
   )
  )
 )
)

;;; void SwitchStatement.testFallThroughIfCase(int i)
(func $m_testFallThroughIfCase__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $i i32)
 ;;@ switchstatement/SwitchStatement.java:320:15
 (block
  ;; SWITCH: switch (i) {
  ;;@ switchstatement/SwitchStatement.java:321:4
  (block $SWITCH.BREAK
   ;; switch (i) {
   ;;@ switchstatement/SwitchStatement.java:321:4
   (block
    (block
     (block ;; evaluate expression and jump
      (br_table 0 1 (i32.sub (local.get $i) (i32.const 1)))
     )
     ;; case 1:
     ;; SwitchStatement.this.foo(1);
     ;;@ switchstatement/SwitchStatement.java:323:8
     (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 1))
     ;; if (false) {
     ;;@ switchstatement/SwitchStatement.java:324:8
     (if (i32.const 0)
      (then
       (block
        ;; break SWITCH;
        ;;@ switchstatement/SwitchStatement.java:325:10
        (br $SWITCH.BREAK)
       )
      )
     )
    )
    ;; default:
    ;; SwitchStatement.this.foo(2);
    ;;@ switchstatement/SwitchStatement.java:329:8
    (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 2))
    ;; break SWITCH;
    ;;@ switchstatement/SwitchStatement.java:330:8
    (br $SWITCH.BREAK)
   )
  )
 )
)

;;; void SwitchStatement.testFallThroughIfElseCase(int i)
(func $m_testFallThroughIfElseCase__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $i i32)
 ;;@ switchstatement/SwitchStatement.java:334:15
 (block
  ;; SWITCH: switch (i) {
  ;;@ switchstatement/SwitchStatement.java:335:4
  (block $SWITCH.BREAK
   ;; switch (i) {
   ;;@ switchstatement/SwitchStatement.java:335:4
   (block
    (block
     (block ;; evaluate expression and jump
      (br_table 0 1 (i32.sub (local.get $i) (i32.const 1)))
     )
     ;; case 1:
     ;; if (true) {
     ;;@ switchstatement/SwitchStatement.java:337:8
     (if (i32.const 1)
      (then
       (block
        ;; SwitchStatement.this.foo(1);
        ;;@ switchstatement/SwitchStatement.java:338:10
        (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 1))
        ;; break SWITCH;
        ;;@ switchstatement/SwitchStatement.java:339:10
        (br $SWITCH.BREAK)
       )
      )(else
       (block
        ;; SwitchStatement.this.foo(2);
        ;;@ switchstatement/SwitchStatement.java:341:10
        (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 2))
       )
      )
     )
    )
    ;; default:
    ;; SwitchStatement.this.foo(2);
    ;;@ switchstatement/SwitchStatement.java:345:8
    (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 2))
    ;; break SWITCH;
    ;;@ switchstatement/SwitchStatement.java:346:8
    (br $SWITCH.BREAK)
   )
  )
 )
)

;;; void SwitchStatement.testFallThoughLastCase(int i)
(func $m_testFallThoughLastCase__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $i i32)
 ;;@ switchstatement/SwitchStatement.java:350:15
 (block
  ;; SWITCH: switch (i) {
  ;;@ switchstatement/SwitchStatement.java:351:4
  (block $SWITCH.BREAK
   ;; switch (i) {
   ;;@ switchstatement/SwitchStatement.java:351:4
   (block
    (block
     (block ;; evaluate expression and jump
      (br_table 0 1 (i32.sub (local.get $i) (i32.const 1)))
     )
     ;; case 1:
     ;; SwitchStatement.this.foo(1);
     ;;@ switchstatement/SwitchStatement.java:353:8
     (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 1))
     ;; break SWITCH;
     ;;@ switchstatement/SwitchStatement.java:354:8
     (br $SWITCH.BREAK)
    )
    ;; default:
    ;; SwitchStatement.this.foo(2);
    ;;@ switchstatement/SwitchStatement.java:356:8
    (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 2))
   )
  )
 )
)

;;; void SwitchStatement.testDefaultIsNotLast_fallThrough(int i)
(func $m_testDefaultIsNotLast_fallThrough__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $i i32)
 ;;@ switchstatement/SwitchStatement.java:361:15
 (block
  ;; SWITCH: switch (i) {
  ;;@ switchstatement/SwitchStatement.java:362:4
  (block $SWITCH.BREAK
   ;; switch (i) {
   ;;@ switchstatement/SwitchStatement.java:362:4
   (block
    (block
     (block
      (block
       (block ;; evaluate expression and jump
        (br_table 0 1 2 3 2 (i32.sub (local.get $i) (i32.const 1)))
       )
       ;; case 1:
       ;; SwitchStatement.this.foo(1);
       ;;@ switchstatement/SwitchStatement.java:364:8
       (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 1))
      )
      ;; case 2:
      ;; SwitchStatement.this.foo(2);
      ;;@ switchstatement/SwitchStatement.java:367:8
      (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 2))
     )
     ;; default:
     ;; SwitchStatement.this.foo(3);
     ;;@ switchstatement/SwitchStatement.java:370:8
     (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 3))
    )
    ;; case 4:
    ;; SwitchStatement.this.foo(4);
    ;;@ switchstatement/SwitchStatement.java:373:8
    (call $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement (ref.as_non_null (local.get $this))(i32.const 4))
   )
  )
 )
)

;;; int SwitchStatement.testDefaultNotLast_fallThroughCase(int i)
(func $m_testDefaultNotLast_fallThroughCase__int__int_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $i i32)
 (result i32)
 ;;@ switchstatement/SwitchStatement.java:378:14
 (local $result i32)
 (block
  ;; int result = 0;
  ;;@ switchstatement/SwitchStatement.java:379:4
  (local.set $result (i32.const 0))
  ;; SWITCH: switch (i) {
  ;;@ switchstatement/SwitchStatement.java:380:4
  (block $SWITCH.BREAK
   ;; switch (i) {
   ;;@ switchstatement/SwitchStatement.java:380:4
   (block
    (block
     (block
      (block ;; evaluate expression and jump
       (br_table 0 1 2 1 (i32.sub (local.get $i) (i32.const 1)))
      )
      ;; case 1:
     )
     ;; default:
     ;; (result = (result + 10));
     ;;@ switchstatement/SwitchStatement.java:384:8
     (local.set $result (i32.add (local.get $result) (i32.const 10)))
     ;; break SWITCH;
     ;;@ switchstatement/SwitchStatement.java:385:8
     (br $SWITCH.BREAK)
    )
    ;; case 3:
    ;; (result = (result + 100));
    ;;@ switchstatement/SwitchStatement.java:387:8
    (local.set $result (i32.add (local.get $result) (i32.const 100)))
    ;; break SWITCH;
    ;;@ switchstatement/SwitchStatement.java:388:8
    (br $SWITCH.BREAK)
   )
  )
  ;; return result;
  ;;@ switchstatement/SwitchStatement.java:390:4
  (return (local.get $result))
 )
)

;;; int SwitchStatement.testDefaultNotLast_fallThroughDefault(int i)
(func $m_testDefaultNotLast_fallThroughDefault__int__int_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $i i32)
 (result i32)
 ;;@ switchstatement/SwitchStatement.java:393:14
 (local $result i32)
 (block
  ;; int result = 0;
  ;;@ switchstatement/SwitchStatement.java:394:4
  (local.set $result (i32.const 0))
  ;; SWITCH: switch (i) {
  ;;@ switchstatement/SwitchStatement.java:395:4
  (block $SWITCH.BREAK
   ;; switch (i) {
   ;;@ switchstatement/SwitchStatement.java:395:4
   (block
    (block
     (block
      (block ;; evaluate expression and jump
       (br_table 0 1 2 1 (i32.sub (local.get $i) (i32.const 1)))
      )
      ;; case 1:
      ;; (result = (result + 10));
      ;;@ switchstatement/SwitchStatement.java:397:8
      (local.set $result (i32.add (local.get $result) (i32.const 10)))
      ;; break SWITCH;
      ;;@ switchstatement/SwitchStatement.java:398:8
      (br $SWITCH.BREAK)
     )
     ;; default:
    )
    ;; case 3:
    ;; (result = (result + 100));
    ;;@ switchstatement/SwitchStatement.java:402:8
    (local.set $result (i32.add (local.get $result) (i32.const 100)))
    ;; break SWITCH;
    ;;@ switchstatement/SwitchStatement.java:403:8
    (br $SWITCH.BREAK)
   )
  )
  ;; return result;
  ;;@ switchstatement/SwitchStatement.java:405:4
  (return (local.get $result))
 )
)

;;; void SwitchStatement.foo(int i)
(func $m_foo__int__void_$p_switchstatement_SwitchStatement@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (param $i i32)
 ;;@ switchstatement/SwitchStatement.java:408:15
 (block
 )
)

;;; void SwitchStatement.$clinit()
(func $$clinit__void@switchstatement.SwitchStatement
 ;;@ switchstatement/SwitchStatement.java:23:13
 (block
  ;; if (switchstatement.SwitchStatement.$initialized) return;
  ;;@ switchstatement/SwitchStatement.java:23:13
  (if (global.get $f_$initialized__switchstatement_SwitchStatement)
   (then
    ;; return;
    ;;@ switchstatement/SwitchStatement.java:23:13
    (return )
   )
  )
  ;; (switchstatement.SwitchStatement.$initialized = true);
  ;;@ switchstatement/SwitchStatement.java:23:13
  (global.set $f_$initialized__switchstatement_SwitchStatement (i32.const 1))
  ;; java.lang.Object.$clinit();
  ;;@ switchstatement/SwitchStatement.java:23:13
  (call $$clinit__void@java.lang.Object )
 )
)

;;; Class<?> SwitchStatement.getClass()
(func $m_getClass__java_lang_Class@switchstatement.SwitchStatement
 (type $function.m_getClass__java_lang_Class)
 (param $this.untyped (ref $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $this (ref null $switchstatement.SwitchStatement))
 (local.set $this (ref.cast_static $switchstatement.SwitchStatement (local.get $this.untyped)))
 (block
  ;; return javaemul.internal.ClassLiteralPool.$getSwitchstatement.SwitchStatement();
  (return (call $function.no.side.effects.$getSwitchstatement.SwitchStatement__java_lang_Class (ref.func $$getSwitchstatement.SwitchStatement__java_lang_Class@javaemul.internal.ClassLiteralPool) ))
 )
)
(elem declare func $m_getClass__java_lang_Class@switchstatement.SwitchStatement)
