;;; Code for switchstatement.Numbers [ENUM]
(type $switchstatement.Numbers (struct
 (field $vtable (ref null $switchstatement.Numbers.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $f_name__java_lang_Enum_ (mut (ref null $java.lang.String)))
 (field $f_ordinal__java_lang_Enum_ (mut i32))
))
(type $switchstatement.Numbers.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_getDeclaringClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_name__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_ordinal__int (mut (ref $function.__$int)))
 (field $m_compareTo__java_lang_Enum__int (mut (ref $function.$java.lang.Enum__$int)))
 (field $m_compareTo__java_lang_Object__int (mut (ref $function.$java.lang.Object__$int)))
))
(global $switchstatement.Numbers.vtable (mut (ref null $switchstatement.Numbers.vtable)) (ref.null $switchstatement.Numbers.vtable))
(global $f_ONE__switchstatement_Numbers (mut (ref null $switchstatement.Numbers)) (ref.null $switchstatement.Numbers))
(global $f_TWO__switchstatement_Numbers (mut (ref null $switchstatement.Numbers)) (ref.null $switchstatement.Numbers))
(global $f_namesToValuesMap__switchstatement_Numbers_ (mut (ref null $java.lang.Object)) (ref.null $java.lang.Object))
(global $f_$initialized__switchstatement_Numbers (mut i32) (i32.const 0))

;;; Numbers()
(func $m_<init>__void_$p_switchstatement_Numbers@switchstatement.Numbers
 (param $this (ref null $switchstatement.Numbers))
 (result (ref null $switchstatement.Numbers))
 (block $return.label
  (block
   ;; Enum.this.Enum.<init>();
   (drop (ref.null $java.lang.Enum))
  )
 )
 (local.get $this)
)

;;; Numbers Numbers.valueOf(String name)
(func $m_valueOf__java_lang_String__switchstatement_Numbers@switchstatement.Numbers
 (param $name (ref null $java.lang.String))
 (result (ref null $switchstatement.Numbers))
 (local $return.value (ref null $switchstatement.Numbers))
 (block $return.label
  (block
   ;; switchstatement.Numbers.$clinit();
   (call $$clinit__void@switchstatement.Numbers )
   ;; if ((switchstatement.Numbers.namesToValuesMap == null)) {
   (if (ref.eq (global.get $f_namesToValuesMap__switchstatement_Numbers_) (ref.null $java.lang.Object))
    (then
     (block
      ;; (switchstatement.Numbers.namesToValuesMap = javaemul.internal.Enums.createMapFromValues(switchstatement.Numbers.values()));
      (global.set $f_namesToValuesMap__switchstatement_Numbers_ (ref.null $java.lang.Object))
     )
    )
   )
   ;; return ((Numbers) javaemul.internal.Enums.getValueFromNameAndMap(name,switchstatement.Numbers.namesToValuesMap));
   (local.set $return.value (ref.cast $java.lang.Object $switchstatement.Numbers (call $m_getValueFromNameAndMap__java_lang_String__java_util_Map__java_lang_Object@javaemul.internal.Enums (local.get $name)(ref.null $java.lang.Object)) (global.get $switchstatement.Numbers.rtt)))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; Numbers[] Numbers.values()
(func $m_values__arrayOf_switchstatement_Numbers@switchstatement.Numbers
 (result (ref null $Object.array))
 (local $return.value (ref null $Object.array))
 (local $$array_literal (ref null $Object.array))
 (block $return.label
  (block
   ;; switchstatement.Numbers.$clinit();
   (call $$clinit__void@switchstatement.Numbers )
   ;; return (Numbers[] $array_literal = new Numbers[2],($array_literal[0] = (switchstatement.Numbers.$clinit(),switchstatement.Numbers.ONE)),($array_literal[1] = (switchstatement.Numbers.$clinit(),switchstatement.Numbers.TWO)),$array_literal);
   (local.set $return.value (block (result (ref null $Object.array))
    
    (local.set $$array_literal (struct.new_with_rtt $Object.array (global.get $java.lang.Object.vtable) (i32.const 0) (array.new_default_with_rtt $Object.array.elements (i32.const 2) (global.get $Object.array.elements.rtt)) (global.get $Object.array.rtt)))
    (array.set $Object.array.elements (struct.get $Object.array $elements (local.get $$array_literal)) (i32.const 0) (block (result (ref null $switchstatement.Numbers))
     (call $$clinit__void@switchstatement.Numbers )
     (global.get $f_ONE__switchstatement_Numbers)
    ))
    (array.set $Object.array.elements (struct.get $Object.array $elements (local.get $$array_literal)) (i32.const 1) (block (result (ref null $switchstatement.Numbers))
     (call $$clinit__void@switchstatement.Numbers )
     (global.get $f_TWO__switchstatement_Numbers)
    ))
    (local.get $$array_literal)
   ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; void Numbers.$clinit()
(func $$clinit__void@switchstatement.Numbers
 (block $return.label
  (block
   ;; if (switchstatement.Numbers.$initialized) return;
   (if (global.get $f_$initialized__switchstatement_Numbers)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (switchstatement.Numbers.$initialized = true);
   (global.set $f_$initialized__switchstatement_Numbers (i32.const 1))
   ;; java.lang.Enum.$clinit();
   (call $$clinit__void@java.lang.Enum )
   (block
    ;; switchstatement.Numbers.$clinit();
    (call $$clinit__void@switchstatement.Numbers )
    ;; (switchstatement.Numbers.ONE = new Numbers.<init>());
    (global.set $f_ONE__switchstatement_Numbers (call $m_<init>__void_$p_switchstatement_Numbers@switchstatement.Numbers (struct.new_with_rtt $switchstatement.Numbers (global.get $switchstatement.Numbers.vtable) (i32.const 0) (ref.null $java.lang.String) (i32.const 0) (global.get $switchstatement.Numbers.rtt))))
   )
   (block
    ;; switchstatement.Numbers.$clinit();
    (call $$clinit__void@switchstatement.Numbers )
    ;; (switchstatement.Numbers.TWO = new Numbers.<init>());
    (global.set $f_TWO__switchstatement_Numbers (call $m_<init>__void_$p_switchstatement_Numbers@switchstatement.Numbers (struct.new_with_rtt $switchstatement.Numbers (global.get $switchstatement.Numbers.vtable) (i32.const 0) (ref.null $java.lang.String) (i32.const 0) (global.get $switchstatement.Numbers.rtt))))
   )
   ;; (switchstatement.Numbers.namesToValuesMap = null);
   (global.set $f_namesToValuesMap__switchstatement_Numbers_ (ref.null $java.lang.Object))
  )
 )
)

;;; Code for switchstatement.SwitchStatement [CLASS]
(type $switchstatement.SwitchStatement (struct
 (field $vtable (ref null $switchstatement.SwitchStatement.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $switchstatement.SwitchStatement.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_main__void (mut (ref $function.__$void)))
))
(global $switchstatement.SwitchStatement.vtable (mut (ref null $switchstatement.SwitchStatement.vtable)) (ref.null $switchstatement.SwitchStatement.vtable))
(global $f_$initialized__switchstatement_SwitchStatement (mut i32) (i32.const 0))

;;; SwitchStatement()
(func $m_<init>__void@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (result (ref null $switchstatement.SwitchStatement))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void SwitchStatement.main()
(func $m_main__void@switchstatement.SwitchStatement
 (param $this.untyped (ref null $java.lang.Object))
 (local $$expression (ref null $java.lang.String))
 (local $$array_literal (ref null $char.array))
 (local $$array_literal_1 (ref null $char.array))
 (local $$array_literal_2 (ref null $char.array))
 (local $$expression_1 (ref null $switchstatement.Numbers))
 (local $this (ref null $switchstatement.SwitchStatement))
 (local.set $this (ref.cast $java.lang.Object $switchstatement.SwitchStatement (local.get $this.untyped) (global.get $switchstatement.SwitchStatement.rtt)))
 (block $return.label
  (block
   ;; SWITCH: {
   (block $SWITCH.BREAK
    (block
     ;; String $expression = java.lang.String.fromInternalArray((char[] $array_literal = new char[3],($array_literal[0] = 111),($array_literal[1] = 110),($array_literal[2] = 101),$array_literal));
     
     (local.set $$expression (call $m_fromInternalArray__arrayOf_char__java_lang_String@java.lang.String (block (result (ref null $char.array))
      
      (local.set $$array_literal (struct.new_with_rtt $char.array (global.get $java.lang.Object.vtable) (i32.const 0) (array.new_default_with_rtt $char.array.elements (i32.const 3) (global.get $char.array.elements.rtt)) (global.get $char.array.rtt)))
      (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 0) (i32.const 111))
      (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 1) (i32.const 110))
      (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 2) (i32.const 101))
      (local.get $$array_literal)
     )))
     ;; switch ($expression) {
     
     (block
      (block
       (block
        (block ;; evaluate expression and jump
         (br_if 0 (ref.eq (local.get $$expression) (call $m_fromInternalArray__arrayOf_char__java_lang_String@java.lang.String (block (result (ref null $char.array))
          
          (local.set $$array_literal_1 (struct.new_with_rtt $char.array (global.get $java.lang.Object.vtable) (i32.const 0) (array.new_default_with_rtt $char.array.elements (i32.const 3) (global.get $char.array.elements.rtt)) (global.get $char.array.rtt)))
          (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal_1)) (i32.const 0) (i32.const 111))
          (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal_1)) (i32.const 1) (i32.const 110))
          (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal_1)) (i32.const 2) (i32.const 101))
          (local.get $$array_literal_1)
         ))))
         (br_if 1 (ref.eq (local.get $$expression) (call $m_fromInternalArray__arrayOf_char__java_lang_String@java.lang.String (block (result (ref null $char.array))
          
          (local.set $$array_literal_2 (struct.new_with_rtt $char.array (global.get $java.lang.Object.vtable) (i32.const 0) (array.new_default_with_rtt $char.array.elements (i32.const 3) (global.get $char.array.elements.rtt)) (global.get $char.array.rtt)))
          (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal_2)) (i32.const 0) (i32.const 116))
          (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal_2)) (i32.const 1) (i32.const 119))
          (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal_2)) (i32.const 2) (i32.const 111))
          (local.get $$array_literal_2)
         ))))
         (br 2)
        )
        ;; case java.lang.String.fromInternalArray((char[] $array_literal = new char[3],($array_literal[0] = 111),($array_literal[1] = 110),($array_literal[2] = 101),$array_literal)):
       )
       ;; case java.lang.String.fromInternalArray((char[] $array_literal = new char[3],($array_literal[0] = 116),($array_literal[1] = 119),($array_literal[2] = 111),$array_literal)):
       ;; break SWITCH;
       (br $SWITCH.BREAK)
      )
      ;; default:
      ;; return;
      (br $return.label)
     )
    )
   )
   ;; SWITCH: switch (49) {
   (block $SWITCH_1.BREAK
    ;; switch (49) {
    
    (block
     (block
      (block
       (block ;; evaluate expression and jump
        (br_if 0 (i32.eq (i32.const 49) (i32.const 49)))
        (br_if 1 (i32.eq (i32.const 49) (i32.const 50)))
        (br 2)
       )
       ;; case 49:
      )
      ;; case 50:
      ;; break SWITCH;
      (br $SWITCH_1.BREAK)
     )
     ;; default:
     ;; return;
     (br $return.label)
    )
   )
   ;; SWITCH: switch (1) {
   (block $SWITCH_2.BREAK
    ;; switch (1) {
    
    (block
     (block
      (block
       (block ;; evaluate expression and jump
        (br_if 0 (i32.eq (i32.const 1) (i32.const 1)))
        (br_if 1 (i32.eq (i32.const 1) (i32.const 2)))
        (br 2)
       )
       ;; case 1:
      )
      ;; case 2:
      ;; break SWITCH;
      (br $SWITCH_2.BREAK)
     )
     ;; default:
     ;; return;
     (br $return.label)
    )
   )
   ;; SWITCH: {
   (block $SWITCH_3.BREAK
    (block
     ;; Numbers $expression = (switchstatement.Numbers.$clinit(),switchstatement.Numbers.ONE);
     
     (local.set $$expression_1 (block (result (ref null $switchstatement.Numbers))
      (call $$clinit__void@switchstatement.Numbers )
      (global.get $f_ONE__switchstatement_Numbers)
     ))
     ;; switch ($expression) {
     
     (block
      (block
       (block
        (block ;; evaluate expression and jump
         (br_if 0 (ref.eq (local.get $$expression_1) (block (result (ref null $switchstatement.Numbers))
          (call $$clinit__void@switchstatement.Numbers )
          (global.get $f_ONE__switchstatement_Numbers)
         )))
         (br_if 1 (ref.eq (local.get $$expression_1) (block (result (ref null $switchstatement.Numbers))
          (call $$clinit__void@switchstatement.Numbers )
          (global.get $f_TWO__switchstatement_Numbers)
         )))
         (br 2)
        )
        ;; case (switchstatement.Numbers.$clinit(),switchstatement.Numbers.ONE):
       )
       ;; case (switchstatement.Numbers.$clinit(),switchstatement.Numbers.TWO):
       ;; break SWITCH;
       (br $SWITCH_3.BREAK)
      )
      ;; default:
      ;; return;
      (br $return.label)
     )
    )
   )
  )
 )
)
(elem declare func $m_main__void@switchstatement.SwitchStatement)

;;; void SwitchStatement.testSwitchVariableDeclarations()
(func $m_testSwitchVariableDeclarations__void@switchstatement.SwitchStatement
 (local $unassigned i32)
 (local $unassigned2 i32)
 (local $i i32)
 (local $j i32)
 (local $b i32)
 (local $i_1 i32)
 (block $return.label
  (block
   ;; SWITCH: switch (3) {
   (block $SWITCH.BREAK
    ;; switch (3) {
    
    (block
     (block
      (block ;; evaluate expression and jump
       (br_if 0 (i32.eq (i32.const 3) (i32.const 1)))
       (br_if 1 (i32.eq (i32.const 3) (i32.const 3)))
       (br 2)
      )
      ;; case 1:
      ;; int unassigned,int unassigned2;
      
      ;; int i = 0;
      
      (local.set $i (i32.const 0))
      ;; int j = 2,int b = (j + 1);
      
      (local.set $j (i32.const 2))
      (local.set $b (i32.add (local.get $j) (i32.const 1)))
      ;; break SWITCH;
      (br $SWITCH.BREAK)
     )
     ;; case 3:
     ;; (i = 3);
     (local.set $i (i32.const 3))
     ;; assert (i == 3);
     ;; unimplemented statement AssertStatement
     ;; return;
     (br $return.label)
    )
   )
   ;; SWITCH: switch (5) {
   (block $SWITCH_1.BREAK
    ;; switch (5) {
    
    (block
     (block ;; evaluate expression and jump
      (br_if 0 (i32.eq (i32.const 5) (i32.const 5)))
      (br 1)
     )
     ;; case 5:
     ;; int i = 1;
     
     (local.set $i_1 (i32.const 1))
     ;; break SWITCH;
     (br $SWITCH_1.BREAK)
    )
   )
   ;; assert false;
   ;; unimplemented statement AssertStatement
  )
 )
)

;;; void SwitchStatement.$clinit()
(func $$clinit__void@switchstatement.SwitchStatement
 (block $return.label
  (block
   ;; if (switchstatement.SwitchStatement.$initialized) return;
   (if (global.get $f_$initialized__switchstatement_SwitchStatement)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (switchstatement.SwitchStatement.$initialized = true);
   (global.set $f_$initialized__switchstatement_SwitchStatement (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

 ;;; Code for switchstatement.Numbers [vtable]
 (global.set $switchstatement.Numbers.vtable (struct.new_with_rtt $switchstatement.Numbers.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Enum) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_getDeclaringClass__java_lang_Class@java.lang.Enum) (ref.func $m_name__java_lang_String@java.lang.Enum) (ref.func $m_ordinal__int@java.lang.Enum) (ref.func $m_compareTo__java_lang_Enum__int@java.lang.Enum) (ref.func $m_compareTo__java_lang_Object__int@java.lang.Enum) (rtt.canon $switchstatement.Numbers.vtable)))

 ;;; Code for switchstatement.SwitchStatement [vtable]
 (global.set $switchstatement.SwitchStatement.vtable (struct.new_with_rtt $switchstatement.SwitchStatement.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_main__void@switchstatement.SwitchStatement) (rtt.canon $switchstatement.SwitchStatement.vtable)))
