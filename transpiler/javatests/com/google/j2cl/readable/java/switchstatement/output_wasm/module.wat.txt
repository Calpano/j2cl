;;; Code for switchstatement.SwitchStatement

;;; ENUM  Numbers
(type $switchstatement.Numbers (struct
 (field $vtable (ref null $switchstatement.Numbers.vtable))
 (field $$systemIdentityHashCode@java.lang.Object (mut i32))
 (field $name@java.lang.Enum (mut (ref null $java.lang.String)))
 (field $ordinal@java.lang.Enum (mut i32))
))
(type $switchstatement.Numbers.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_getDeclaringClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_name__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_ordinal__int (mut (ref $function.__$int)))
 (field $m_compareTo__java_lang_Enum__int (mut (ref $function.$java.lang.Enum__$int)))
 (field $m_compareTo__java_lang_Object__int (mut (ref $function.$java.lang.Object__$int)))
))
(global $switchstatement.Numbers.vtable (mut (ref null $switchstatement.Numbers.vtable)) (ref.null $switchstatement.Numbers.vtable))
(global $ONE@switchstatement.Numbers (mut (ref null $switchstatement.Numbers)) (ref.null $switchstatement.Numbers))
(global $TWO@switchstatement.Numbers (mut (ref null $switchstatement.Numbers)) (ref.null $switchstatement.Numbers))

;;; Numbers()
(func $m_<init>__void_$p_switchstatement_Numbers@switchstatement.Numbers
 (param $this (ref null $switchstatement.Numbers))
 (result (ref null $switchstatement.Numbers))
 (block $return.label
  (block
   ;; Enum.this.Enum.<init>();
   (drop (ref.null $java.lang.Enum))
  )
 )
 (local.get $this)
)

;;; CLASS  SwitchStatement
(type $switchstatement.SwitchStatement (struct
 (field $vtable (ref null $switchstatement.SwitchStatement.vtable))
 (field $$systemIdentityHashCode@java.lang.Object (mut i32))
))
(type $switchstatement.SwitchStatement.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_main__void (mut (ref $function.__$void)))
))
(global $switchstatement.SwitchStatement.vtable (mut (ref null $switchstatement.SwitchStatement.vtable)) (ref.null $switchstatement.SwitchStatement.vtable))

;;; SwitchStatement()
(func $m_<init>__void@switchstatement.SwitchStatement
 (param $this (ref null $switchstatement.SwitchStatement))
 (result (ref null $switchstatement.SwitchStatement))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void SwitchStatement.main()
(func $m_main__void@switchstatement.SwitchStatement
 (param $this.untyped (ref null $java.lang.Object))
 (local $this (ref null $switchstatement.SwitchStatement))
 (local.set $this (ref.cast $java.lang.Object $switchstatement.SwitchStatement (local.get $this.untyped) (global.get $switchstatement.SwitchStatement.rtt)))
 (block $return.label
  (block
   ;; SWITCH: switch ("one") {
   (block $SWITCH.BREAK
    ;; switch ("one") {
    
    (block
     (block
      (block
       (block ;; evaluate expression and jump
        (br_if 0 (ref.eq (ref.null $java.lang.String) (ref.null $java.lang.String)))
        (br_if 1 (ref.eq (ref.null $java.lang.String) (ref.null $java.lang.String)))
        (br 2)
       )
       ;; case "one":
      )
      ;; case "two":
      ;; break SWITCH;
      (br $SWITCH.BREAK)
     )
     ;; default:
     ;; return;
     (br $return.label)
    )
   )
   ;; SWITCH: switch (49) {
   (block $SWITCH_1.BREAK
    ;; switch (49) {
    
    (block
     (block
      (block
       (block ;; evaluate expression and jump
        (br_if 0 (i32.eq (i32.const 49) (i32.const 49)))
        (br_if 1 (i32.eq (i32.const 49) (i32.const 50)))
        (br 2)
       )
       ;; case 49:
      )
      ;; case 50:
      ;; break SWITCH;
      (br $SWITCH_1.BREAK)
     )
     ;; default:
     ;; return;
     (br $return.label)
    )
   )
   ;; SWITCH: switch (1) {
   (block $SWITCH_2.BREAK
    ;; switch (1) {
    
    (block
     (block
      (block
       (block ;; evaluate expression and jump
        (br_if 0 (i32.eq (i32.const 1) (i32.const 1)))
        (br_if 1 (i32.eq (i32.const 1) (i32.const 2)))
        (br 2)
       )
       ;; case 1:
      )
      ;; case 2:
      ;; break SWITCH;
      (br $SWITCH_2.BREAK)
     )
     ;; default:
     ;; return;
     (br $return.label)
    )
   )
   ;; SWITCH: switch (switchstatement.Numbers.ONE) {
   (block $SWITCH_3.BREAK
    ;; switch (switchstatement.Numbers.ONE) {
    
    (block
     (block
      (block
       (block ;; evaluate expression and jump
        (br_if 0 (ref.eq (global.get $ONE@switchstatement.Numbers) (global.get $ONE@switchstatement.Numbers)))
        (br_if 1 (ref.eq (global.get $ONE@switchstatement.Numbers) (global.get $TWO@switchstatement.Numbers)))
        (br 2)
       )
       ;; case switchstatement.Numbers.ONE:
      )
      ;; case switchstatement.Numbers.TWO:
      ;; break SWITCH;
      (br $SWITCH_3.BREAK)
     )
     ;; default:
     ;; return;
     (br $return.label)
    )
   )
  )
 )
)
(elem declare func $m_main__void@switchstatement.SwitchStatement)

;;; void SwitchStatement.testSwitchVariableDeclarations()
(func $m_testSwitchVariableDeclarations__void@switchstatement.SwitchStatement
 (local $unassigned i32)
 (local $unassigned2 i32)
 (local $i i32)
 (local $j i32)
 (local $b i32)
 (local $i_1 i32)
 (block $return.label
  (block
   ;; SWITCH: switch (3) {
   (block $SWITCH.BREAK
    ;; switch (3) {
    
    (block
     (block
      (block ;; evaluate expression and jump
       (br_if 0 (i32.eq (i32.const 3) (i32.const 1)))
       (br_if 1 (i32.eq (i32.const 3) (i32.const 3)))
       (br 2)
      )
      ;; case 1:
      ;; int unassigned,int unassigned2;
      
      ;; int i = 0;
      
      (local.set $i (i32.const 0))
      ;; int j = 2,int b = (j + 1);
      
      (local.set $j (i32.const 2))
      (local.set $b (i32.add (local.get $j) (i32.const 1)))
      ;; break SWITCH;
      (br $SWITCH.BREAK)
     )
     ;; case 3:
     ;; (i = 3);
     (local.set $i (i32.const 3))
     ;; assert (i == 3);
     ;; unimplemented statement AssertStatement
     ;; return;
     (br $return.label)
    )
   )
   ;; SWITCH: switch (5) {
   (block $SWITCH_1.BREAK
    ;; switch (5) {
    
    (block
     (block ;; evaluate expression and jump
      (br_if 0 (i32.eq (i32.const 5) (i32.const 5)))
      (br 1)
     )
     ;; case 5:
     ;; int i = 1;
     
     (local.set $i_1 (i32.const 1))
     ;; break SWITCH;
     (br $SWITCH_1.BREAK)
    )
   )
   ;; assert false;
   ;; unimplemented statement AssertStatement
  )
 )
)

;;; Code for switchstatement.Numbers [vtable]
 (global.set $switchstatement.Numbers.vtable (struct.new_with_rtt $switchstatement.Numbers.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Enum) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_getDeclaringClass__java_lang_Class@java.lang.Enum) (ref.func $m_name__java_lang_String@java.lang.Enum) (ref.func $m_ordinal__int@java.lang.Enum) (ref.func $m_compareTo__java_lang_Enum__int@java.lang.Enum) (ref.func $m_compareTo__java_lang_Object__int@java.lang.Enum) (rtt.canon $switchstatement.Numbers.vtable)))
;;; Code for switchstatement.SwitchStatement [vtable]
 (global.set $switchstatement.SwitchStatement.vtable (struct.new_with_rtt $switchstatement.SwitchStatement.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_main__void@switchstatement.SwitchStatement) (rtt.canon $switchstatement.SwitchStatement.vtable)))
))
(start $.runtime.init)

