;;; Code for assertsimple.AssertSimple

;;; CLASS  AssertSimple
(type $assertsimple.AssertSimple (struct
 (field $vtable (ref null $assertsimple.AssertSimple.vtable))
 (field $$systemIdentityHashCode@java.lang.Object (mut i32))
))
(type $assertsimple.AssertSimple.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))
(global $assertsimple.AssertSimple.vtable (mut (ref null $assertsimple.AssertSimple.vtable)) (ref.null $assertsimple.AssertSimple.vtable))

;;; AssertSimple()
(func $m_<init>__void@assertsimple.AssertSimple
 (param $this (ref null $assertsimple.AssertSimple))
 (result (ref null $assertsimple.AssertSimple))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void AssertSimple.main(String[] args)
(func $m_main__arrayOf_java_lang_String__void@assertsimple.AssertSimple
 (param $args (ref null $Object.array))
 (block $return.label
  (block
   ;; assert ((1 + 2) == 3);
   ;; unimplemented statement AssertStatement
  )
 )
)

;;; Code for assertsimple.AssertSimple [vtable]
 (global.set $assertsimple.AssertSimple.vtable (struct.new_with_rtt $assertsimple.AssertSimple.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (rtt.canon $assertsimple.AssertSimple.vtable)))
))
(start $.runtime.init)

