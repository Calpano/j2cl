;;; Code for assertsimple.AssertSimple [vtable]
(global $assertsimple.AssertSimple.vtable (mut (ref null $assertsimple.AssertSimple.vtable)) (ref.null $assertsimple.AssertSimple.vtable))

;;; Code for assertsimple.AssertSimple [static fields]
(global $f_$initialized__assertsimple_AssertSimple (mut i32) (i32.const 0))

;;; Code for assertsimple.AssertSimple [CLASS]
(type $assertsimple.AssertSimple (struct
 (field $vtable (ref null $assertsimple.AssertSimple.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $assertsimple.AssertSimple.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))

;;; AssertSimple()
(func $m_<init>__void@assertsimple.AssertSimple
 (param $this (ref null $assertsimple.AssertSimple))
 (result (ref null $assertsimple.AssertSimple))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void AssertSimple.main(String[] args)
(func $m_main__arrayOf_java_lang_String__void@assertsimple.AssertSimple
 (param $args (ref null $javaemul.internal.WasmArray.OfObject))
 (block $return.label
  (block
   ;; assertsimple.AssertSimple.$clinit();
   (call $$clinit__void@assertsimple.AssertSimple )
   ;; assert ((1 + 2) == 3);
   ;; unimplemented statement AssertStatement
  )
 )
)

;;; void AssertSimple.$clinit()
(func $$clinit__void@assertsimple.AssertSimple
 (block $return.label
  (block
   ;; if (assertsimple.AssertSimple.$initialized) return;
   (if (global.get $f_$initialized__assertsimple_AssertSimple)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (assertsimple.AssertSimple.$initialized = true);
   (global.set $f_$initialized__assertsimple_AssertSimple (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> AssertSimple.getClass()
(func $m_getClass__java_lang_Class@assertsimple.AssertSimple
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $assertsimple.AssertSimple))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $assertsimple.AssertSimple.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getAssertsimple.AssertSimple();
   (local.set $return.value (call $$getAssertsimple.AssertSimple__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@assertsimple.AssertSimple)

 ;;; Code for assertsimple.AssertSimple [vtable.init]
 (global.set $assertsimple.AssertSimple.vtable (struct.new_with_rtt $assertsimple.AssertSimple.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@assertsimple.AssertSimple) (rtt.canon $assertsimple.AssertSimple.vtable)))
