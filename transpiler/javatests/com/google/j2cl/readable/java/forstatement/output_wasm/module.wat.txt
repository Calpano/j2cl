;;; Code for forstatement.ForStatement

;;; CLASS  ForStatement

(type $forstatement.ForStatement (struct
))

;;; ForStatement()
(func $<init><>:void@forstatement.ForStatement
 (param $this (ref null $forstatement.ForStatement))
 (result (ref null $forstatement.ForStatement))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; void ForStatement.test()
(func $test<>:void@forstatement.ForStatement
 (param $this (ref null $java.lang.Object))
 (local $i i32)
 (local $count i32)
 (local $l i64)
 (local $count_1 i64)
 (local $a i32)
 (local $b i32)
 (block $return.label
  (block
   ;; LOOP_BREAK: {
   (block $LOOP_BREAK 
    (block
     ;; int i = 0,int count = 0;
     (local.set $i (i32.const 0))
     (local.set $count (i32.const 0))
     
     ;; while (true) {
     (loop
      (block
       ;; if (!(i < 100)) break LOOP_BREAK;
       (if (i32.eqz (i32.lt_s (local.get $i) (i32.const 100))) (then ;; break LOOP_BREAK;
       (br $LOOP_BREAK)
       ))
       ;; LOOP_CONTINUE: {
       (block $LOOP_CONTINUE 
        (block
         ;; (count = (count + 1));
         (local.set $count (i32.add (local.get $count) (i32.const 1)))))
       (block
        ;; (i = (i + 1));
        (local.set $i (i32.add (local.get $i) (i32.const 1)))))(br 0)
      
     )))
   ;; LOOP_BREAK: {
   (block $LOOP_BREAK_1 
    (block
     ;; long l = 0,long count = 0;
     (local.set $l (i64.const 0))
     (local.set $count_1 (i64.const 0))
     
     ;; while (true) {
     (loop
      (block
       ;; if (!(l < 100)) break LOOP_BREAK;
       (if (i32.eqz (i64.lt_s (local.get $l) (i64.const 0))) (then ;; break LOOP_BREAK;
       (br $LOOP_BREAK_1)
       ))
       ;; LOOP_CONTINUE: {
       (block $LOOP_CONTINUE_1 
        (block
         ;; (count = (count + 1));
         (local.set $count_1 (i64.add (local.get $count_1) (i64.const 1)))))
       (block
        ;; (l = (l + 1));
        (local.set $l (i64.add (local.get $l) (i64.const 1)))
        ;; (l = (l + 1));
        (local.set $l (i64.add (local.get $l) (i64.const 1)))))(br 0)
      
     )))
   ;; boolean a = false;
   (local.set $a (i32.const 0))
   
   ;; LOOP_BREAK: {
   (block $LOOP_BREAK_2 
    (block
     ;; while (true) {
     (loop
      (block
       ;; if (!((a = (a | true)),a)) break LOOP_BREAK;
       (if (i32.eqz (block
        (result i32)
        (local.set $a (i32.or (local.get $a) (i32.const 1)))
        (local.get $a)
       )) (then ;; break LOOP_BREAK;
       (br $LOOP_BREAK_2)
       ))
       ;; LOOP_CONTINUE: {
       (block $LOOP_CONTINUE_2 
        (block
        ))
       (block
       ))(br 0)
      
     )))
   ;; boolean b = false;
   (local.set $b (i32.const 0))
   
   ;; LOOP_BREAK: {
   (block $LOOP_BREAK_3 
    (block
     ;; while (true) {
     (loop
      (block
       ;; if (!((b = a),b)) break LOOP_BREAK;
       (if (i32.eqz (block
        (result i32)
        (local.set $b (local.get $a))
        (local.get $b)
       )) (then ;; break LOOP_BREAK;
       (br $LOOP_BREAK_3)
       ))
       ;; LOOP_CONTINUE: {
       (block $LOOP_CONTINUE_3 
        (block
        ))
       (block
       ))(br 0)
      
     ))))
 )
)

