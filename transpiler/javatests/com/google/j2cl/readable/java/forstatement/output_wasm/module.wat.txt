;;; Code for forstatement.ForStatement

;;; CLASS  ForStatement

(type $forstatement.ForStatement (struct
))

;;; ForStatement()
(func $<init><>:void@forstatement.ForStatement
 (param $this (ref null $forstatement.ForStatement))
 (result (ref null $forstatement.ForStatement))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; void ForStatement.test()
(func $test<>:void@forstatement.ForStatement
 (param $this (ref null $java.lang.Object))
 (local $i i32)
 (local $count i32)
 (local $l i64)
 (local $count_1 i64)
 (local $a i32)
 (local $b i32)
 (block $return.label
  (block
   (block
    ;; int i = 0,int count = 0;
    (local.set $i (i32.const 0))
    (local.set $count (i32.const 0))
    
    ;; $BREAK: $LOOP: while (true) {
    (block $$BREAK 
     ;; $LOOP: while (true) {
     (loop $$LOOP 
      (block
       ;; if (!(i < 100)) break $BREAK;
       (if (i32.eqz (i32.lt_s (local.get $i) (i32.const 100))) (then ;; break $BREAK;
       (br $$BREAK)
       ))
       ;; $CONTINUE: {
       (block $$CONTINUE 
        (block
         ;; (count = (count + 1));
         (local.set $count (i32.add (local.get $count) (i32.const 1)))))
       (block
        ;; (i = (i + 1));
        (local.set $i (i32.add (local.get $i) (i32.const 1))))
       ;; continue $LOOP;
       (br $$LOOP)
       
      ))))
   (block
    ;; long l = 0,long count = 0;
    (local.set $l (i64.const 0))
    (local.set $count_1 (i64.const 0))
    
    ;; $BREAK: $LOOP: while (true) {
    (block $$BREAK_1 
     ;; $LOOP: while (true) {
     (loop $$LOOP_1 
      (block
       ;; if (!(l < 100)) break $BREAK;
       (if (i32.eqz (i64.lt_s (local.get $l) (i64.const 0))) (then ;; break $BREAK;
       (br $$BREAK_1)
       ))
       ;; $CONTINUE: {
       (block $$CONTINUE_1 
        (block
         ;; (count = (count + 1));
         (local.set $count_1 (i64.add (local.get $count_1) (i64.const 1)))))
       (block
        ;; (l = (l + 1));
        (local.set $l (i64.add (local.get $l) (i64.const 1)))
        ;; (l = (l + 1));
        (local.set $l (i64.add (local.get $l) (i64.const 1))))
       ;; continue $LOOP;
       (br $$LOOP_1)
       
      ))))
   ;; boolean a = false;
   (local.set $a (i32.const 0))
   
   ;; $BREAK: $LOOP: while (true) {
   (block $$BREAK_2 
    ;; $LOOP: while (true) {
    (loop $$LOOP_2 
     (block
      ;; if (!((a = (a | true)),a)) break $BREAK;
      (if (i32.eqz (block
       (result i32)
       (local.set $a (i32.or (local.get $a) (i32.const 1)))
       (local.get $a)
      )) (then ;; break $BREAK;
      (br $$BREAK_2)
      ))
      ;; $CONTINUE: {
      (block $$CONTINUE_2 
       (block
       ))
      (block
      )
      ;; continue $LOOP;
      (br $$LOOP_2)
      
     )))
   ;; boolean b = false;
   (local.set $b (i32.const 0))
   
   ;; $BREAK: $LOOP: while (true) {
   (block $$BREAK_3 
    ;; $LOOP: while (true) {
    (loop $$LOOP_3 
     (block
      ;; if (!((b = a),b)) break $BREAK;
      (if (i32.eqz (block
       (result i32)
       (local.set $b (local.get $a))
       (local.get $b)
      )) (then ;; break $BREAK;
      (br $$BREAK_3)
      ))
      ;; $CONTINUE: {
      (block $$CONTINUE_3 
       (block
       ))
      (block
      )
      ;; continue $LOOP;
      (br $$LOOP_3)
      
     ))))
 )
)

