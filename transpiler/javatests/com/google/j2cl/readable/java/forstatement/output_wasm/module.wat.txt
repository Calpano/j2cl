;;; Code for forstatement.ForStatement

;;; CLASS  ForStatement
(type $forstatement.ForStatement (struct
 (field $vtable (ref null $forstatement.ForStatement.vtable))
))
(type $forstatement.ForStatement.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_test__void (mut (ref $function.__$void)))
))
(global $forstatement.ForStatement.vtable (mut (ref null $forstatement.ForStatement.vtable)) (ref.null $forstatement.ForStatement.vtable))

;;; ForStatement()
(func $m_<init>__void@forstatement.ForStatement
 (param $this (ref null $forstatement.ForStatement))
 (result (ref null $forstatement.ForStatement))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void ForStatement.test()
(func $m_test__void@forstatement.ForStatement
 (param $this.untyped (ref null $java.lang.Object))
 (local $i i32)
 (local $count i32)
 (local $l i64)
 (local $count_1 i64)
 (local $a i32)
 (local $b i32)
 (local $this (ref null $forstatement.ForStatement))
 (local.set $this (ref.cast $java.lang.Object $forstatement.ForStatement (local.get $this.untyped) (global.get $forstatement.ForStatement.rtt)))
 (block $return.label
  (block
   ;; LOOP: for (int i = 0,int count = 0;(i < 100);(i = (i + 1))) {
   
   
   (local.set $i (i32.const 0))
   (local.set $count (i32.const 0))
   (block $LOOP.BREAK
    (loop
     (br_if 1 (i32.eqz (i32.lt_s (local.get $i) (i32.const 100))))
     (block $LOOP.CONTINUE
      (block
       ;; (count = (count + 1));
       (local.set $count (i32.add (local.get $count) (i32.const 1)))
      )
     )
     (local.set $i (i32.add (local.get $i) (i32.const 1)))
     (br 0)
     
    )
   )
   ;; LOOP: for (long l = 0,long count = 0;(l < 100);(l = (l + 1)),(l = (l + 1))) {
   
   
   (local.set $l (i64.const 0))
   (local.set $count_1 (i64.const 0))
   (block $LOOP_1.BREAK
    (loop
     (br_if 1 (i32.eqz (i64.lt_s (local.get $l) (i64.const 0))))
     (block $LOOP_1.CONTINUE
      (block
       ;; (count = (count + 1));
       (local.set $count_1 (i64.add (local.get $count_1) (i64.const 1)))
      )
     )
     (local.set $l (i64.add (local.get $l) (i64.const 1)))
     (local.set $l (i64.add (local.get $l) (i64.const 1)))
     (br 0)
     
    )
   )
   ;; boolean a = false;
   
   (local.set $a (i32.const 0))
   ;; LOOP: for (;((a = (a | true)),a);) {
   
   (block $LOOP_2.BREAK
    (loop
     (br_if 1 (i32.eqz (block (result i32)
      (local.set $a (i32.or (local.get $a) (i32.const 1)))
      (local.get $a)
     )))
     (block $LOOP_2.CONTINUE
      (block
      )
     )
     (br 0)
     
    )
   )
   ;; boolean b = false;
   
   (local.set $b (i32.const 0))
   ;; LOOP: for (;((b = a),b);) {
   
   (block $LOOP_3.BREAK
    (loop
     (br_if 1 (i32.eqz (block (result i32)
      (local.set $b (local.get $a))
      (local.get $b)
     )))
     (block $LOOP_3.CONTINUE
      (block
      )
     )
     (br 0)
     
    )
   )
   ;; LOOP: for (forstatement.ForStatement.returnsValue();true;forstatement.ForStatement.returnsValue()) {
   
   (drop (call $m_returnsValue__int@forstatement.ForStatement ))
   (block $LOOP_4.BREAK
    (loop
     (br_if 1 (i32.eqz (i32.const 1)))
     (block $LOOP_4.CONTINUE
      (block
      )
     )
     (drop (call $m_returnsValue__int@forstatement.ForStatement ))
     (br 0)
     
    )
   )
  )
 )
)
(elem declare func $m_test__void@forstatement.ForStatement)

;;; int ForStatement.returnsValue()
(func $m_returnsValue__int@forstatement.ForStatement
 (result i32)
 (local $return.value i32)
 (block $return.label
  (block
   ;; return 1;
   (local.set $return.value (i32.const 1))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; Code for forstatement.ForStatement [vtable]
 (global.set $forstatement.ForStatement.vtable (struct.new_with_rtt $forstatement.ForStatement.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_test__void@forstatement.ForStatement) (rtt.canon $forstatement.ForStatement.vtable)))
))
(start $.runtime.init)

