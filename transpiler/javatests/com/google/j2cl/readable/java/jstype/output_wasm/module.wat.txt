;;; Code for jstype.SomeJsType [vtable]
(global $jstype.SomeJsType.vtable (mut (ref null $jstype.SomeJsType.vtable)) (ref.null $jstype.SomeJsType.vtable))

;;; Code for jstype.SomeJsType [static fields]
(global $f_$initialized__jstype_SomeJsType (mut i32) (i32.const 0))

;;; Code for jstype.SomeJsType.Star [static fields]
(global $f_$initialized__jstype_SomeJsType_Star (mut i32) (i32.const 0))

;;; Code for jstype.SomeJsType.Wildcard [static fields]
(global $f_$initialized__jstype_SomeJsType_Wildcard (mut i32) (i32.const 0))

;;; Code for jstype.SomeJsType [CLASS]
(type $jstype.SomeJsType (struct
 (field $vtable (ref null $jstype.SomeJsType.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $f_publicField__jstype_SomeJsType (mut i32))
 (field $f_privateField__jstype_SomeJsType_ (mut i32))
 (field $f_packageField__jstype_SomeJsType (mut i32))
 (field $f_protectedField__jstype_SomeJsType (mut i32))
))
(type $jstype.SomeJsType.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_publicMethod__void (mut (ref $function.__$void)))
 (field $m_packageMethod__void_$pp_jstype (mut (ref $function.__$void)))
 (field $m_protectedMethod__void (mut (ref $function.__$void)))
 (field $m_useFieldsAndMethods__void (mut (ref $function.__$void)))
 (field $m_testStarAndWildCard__jstype_SomeJsType_Star__jstype_SomeJsType_Wildcard__jstype_SomeJsType_Wildcard (mut (ref $function.$java.lang.Object__$java.lang.Object__$java.lang.Object)))
))

;;; SomeJsType()
(func $m_<init>__void@jstype.SomeJsType
 (param $this (ref null $jstype.SomeJsType))
 (result (ref null $jstype.SomeJsType))
 (block $return.label
  (block
   ;; jstype.SomeJsType.$clinit();
   (call $$clinit__void@jstype.SomeJsType )
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void SomeJsType.publicMethod()
(func $m_publicMethod__void@jstype.SomeJsType
 (param $this.untyped (ref null $java.lang.Object))
 (local $this (ref null $jstype.SomeJsType))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jstype.SomeJsType.rtt)))
 (block $return.label
  (block
  )
 )
)
(elem declare func $m_publicMethod__void@jstype.SomeJsType)

;;; void SomeJsType.privateMethod()
(func $m_privateMethod__void_$p_jstype_SomeJsType@jstype.SomeJsType
 (param $this (ref null $jstype.SomeJsType))
 (block $return.label
  (block
  )
 )
)

;;; void SomeJsType.packageMethod()
(func $m_packageMethod__void_$pp_jstype@jstype.SomeJsType
 (param $this.untyped (ref null $java.lang.Object))
 (local $this (ref null $jstype.SomeJsType))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jstype.SomeJsType.rtt)))
 (block $return.label
  (block
  )
 )
)
(elem declare func $m_packageMethod__void_$pp_jstype@jstype.SomeJsType)

;;; void SomeJsType.protectedMethod()
(func $m_protectedMethod__void@jstype.SomeJsType
 (param $this.untyped (ref null $java.lang.Object))
 (local $this (ref null $jstype.SomeJsType))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jstype.SomeJsType.rtt)))
 (block $return.label
  (block
  )
 )
)
(elem declare func $m_protectedMethod__void@jstype.SomeJsType)

;;; void SomeJsType.useFieldsAndMethods()
(func $m_useFieldsAndMethods__void@jstype.SomeJsType
 (param $this.untyped (ref null $java.lang.Object))
 (local $value i32)
 (local $this (ref null $jstype.SomeJsType))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jstype.SomeJsType.rtt)))
 (block $return.label
  (block
   ;; int value = (((SomeJsType.this.publicField + SomeJsType.this.privateField) + SomeJsType.this.packageField) + SomeJsType.this.protectedField);
   
   (local.set $value (i32.add (i32.add (i32.add (struct.get $jstype.SomeJsType $f_publicField__jstype_SomeJsType(local.get $this)) (struct.get $jstype.SomeJsType $f_privateField__jstype_SomeJsType_(local.get $this))) (struct.get $jstype.SomeJsType $f_packageField__jstype_SomeJsType(local.get $this))) (struct.get $jstype.SomeJsType $f_protectedField__jstype_SomeJsType(local.get $this))))
   ;; SomeJsType.this.publicMethod();
   (call_ref (local.get $this)(struct.get $jstype.SomeJsType.vtable $m_publicMethod__void (struct.get $jstype.SomeJsType $vtable(local.get $this))))
   ;; SomeJsType.this.privateMethod();
   (call $m_privateMethod__void_$p_jstype_SomeJsType@jstype.SomeJsType (local.get $this))
   ;; SomeJsType.this.packageMethod();
   (call_ref (local.get $this)(struct.get $jstype.SomeJsType.vtable $m_packageMethod__void_$pp_jstype (struct.get $jstype.SomeJsType $vtable(local.get $this))))
   ;; SomeJsType.this.protectedMethod();
   (call_ref (local.get $this)(struct.get $jstype.SomeJsType.vtable $m_protectedMethod__void (struct.get $jstype.SomeJsType $vtable(local.get $this))))
  )
 )
)
(elem declare func $m_useFieldsAndMethods__void@jstype.SomeJsType)

;;; Wildcard SomeJsType.testStarAndWildCard(Star s, Wildcard w)
(func $m_testStarAndWildCard__jstype_SomeJsType_Star__jstype_SomeJsType_Wildcard__jstype_SomeJsType_Wildcard@jstype.SomeJsType
 (param $this.untyped (ref null $java.lang.Object))
 (param $s (ref null $java.lang.Object))
 (param $w (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (local $object (ref null $java.lang.Object))
 (local $star (ref null $java.lang.Object))
 (local $this (ref null $jstype.SomeJsType))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jstype.SomeJsType.rtt)))
 (block $return.label
  (block
   ;; Object object = new Object.<init>();
   
   (local.set $object (call $m_<init>__void@java.lang.Object (struct.new_with_rtt $java.lang.Object (global.get $java.lang.Object.vtable) (i32.const 0) (global.get $java.lang.Object.rtt))))
   ;; Star star = ((Star) java.lang.Double.valueOf(3.0));
   
   (local.set $star (call $m_valueOf__double__java_lang_Double@java.lang.Double (f64.const 3.0)))
   ;; return ((Wildcard) star);
   (local.set $return.value (local.get $star))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_testStarAndWildCard__jstype_SomeJsType_Star__jstype_SomeJsType_Wildcard__jstype_SomeJsType_Wildcard@jstype.SomeJsType)

;;; void SomeJsType.$clinit()
(func $$clinit__void@jstype.SomeJsType
 (block $return.label
  (block
   ;; if (jstype.SomeJsType.$initialized) return;
   (if (global.get $f_$initialized__jstype_SomeJsType)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jstype.SomeJsType.$initialized = true);
   (global.set $f_$initialized__jstype_SomeJsType (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> SomeJsType.getClass()
(func $m_getClass__java_lang_Class@jstype.SomeJsType
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $jstype.SomeJsType))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jstype.SomeJsType.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJstype.SomeJsType();
   (local.set $return.value (call $$getJstype.SomeJsType__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jstype.SomeJsType)

;;; Code for jstype.SomeJsType.Star [INTERFACE]

;;; void Star.$clinit()
(func $$clinit__void@jstype.SomeJsType.Star
 (block $return.label
  (block
   ;; if (jstype.SomeJsType.Star.$initialized) return;
   (if (global.get $f_$initialized__jstype_SomeJsType_Star)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jstype.SomeJsType.Star.$initialized = true);
   (global.set $f_$initialized__jstype_SomeJsType_Star (i32.const 1))
  )
 )
)

;;; Class<?> Star.getClass()
(func $m_getClass__java_lang_Class@jstype.SomeJsType.Star
 (param $this (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJstype.SomeJsType.Star();
   (local.set $return.value (call $$getJstype.SomeJsType.Star__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jstype.SomeJsType.Star)

;;; Code for jstype.SomeJsType.Wildcard [INTERFACE]

;;; void Wildcard.$clinit()
(func $$clinit__void@jstype.SomeJsType.Wildcard
 (block $return.label
  (block
   ;; if (jstype.SomeJsType.Wildcard.$initialized) return;
   (if (global.get $f_$initialized__jstype_SomeJsType_Wildcard)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jstype.SomeJsType.Wildcard.$initialized = true);
   (global.set $f_$initialized__jstype_SomeJsType_Wildcard (i32.const 1))
  )
 )
)

;;; Class<?> Wildcard.getClass()
(func $m_getClass__java_lang_Class@jstype.SomeJsType.Wildcard
 (param $this (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJstype.SomeJsType.Wildcard();
   (local.set $return.value (call $$getJstype.SomeJsType.Wildcard__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jstype.SomeJsType.Wildcard)

 ;;; Code for jstype.SomeJsType [vtable.init]
 (global.set $jstype.SomeJsType.vtable (struct.new_with_rtt $jstype.SomeJsType.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@jstype.SomeJsType) (ref.func $m_publicMethod__void@jstype.SomeJsType) (ref.func $m_packageMethod__void_$pp_jstype@jstype.SomeJsType) (ref.func $m_protectedMethod__void@jstype.SomeJsType) (ref.func $m_useFieldsAndMethods__void@jstype.SomeJsType) (ref.func $m_testStarAndWildCard__jstype_SomeJsType_Star__jstype_SomeJsType_Wildcard__jstype_SomeJsType_Wildcard@jstype.SomeJsType) (rtt.canon $jstype.SomeJsType.vtable)))
