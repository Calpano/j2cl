;;; Code for jstype.SomeJsType

;;; CLASS  SomeJsType
(type $jstype.SomeJsType (struct
 (field $publicField@jstype.SomeJsType (mut i32))
 (field $privateField@jstype.SomeJsType (mut i32))
 (field $packageField@jstype.SomeJsType (mut i32))
 (field $protectedField@jstype.SomeJsType (mut i32))
))

;;; SomeJsType()
(func $<init><>:void@jstype.SomeJsType
 (param $this (ref null $jstype.SomeJsType))
 (result (ref null $jstype.SomeJsType))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; void SomeJsType.publicMethod()
(func $publicMethod<>:void@jstype.SomeJsType
 (param $this (ref null $java.lang.Object))
 (block $return.label
  (block
  )
 )
)

;;; void SomeJsType.privateMethod()
(func $privateMethod<>:void@jstype.SomeJsType
 (param $this (ref null $jstype.SomeJsType))
 (block $return.label
  (block
  )
 )
)

;;; void SomeJsType.packageMethod()
(func $packageMethod<>:void@jstype.SomeJsType
 (param $this (ref null $java.lang.Object))
 (block $return.label
  (block
  )
 )
)

;;; void SomeJsType.protectedMethod()
(func $protectedMethod<>:void@jstype.SomeJsType
 (param $this (ref null $java.lang.Object))
 (block $return.label
  (block
  )
 )
)

;;; void SomeJsType.useFieldsAndMethods()
(func $useFieldsAndMethods<>:void@jstype.SomeJsType
 (param $this (ref null $java.lang.Object))
 (local $value i32)
 (block $return.label
  (block
   ;; int value = (((SomeJsType.this.publicField + SomeJsType.this.privateField) + SomeJsType.this.packageField) + SomeJsType.this.protectedField);
   
   (local.set $value (i32.add (i32.add (i32.add (struct.get $jstype.SomeJsType $publicField@jstype.SomeJsType  (ref.null $jstype.SomeJsType)) (struct.get $jstype.SomeJsType $privateField@jstype.SomeJsType  (ref.null $jstype.SomeJsType))) (struct.get $jstype.SomeJsType $packageField@jstype.SomeJsType  (ref.null $jstype.SomeJsType))) (struct.get $jstype.SomeJsType $protectedField@jstype.SomeJsType  (ref.null $jstype.SomeJsType))))
   ;; SomeJsType.this.publicMethod();
   
   ;; SomeJsType.this.privateMethod();
   
   ;; SomeJsType.this.packageMethod();
   
   ;; SomeJsType.this.protectedMethod();
   
  )
 )
)

;;; Wildcard SomeJsType.testStarAndWildCard(Star s, Wildcard w)
(func $testStarAndWildCard<jstype.SomeJsType.Star|jstype.SomeJsType.Wildcard>:jstype.SomeJsType.Wildcard@jstype.SomeJsType
 (param $this (ref null $java.lang.Object))
 (param $s (ref null $java.lang.Object))
 (param $w (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (local $object (ref null $java.lang.Object))
 (local $star (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; Object object = new Object.<init>();
   
   (local.set $object (call $<init><>:void@java.lang.Object (struct.new_with_rtt $java.lang.Object (global.get $java.lang.Object.rtt))))
   ;; Star star = ((Star) ((Object) 3.0));
   
   (local.set $star (ref.null $java.lang.Object))
   ;; return ((Wildcard) star);
   (local.set $return.value (local.get $star))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; INTERFACE  Star

;;; INTERFACE  Wildcard

