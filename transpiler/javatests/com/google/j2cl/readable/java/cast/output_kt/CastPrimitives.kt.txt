package cast

import javaemul.lang.*

open class CastPrimitives {
 open fun testPrimitiveCasts() {
  var b: kotlin.Byte = 1
  var c: kotlin.Char = '\u0001'
  var s: kotlin.Short = 1
  var i: kotlin.Int = 1
  var l: kotlin.Long = 1L
  var f: kotlin.Float = 1.1f
  var d: kotlin.Double = 1.1
  b = b
  c = b.toInt().toChar()
  s = b.toShort()
  i = b.toInt()
  l = b.toLong()
  f = b.toFloat()
  d = b.toDouble()
  b = c.code.toByte()
  c = c
  s = c.code.toShort()
  i = c.code
  l = c.code.toLong()
  f = c.code.toFloat()
  d = c.code.toDouble()
  b = s.toByte()
  c = s.toInt().toChar()
  s = s
  i = s.toInt()
  l = s.toLong()
  f = s.toFloat()
  d = s.toDouble()
  b = i.toByte()
  c = i.toChar()
  s = i.toShort()
  i = i
  l = i.toLong()
  f = i.toFloat()
  d = i.toDouble()
  b = l.toByte()
  c = l.toInt().toChar()
  s = l.toShort()
  i = l.toInt()
  l = l
  f = l.toFloat()
  d = l.toDouble()
  b = f.toInt().toByte()
  c = f.toInt().toChar()
  s = f.toInt().toShort()
  i = f.toInt()
  l = f.toLong()
  f = f
  d = f.toDouble()
  b = d.toInt().toByte()
  c = d.toInt().toChar()
  s = d.toInt().toShort()
  i = d.toInt()
  l = d.toLong()
  f = d.toFloat()
  d = d
 }

 open fun testReferenceToPrimitive() {
  val o: kotlin.Any? = kotlin.Any()
  val bool: kotlin.Boolean = o as kotlin.Boolean
  val b: kotlin.Byte = o as kotlin.Byte
  val c: kotlin.Char = o as kotlin.Char
  val s: kotlin.Short = o as kotlin.Short
  val i: kotlin.Int = o as kotlin.Int
  val l: kotlin.Long = o as kotlin.Long
  val f: kotlin.Float = o as kotlin.Float
  val d: kotlin.Double = o as kotlin.Double
 }

 open fun testUnboxAndWiden() {
  val boxedByte: kotlin.Byte? = kotlin.Byte.valueOf(0.toByte())
  val s: kotlin.Short = boxedByte!!.toByte().toShort()
  val i: kotlin.Int = boxedByte!!.toByte().toInt()
  val l: kotlin.Long = boxedByte!!.toByte().toLong()
  val f: kotlin.Float = boxedByte!!.toByte().toFloat()
  val d: kotlin.Double = boxedByte!!.toByte().toDouble()
 }

 open fun testImplicitArgumentCasts() {
  val b: kotlin.Byte = 127
  val c: kotlin.Char = '\uFFFF'
  val s: kotlin.Short = 32767
  val i: kotlin.Int = 2147483647
  val l: kotlin.Long = 9223372036854775807L
  val f: kotlin.Float = 3.4028235E38f
  val d: kotlin.Double = 1.7976931348623157E308
  cast.CastPrimitives.getShort(b.toShort())
  cast.CastPrimitives.getInt(b.toInt())
  cast.CastPrimitives.getLong(b.toLong())
  cast.CastPrimitives.getFloat(b.toFloat())
  cast.CastPrimitives.getDouble(b.toDouble())
  cast.CastPrimitives.getFloat(l.toFloat())
  cast.CastPrimitives.getDouble(l.toDouble())
  cast.CastPrimitives.getDouble(f.toDouble())
  cast.CastPrimitives.IntValueHolder(b.toInt())
  cast.CastPrimitives.IntValueHolder(c.code)
  cast.CastPrimitives.IntValueHolder(s.toInt())
  cast.CastPrimitives.LongValueHolder(b.toLong())
  cast.CastPrimitives.LongValueHolder(c.code.toLong())
  cast.CastPrimitives.LongValueHolder(i.toLong())
 }

 open fun testImplicitLongAssignmentCasts() {
  val fbyte: kotlin.Byte = 11
  val fchar: kotlin.Char = '\u000C'
  val fshort: kotlin.Short = 13
  val fint: kotlin.Int = 14
  val flong: kotlin.Long = 15L
  val ffloat: kotlin.Float = 16.0f
  val fdouble: kotlin.Double = 17.0
  var tlong: kotlin.Long = 0L
  if (true) {
   tlong = fbyte.toLong()
   tlong = flong
  }
  if (true) {
   tlong = fint.toLong()
   tlong = tlong + fint.toLong()
   tlong = tlong.shl(fint)
  }
  if (true) {
   tlong = tlong + fchar.code.toLong()
   tlong = tlong + flong
   tlong = (tlong.toFloat() + ffloat).toLong()
  }
  if (true) {
   tlong = flong * fint.toLong()
   tlong = flong.shr(fint)
  }
  if (true) {
   tlong = flong + fshort.toLong()
   tlong = flong + flong
  }
  if (true) {
   tlong = flong.shl(tlong.toInt())
   tlong = tlong.shl(flong.toInt())
  }
  if (true) {
   tlong = (0 + 1).toLong() + 2L
  }
 }

 companion object {
  @kotlin.jvm.JvmStatic
  fun getShort(value: kotlin.Short): kotlin.Short {
   return value
  }

  @kotlin.jvm.JvmStatic
  fun getInt(value: kotlin.Int): kotlin.Int {
   return value
  }

  @kotlin.jvm.JvmStatic
  fun getLong(value: kotlin.Long): kotlin.Long {
   return value
  }

  @kotlin.jvm.JvmStatic
  fun getFloat(value: kotlin.Float): kotlin.Float {
   return value
  }

  @kotlin.jvm.JvmStatic
  fun getDouble(value: kotlin.Double): kotlin.Double {
   return value
  }
 }

 open class IntValueHolder {
  constructor(value: kotlin.Int)
 }

 open class LongValueHolder {
  constructor(value: kotlin.Long)
 }
}
