package boundedtypesupercall

open class Main {}

abstract class Foo {
 constructor(foo: T) {}

 abstract open fun foo()
}

open class Bar {
 open fun getSomething(): T {
  return null
 }

 open fun doSomething(): boundedtypesupercall.Main.Foo<T>? {
  return TODO("expression.qualify needs rendering: Bar.this)")
 }
}

open class `1`: boundedtypesupercall.Main.Foo<T> {
 internal constructor(`$_0`: T) {
  super(`$_0`)
 }

 val `this`: boundedtypesupercall.Main.Bar<T>?

 open fun foo() {}
}
