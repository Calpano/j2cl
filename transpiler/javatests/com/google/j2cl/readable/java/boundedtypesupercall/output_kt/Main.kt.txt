package boundedtypesupercall

open class Main {
 abstract class Foo<T> {
  constructor(foo: T?)

  abstract open fun foo()
 }

 open class Bar<T: kotlin.Comparable<*>?> {
  open fun getSomething(): T? {
   return null
  }

  open fun doSomething(): boundedtypesupercall.Main.Foo<T>? {
   return object : Foo<T>(this.getSomething()) {
    open override fun foo() {}
   }
  }
 }
}
