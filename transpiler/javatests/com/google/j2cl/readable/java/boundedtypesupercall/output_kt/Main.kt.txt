package boundedtypesupercall

open class Main {}

abstract class Foo {
 fun <init>(foo: T): boundedtypesupercall.Main.Foo<T> {}

 fun foo()
}

open class Bar {
 fun getSomething(): T {
  return null
 }

 fun doSomething(): boundedtypesupercall.Main.Foo<T>? {
  return TODO("expression.qualify needs rendering: Bar.this)")
 }
}

open class `1`: boundedtypesupercall.Main.Foo<T> {
 fun <init>(`$_0`: T): boundedtypesupercall.Main.Bar.`1`<T> {
  super(`$_0`)
 }

 fun foo() {}
}
