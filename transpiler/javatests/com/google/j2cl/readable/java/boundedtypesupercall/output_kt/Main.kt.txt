// Generated from "boundedtypesupercall/Main.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress("REPEATED_BOUND", "UNNECESSARY_NOT_NULL_ASSERTION", "VARIABLE_WITH_REDUNDANT_INITIALIZER", "UNCHECKED_CAST", "PARAMETER_NAME_CHANGED_ON_OVERRIDE", "ALWAYS_NULL", "SENSELESS_COMPARISON", "UNUSED_PARAMETER")

package boundedtypesupercall

import javaemul.lang.*
import kotlin.Comparable
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("BoundedtypesupercallMain", exact = true)
open class Main {
 @ObjCName("BoundedtypesupercallMain_Foo", exact = true)
 abstract class Foo<T> {
  constructor(
   @ObjCName("Id") foo: T
  )

  @ObjCName("foo")
  abstract fun foo()
 }

 @ObjCName("BoundedtypesupercallMain_Bar", exact = true)
 open class Bar<T: Comparable<*>?> {
  @ObjCName("getSomething")
  open fun getSomething(): T {
   return null as T
  }

  @ObjCName("doSomething")
  open fun doSomething(): Main.Foo<T>? {
   return object : Main.Foo<T>(this@Bar.getSomething()) {
    open override fun foo() {}
   }
  }
 }
}
