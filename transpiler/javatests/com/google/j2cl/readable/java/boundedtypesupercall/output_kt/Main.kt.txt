// Generated from "boundedtypesupercall/Main.java"
@file:OptIn(ExperimentalObjCName::class)

package boundedtypesupercall

import javaemul.lang.*
import boundedtypesupercall.Main
import kotlin.Comparable
import kotlin.OptIn
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("BoundedtypesupercallMain", exact = true)
open class Main {
 abstract class Foo<T> {
  constructor(
   @ObjCName("withId", exact = false) foo: T
  )

  abstract fun foo()
 }

 open class Bar<T: Comparable<*>?> {
  open fun getSomething(): T {
   return null as T
  }

  open fun doSomething(): Main.Foo<T>? {
   return object : Main.Foo<T>(this@Bar.getSomething()) {
    open override fun foo() {}
   }
  }
 }
}
