;;; Code for devirtualizedcalls.ArrayCalls [vtable]
(global $devirtualizedcalls.ArrayCalls.vtable (mut (ref null $devirtualizedcalls.ArrayCalls.vtable)) (ref.null $devirtualizedcalls.ArrayCalls.vtable))

;;; Code for devirtualizedcalls.CharSequenceCalls [vtable]
(global $devirtualizedcalls.CharSequenceCalls.vtable (mut (ref null $devirtualizedcalls.CharSequenceCalls.vtable)) (ref.null $devirtualizedcalls.CharSequenceCalls.vtable))

;;; Code for devirtualizedcalls.NumberCalls [vtable]
(global $devirtualizedcalls.NumberCalls.vtable (mut (ref null $devirtualizedcalls.NumberCalls.vtable)) (ref.null $devirtualizedcalls.NumberCalls.vtable))

;;; Code for devirtualizedcalls.ObjectCalls [vtable]
(global $devirtualizedcalls.ObjectCalls.vtable (mut (ref null $devirtualizedcalls.ObjectCalls.vtable)) (ref.null $devirtualizedcalls.ObjectCalls.vtable))

;;; Code for devirtualizedcalls.StringCalls [vtable]
(global $devirtualizedcalls.StringCalls.vtable (mut (ref null $devirtualizedcalls.StringCalls.vtable)) (ref.null $devirtualizedcalls.StringCalls.vtable))

;;; Code for devirtualizedcalls.ArrayCalls [static fields]
(global $f_$initialized__devirtualizedcalls_ArrayCalls (mut i32) (i32.const 0))

;;; Code for devirtualizedcalls.CharSequenceCalls [static fields]
(global $f_$initialized__devirtualizedcalls_CharSequenceCalls (mut i32) (i32.const 0))

;;; Code for devirtualizedcalls.NumberCalls [static fields]
(global $f_$initialized__devirtualizedcalls_NumberCalls (mut i32) (i32.const 0))

;;; Code for devirtualizedcalls.ObjectCalls [static fields]
(global $f_$initialized__devirtualizedcalls_ObjectCalls (mut i32) (i32.const 0))

;;; Code for devirtualizedcalls.StringCalls [static fields]
(global $f_$initialized__devirtualizedcalls_StringCalls (mut i32) (i32.const 0))

;;; Code for devirtualizedcalls.ArrayCalls [CLASS]
(type $devirtualizedcalls.ArrayCalls (struct
 (field $vtable (ref null $devirtualizedcalls.ArrayCalls.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $devirtualizedcalls.ArrayCalls.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_main__void (mut (ref $function.__$void)))
))

;;; ArrayCalls()
(func $m_<init>__void@devirtualizedcalls.ArrayCalls
 (param $this (ref null $devirtualizedcalls.ArrayCalls))
 (result (ref null $devirtualizedcalls.ArrayCalls))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void ArrayCalls.main()
(func $m_main__void@devirtualizedcalls.ArrayCalls
 (param $this.untyped (ref null $java.lang.Object))
 (local $array2d (ref null $javaemul.internal.WasmArray.OfObject))
 (local $$array_literal (ref null $javaemul.internal.WasmArray.OfInt))
 (local $length1 i32)
 (local $$cast_expression (ref null $java.lang.Object))
 (local $length2 i32)
 (local $this (ref null $devirtualizedcalls.ArrayCalls))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $devirtualizedcalls.ArrayCalls.rtt)))
 (block $return.label
  (block
   ;; Object[][] array2d = javaemul.internal.WasmArrayHelper.createArray((int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 1),($array_literal.elements[1] = 1),$array_literal),-1);
   
   (local.set $array2d (call $m_createArray__arrayOf_int__int__arrayOf_java_lang_Object@javaemul.internal.WasmArrayHelper (block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal)) (i32.const 0) (i32.const 1))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal)) (i32.const 1) (i32.const 1))
    (local.get $$array_literal)
   )(i32.const -1)))
   ;; int length1 = <expr>;
   
   (local.set $length1 (array.len $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(block (result (ref null $javaemul.internal.WasmArray.OfObject))
    
    (local.set $$cast_expression (array.get $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $array2d)) (i32.const 0)))
    (if (result (ref null $javaemul.internal.WasmArray.OfObject)) (ref.is_null (local.get $$cast_expression)) (then (ref.null $javaemul.internal.WasmArray.OfObject)) (else (ref.cast (local.get $$cast_expression) (global.get $javaemul.internal.WasmArray.OfObject.rtt))))
   ))))
   ;; int length2 = <expr>;
   
   (local.set $length2 (array.len $java.lang.Object.array (struct.get $javaemul.internal.WasmArray.OfObject $f_elements__javaemul_internal_WasmArray_OfObject(local.get $array2d))))
  )
 )
)
(elem declare func $m_main__void@devirtualizedcalls.ArrayCalls)

;;; void ArrayCalls.$clinit()
(func $$clinit__void@devirtualizedcalls.ArrayCalls
 (block $return.label
  (block
   ;; if (devirtualizedcalls.ArrayCalls.$initialized) return;
   (if (global.get $f_$initialized__devirtualizedcalls_ArrayCalls)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (devirtualizedcalls.ArrayCalls.$initialized = true);
   (global.set $f_$initialized__devirtualizedcalls_ArrayCalls (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> ArrayCalls.getClass()
(func $m_getClass__java_lang_Class@devirtualizedcalls.ArrayCalls
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $devirtualizedcalls.ArrayCalls))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $devirtualizedcalls.ArrayCalls.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getDevirtualizedcalls.ArrayCalls();
   (local.set $return.value (call $$getDevirtualizedcalls.ArrayCalls__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@devirtualizedcalls.ArrayCalls)

;;; Code for devirtualizedcalls.CharSequenceCalls [CLASS]
(type $devirtualizedcalls.CharSequenceCalls (struct
 (field $vtable (ref null $devirtualizedcalls.CharSequenceCalls.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $devirtualizedcalls.CharSequenceCalls.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_test__java_lang_CharSequence__void (mut (ref $function.$java.lang.Object__$void)))
 (field $m_main__void (mut (ref $function.__$void)))
))

;;; CharSequenceCalls()
(func $m_<init>__void@devirtualizedcalls.CharSequenceCalls
 (param $this (ref null $devirtualizedcalls.CharSequenceCalls))
 (result (ref null $devirtualizedcalls.CharSequenceCalls))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void CharSequenceCalls.test(CharSequence cs)
(func $m_test__java_lang_CharSequence__void@devirtualizedcalls.CharSequenceCalls
 (param $this.untyped (ref null $java.lang.Object))
 (param $cs (ref null $java.lang.Object))
 (local $this (ref null $devirtualizedcalls.CharSequenceCalls))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $devirtualizedcalls.CharSequenceCalls.rtt)))
 (block $return.label
  (block
   ;; cs.charAt(0);
   (drop (i32.const 0))
  )
 )
)
(elem declare func $m_test__java_lang_CharSequence__void@devirtualizedcalls.CharSequenceCalls)

;;; void CharSequenceCalls.main()
(func $m_main__void@devirtualizedcalls.CharSequenceCalls
 (param $this.untyped (ref null $java.lang.Object))
 (local $s (ref null $java.lang.String))
 (local $this (ref null $devirtualizedcalls.CharSequenceCalls))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $devirtualizedcalls.CharSequenceCalls.rtt)))
 (block $return.label
  (block
   ;; String s = javaemul.internal.StringPool.$getString_|s|();
   
   (local.set $s (call $$getString_|s|__java_lang_String@javaemul.internal.StringPool ))
   ;; CharSequenceCalls.this.test(s);
   (call_ref (local.get $this)(local.get $s)(struct.get $devirtualizedcalls.CharSequenceCalls.vtable $m_test__java_lang_CharSequence__void (struct.get $devirtualizedcalls.CharSequenceCalls $vtable(local.get $this))))
  )
 )
)
(elem declare func $m_main__void@devirtualizedcalls.CharSequenceCalls)

;;; void CharSequenceCalls.$clinit()
(func $$clinit__void@devirtualizedcalls.CharSequenceCalls
 (block $return.label
  (block
   ;; if (devirtualizedcalls.CharSequenceCalls.$initialized) return;
   (if (global.get $f_$initialized__devirtualizedcalls_CharSequenceCalls)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (devirtualizedcalls.CharSequenceCalls.$initialized = true);
   (global.set $f_$initialized__devirtualizedcalls_CharSequenceCalls (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> CharSequenceCalls.getClass()
(func $m_getClass__java_lang_Class@devirtualizedcalls.CharSequenceCalls
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $devirtualizedcalls.CharSequenceCalls))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $devirtualizedcalls.CharSequenceCalls.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getDevirtualizedcalls.CharSequenceCalls();
   (local.set $return.value (call $$getDevirtualizedcalls.CharSequenceCalls__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@devirtualizedcalls.CharSequenceCalls)

;;; Code for devirtualizedcalls.NumberCalls [CLASS]
(type $devirtualizedcalls.NumberCalls (struct
 (field $vtable (ref null $devirtualizedcalls.NumberCalls.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $devirtualizedcalls.NumberCalls.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_main__void (mut (ref $function.__$void)))
))

;;; NumberCalls()
(func $m_<init>__void@devirtualizedcalls.NumberCalls
 (param $this (ref null $devirtualizedcalls.NumberCalls))
 (result (ref null $devirtualizedcalls.NumberCalls))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void NumberCalls.main()
(func $m_main__void@devirtualizedcalls.NumberCalls
 (param $this.untyped (ref null $java.lang.Object))
 (local $i (ref null $java.lang.Number))
 (local $ii (ref null $java.lang.Integer))
 (local $d (ref null $java.lang.Number))
 (local $dd (ref null $java.lang.Double))
 (local $s (ref null $java.lang.Number))
 (local $ss (ref null $java.lang.Short))
 (local $b (ref null $java.lang.Number))
 (local $bb (ref null $java.lang.Byte))
 (local $f (ref null $java.lang.Number))
 (local $ff (ref null $java.lang.Float))
 (local $l (ref null $java.lang.Number))
 (local $ll (ref null $java.lang.Long))
 (local $c (ref null $java.lang.Character))
 (local $bool (ref null $java.lang.Boolean))
 (local $this (ref null $devirtualizedcalls.NumberCalls))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $devirtualizedcalls.NumberCalls.rtt)))
 (block $return.label
  (block
   ;; Number i = new Integer.<init>(1);
   
   (local.set $i (call $m_<init>__int__void@java.lang.Integer (struct.new_with_rtt $java.lang.Integer (global.get $java.lang.Integer.vtable) (i32.const 0) (i32.const 0) (global.get $java.lang.Integer.rtt))(i32.const 1)))
   ;; i.byteValue();
   (drop (call_ref (local.get $i)(struct.get $java.lang.Number.vtable $m_byteValue__byte (struct.get $java.lang.Number $vtable(local.get $i)))))
   ;; i.doubleValue();
   (drop (call_ref (local.get $i)(struct.get $java.lang.Number.vtable $m_doubleValue__double (struct.get $java.lang.Number $vtable(local.get $i)))))
   ;; i.floatValue();
   (drop (call_ref (local.get $i)(struct.get $java.lang.Number.vtable $m_floatValue__float (struct.get $java.lang.Number $vtable(local.get $i)))))
   ;; i.intValue();
   (drop (call_ref (local.get $i)(struct.get $java.lang.Number.vtable $m_intValue__int (struct.get $java.lang.Number $vtable(local.get $i)))))
   ;; i.longValue();
   (drop (call_ref (local.get $i)(struct.get $java.lang.Number.vtable $m_longValue__long (struct.get $java.lang.Number $vtable(local.get $i)))))
   ;; i.shortValue();
   (drop (call_ref (local.get $i)(struct.get $java.lang.Number.vtable $m_shortValue__short (struct.get $java.lang.Number $vtable(local.get $i)))))
   ;; Integer ii = new Integer.<init>(1);
   
   (local.set $ii (call $m_<init>__int__void@java.lang.Integer (struct.new_with_rtt $java.lang.Integer (global.get $java.lang.Integer.vtable) (i32.const 0) (i32.const 0) (global.get $java.lang.Integer.rtt))(i32.const 1)))
   ;; ii.byteValue();
   (drop (call_ref (local.get $ii)(struct.get $java.lang.Integer.vtable $m_byteValue__byte (struct.get $java.lang.Integer $vtable(local.get $ii)))))
   ;; ii.doubleValue();
   (drop (call_ref (local.get $ii)(struct.get $java.lang.Integer.vtable $m_doubleValue__double (struct.get $java.lang.Integer $vtable(local.get $ii)))))
   ;; ii.floatValue();
   (drop (call_ref (local.get $ii)(struct.get $java.lang.Integer.vtable $m_floatValue__float (struct.get $java.lang.Integer $vtable(local.get $ii)))))
   ;; ii.intValue();
   (drop (call_ref (local.get $ii)(struct.get $java.lang.Integer.vtable $m_intValue__int (struct.get $java.lang.Integer $vtable(local.get $ii)))))
   ;; ii.longValue();
   (drop (call_ref (local.get $ii)(struct.get $java.lang.Integer.vtable $m_longValue__long (struct.get $java.lang.Integer $vtable(local.get $ii)))))
   ;; ii.shortValue();
   (drop (call_ref (local.get $ii)(struct.get $java.lang.Integer.vtable $m_shortValue__short (struct.get $java.lang.Integer $vtable(local.get $ii)))))
   ;; Number d = new Double.<init>(1.1);
   
   (local.set $d (call $m_<init>__double__void@java.lang.Double (struct.new_with_rtt $java.lang.Double (global.get $java.lang.Double.vtable) (i32.const 0) (f64.const 0.0) (global.get $java.lang.Double.rtt))(f64.const 1.1)))
   ;; d.byteValue();
   (drop (call_ref (local.get $d)(struct.get $java.lang.Number.vtable $m_byteValue__byte (struct.get $java.lang.Number $vtable(local.get $d)))))
   ;; d.doubleValue();
   (drop (call_ref (local.get $d)(struct.get $java.lang.Number.vtable $m_doubleValue__double (struct.get $java.lang.Number $vtable(local.get $d)))))
   ;; d.floatValue();
   (drop (call_ref (local.get $d)(struct.get $java.lang.Number.vtable $m_floatValue__float (struct.get $java.lang.Number $vtable(local.get $d)))))
   ;; d.intValue();
   (drop (call_ref (local.get $d)(struct.get $java.lang.Number.vtable $m_intValue__int (struct.get $java.lang.Number $vtable(local.get $d)))))
   ;; d.longValue();
   (drop (call_ref (local.get $d)(struct.get $java.lang.Number.vtable $m_longValue__long (struct.get $java.lang.Number $vtable(local.get $d)))))
   ;; d.shortValue();
   (drop (call_ref (local.get $d)(struct.get $java.lang.Number.vtable $m_shortValue__short (struct.get $java.lang.Number $vtable(local.get $d)))))
   ;; Double dd = new Double.<init>(1.1);
   
   (local.set $dd (call $m_<init>__double__void@java.lang.Double (struct.new_with_rtt $java.lang.Double (global.get $java.lang.Double.vtable) (i32.const 0) (f64.const 0.0) (global.get $java.lang.Double.rtt))(f64.const 1.1)))
   ;; dd.byteValue();
   (drop (call_ref (local.get $dd)(struct.get $java.lang.Double.vtable $m_byteValue__byte (struct.get $java.lang.Double $vtable(local.get $dd)))))
   ;; dd.doubleValue();
   (drop (call_ref (local.get $dd)(struct.get $java.lang.Double.vtable $m_doubleValue__double (struct.get $java.lang.Double $vtable(local.get $dd)))))
   ;; dd.floatValue();
   (drop (call_ref (local.get $dd)(struct.get $java.lang.Double.vtable $m_floatValue__float (struct.get $java.lang.Double $vtable(local.get $dd)))))
   ;; dd.intValue();
   (drop (call_ref (local.get $dd)(struct.get $java.lang.Double.vtable $m_intValue__int (struct.get $java.lang.Double $vtable(local.get $dd)))))
   ;; dd.longValue();
   (drop (call_ref (local.get $dd)(struct.get $java.lang.Double.vtable $m_longValue__long (struct.get $java.lang.Double $vtable(local.get $dd)))))
   ;; dd.shortValue();
   (drop (call_ref (local.get $dd)(struct.get $java.lang.Double.vtable $m_shortValue__short (struct.get $java.lang.Double $vtable(local.get $dd)))))
   ;; Number s = new Short.<init>(1);
   
   (local.set $s (call $m_<init>__short__void@java.lang.Short (struct.new_with_rtt $java.lang.Short (global.get $java.lang.Short.vtable) (i32.const 0) (i32.const 0) (global.get $java.lang.Short.rtt))(i32.const 1)))
   ;; s.byteValue();
   (drop (call_ref (local.get $s)(struct.get $java.lang.Number.vtable $m_byteValue__byte (struct.get $java.lang.Number $vtable(local.get $s)))))
   ;; s.doubleValue();
   (drop (call_ref (local.get $s)(struct.get $java.lang.Number.vtable $m_doubleValue__double (struct.get $java.lang.Number $vtable(local.get $s)))))
   ;; s.floatValue();
   (drop (call_ref (local.get $s)(struct.get $java.lang.Number.vtable $m_floatValue__float (struct.get $java.lang.Number $vtable(local.get $s)))))
   ;; s.intValue();
   (drop (call_ref (local.get $s)(struct.get $java.lang.Number.vtable $m_intValue__int (struct.get $java.lang.Number $vtable(local.get $s)))))
   ;; s.longValue();
   (drop (call_ref (local.get $s)(struct.get $java.lang.Number.vtable $m_longValue__long (struct.get $java.lang.Number $vtable(local.get $s)))))
   ;; s.shortValue();
   (drop (call_ref (local.get $s)(struct.get $java.lang.Number.vtable $m_shortValue__short (struct.get $java.lang.Number $vtable(local.get $s)))))
   ;; Short ss = new Short.<init>(1);
   
   (local.set $ss (call $m_<init>__short__void@java.lang.Short (struct.new_with_rtt $java.lang.Short (global.get $java.lang.Short.vtable) (i32.const 0) (i32.const 0) (global.get $java.lang.Short.rtt))(i32.const 1)))
   ;; ss.byteValue();
   (drop (call_ref (local.get $ss)(struct.get $java.lang.Short.vtable $m_byteValue__byte (struct.get $java.lang.Short $vtable(local.get $ss)))))
   ;; ss.doubleValue();
   (drop (call_ref (local.get $ss)(struct.get $java.lang.Short.vtable $m_doubleValue__double (struct.get $java.lang.Short $vtable(local.get $ss)))))
   ;; ss.floatValue();
   (drop (call_ref (local.get $ss)(struct.get $java.lang.Short.vtable $m_floatValue__float (struct.get $java.lang.Short $vtable(local.get $ss)))))
   ;; ss.intValue();
   (drop (call_ref (local.get $ss)(struct.get $java.lang.Short.vtable $m_intValue__int (struct.get $java.lang.Short $vtable(local.get $ss)))))
   ;; ss.longValue();
   (drop (call_ref (local.get $ss)(struct.get $java.lang.Short.vtable $m_longValue__long (struct.get $java.lang.Short $vtable(local.get $ss)))))
   ;; ss.shortValue();
   (drop (call_ref (local.get $ss)(struct.get $java.lang.Short.vtable $m_shortValue__short (struct.get $java.lang.Short $vtable(local.get $ss)))))
   ;; Number b = new Byte.<init>(1);
   
   (local.set $b (call $m_<init>__byte__void@java.lang.Byte (struct.new_with_rtt $java.lang.Byte (global.get $java.lang.Byte.vtable) (i32.const 0) (i32.const 0) (global.get $java.lang.Byte.rtt))(i32.const 1)))
   ;; b.byteValue();
   (drop (call_ref (local.get $b)(struct.get $java.lang.Number.vtable $m_byteValue__byte (struct.get $java.lang.Number $vtable(local.get $b)))))
   ;; b.doubleValue();
   (drop (call_ref (local.get $b)(struct.get $java.lang.Number.vtable $m_doubleValue__double (struct.get $java.lang.Number $vtable(local.get $b)))))
   ;; b.floatValue();
   (drop (call_ref (local.get $b)(struct.get $java.lang.Number.vtable $m_floatValue__float (struct.get $java.lang.Number $vtable(local.get $b)))))
   ;; b.intValue();
   (drop (call_ref (local.get $b)(struct.get $java.lang.Number.vtable $m_intValue__int (struct.get $java.lang.Number $vtable(local.get $b)))))
   ;; b.longValue();
   (drop (call_ref (local.get $b)(struct.get $java.lang.Number.vtable $m_longValue__long (struct.get $java.lang.Number $vtable(local.get $b)))))
   ;; b.shortValue();
   (drop (call_ref (local.get $b)(struct.get $java.lang.Number.vtable $m_shortValue__short (struct.get $java.lang.Number $vtable(local.get $b)))))
   ;; Byte bb = new Byte.<init>(1);
   
   (local.set $bb (call $m_<init>__byte__void@java.lang.Byte (struct.new_with_rtt $java.lang.Byte (global.get $java.lang.Byte.vtable) (i32.const 0) (i32.const 0) (global.get $java.lang.Byte.rtt))(i32.const 1)))
   ;; bb.byteValue();
   (drop (call_ref (local.get $bb)(struct.get $java.lang.Byte.vtable $m_byteValue__byte (struct.get $java.lang.Byte $vtable(local.get $bb)))))
   ;; bb.doubleValue();
   (drop (call_ref (local.get $bb)(struct.get $java.lang.Byte.vtable $m_doubleValue__double (struct.get $java.lang.Byte $vtable(local.get $bb)))))
   ;; bb.floatValue();
   (drop (call_ref (local.get $bb)(struct.get $java.lang.Byte.vtable $m_floatValue__float (struct.get $java.lang.Byte $vtable(local.get $bb)))))
   ;; bb.intValue();
   (drop (call_ref (local.get $bb)(struct.get $java.lang.Byte.vtable $m_intValue__int (struct.get $java.lang.Byte $vtable(local.get $bb)))))
   ;; bb.longValue();
   (drop (call_ref (local.get $bb)(struct.get $java.lang.Byte.vtable $m_longValue__long (struct.get $java.lang.Byte $vtable(local.get $bb)))))
   ;; bb.shortValue();
   (drop (call_ref (local.get $bb)(struct.get $java.lang.Byte.vtable $m_shortValue__short (struct.get $java.lang.Byte $vtable(local.get $bb)))))
   ;; Number f = new Float.<init>(1.100000023841858);
   
   (local.set $f (call $m_<init>__float__void@java.lang.Float (struct.new_with_rtt $java.lang.Float (global.get $java.lang.Float.vtable) (i32.const 0) (f32.const 0.0) (global.get $java.lang.Float.rtt))(f32.const 1.100000023841858)))
   ;; f.byteValue();
   (drop (call_ref (local.get $f)(struct.get $java.lang.Number.vtable $m_byteValue__byte (struct.get $java.lang.Number $vtable(local.get $f)))))
   ;; f.doubleValue();
   (drop (call_ref (local.get $f)(struct.get $java.lang.Number.vtable $m_doubleValue__double (struct.get $java.lang.Number $vtable(local.get $f)))))
   ;; f.floatValue();
   (drop (call_ref (local.get $f)(struct.get $java.lang.Number.vtable $m_floatValue__float (struct.get $java.lang.Number $vtable(local.get $f)))))
   ;; f.intValue();
   (drop (call_ref (local.get $f)(struct.get $java.lang.Number.vtable $m_intValue__int (struct.get $java.lang.Number $vtable(local.get $f)))))
   ;; f.longValue();
   (drop (call_ref (local.get $f)(struct.get $java.lang.Number.vtable $m_longValue__long (struct.get $java.lang.Number $vtable(local.get $f)))))
   ;; f.shortValue();
   (drop (call_ref (local.get $f)(struct.get $java.lang.Number.vtable $m_shortValue__short (struct.get $java.lang.Number $vtable(local.get $f)))))
   ;; Float ff = new Float.<init>(1.100000023841858);
   
   (local.set $ff (call $m_<init>__float__void@java.lang.Float (struct.new_with_rtt $java.lang.Float (global.get $java.lang.Float.vtable) (i32.const 0) (f32.const 0.0) (global.get $java.lang.Float.rtt))(f32.const 1.100000023841858)))
   ;; ff.byteValue();
   (drop (call_ref (local.get $ff)(struct.get $java.lang.Float.vtable $m_byteValue__byte (struct.get $java.lang.Float $vtable(local.get $ff)))))
   ;; ff.doubleValue();
   (drop (call_ref (local.get $ff)(struct.get $java.lang.Float.vtable $m_doubleValue__double (struct.get $java.lang.Float $vtable(local.get $ff)))))
   ;; ff.floatValue();
   (drop (call_ref (local.get $ff)(struct.get $java.lang.Float.vtable $m_floatValue__float (struct.get $java.lang.Float $vtable(local.get $ff)))))
   ;; ff.intValue();
   (drop (call_ref (local.get $ff)(struct.get $java.lang.Float.vtable $m_intValue__int (struct.get $java.lang.Float $vtable(local.get $ff)))))
   ;; ff.longValue();
   (drop (call_ref (local.get $ff)(struct.get $java.lang.Float.vtable $m_longValue__long (struct.get $java.lang.Float $vtable(local.get $ff)))))
   ;; ff.shortValue();
   (drop (call_ref (local.get $ff)(struct.get $java.lang.Float.vtable $m_shortValue__short (struct.get $java.lang.Float $vtable(local.get $ff)))))
   ;; Number l = new Long.<init>(1);
   
   (local.set $l (call $m_<init>__long__void@java.lang.Long (struct.new_with_rtt $java.lang.Long (global.get $java.lang.Long.vtable) (i32.const 0) (i64.const 0) (global.get $java.lang.Long.rtt))(i64.const 1)))
   ;; l.byteValue();
   (drop (call_ref (local.get $l)(struct.get $java.lang.Number.vtable $m_byteValue__byte (struct.get $java.lang.Number $vtable(local.get $l)))))
   ;; l.doubleValue();
   (drop (call_ref (local.get $l)(struct.get $java.lang.Number.vtable $m_doubleValue__double (struct.get $java.lang.Number $vtable(local.get $l)))))
   ;; l.floatValue();
   (drop (call_ref (local.get $l)(struct.get $java.lang.Number.vtable $m_floatValue__float (struct.get $java.lang.Number $vtable(local.get $l)))))
   ;; l.intValue();
   (drop (call_ref (local.get $l)(struct.get $java.lang.Number.vtable $m_intValue__int (struct.get $java.lang.Number $vtable(local.get $l)))))
   ;; l.longValue();
   (drop (call_ref (local.get $l)(struct.get $java.lang.Number.vtable $m_longValue__long (struct.get $java.lang.Number $vtable(local.get $l)))))
   ;; l.shortValue();
   (drop (call_ref (local.get $l)(struct.get $java.lang.Number.vtable $m_shortValue__short (struct.get $java.lang.Number $vtable(local.get $l)))))
   ;; Long ll = new Long.<init>(1);
   
   (local.set $ll (call $m_<init>__long__void@java.lang.Long (struct.new_with_rtt $java.lang.Long (global.get $java.lang.Long.vtable) (i32.const 0) (i64.const 0) (global.get $java.lang.Long.rtt))(i64.const 1)))
   ;; ll.byteValue();
   (drop (call_ref (local.get $ll)(struct.get $java.lang.Long.vtable $m_byteValue__byte (struct.get $java.lang.Long $vtable(local.get $ll)))))
   ;; ll.doubleValue();
   (drop (call_ref (local.get $ll)(struct.get $java.lang.Long.vtable $m_doubleValue__double (struct.get $java.lang.Long $vtable(local.get $ll)))))
   ;; ll.floatValue();
   (drop (call_ref (local.get $ll)(struct.get $java.lang.Long.vtable $m_floatValue__float (struct.get $java.lang.Long $vtable(local.get $ll)))))
   ;; ll.intValue();
   (drop (call_ref (local.get $ll)(struct.get $java.lang.Long.vtable $m_intValue__int (struct.get $java.lang.Long $vtable(local.get $ll)))))
   ;; ll.longValue();
   (drop (call_ref (local.get $ll)(struct.get $java.lang.Long.vtable $m_longValue__long (struct.get $java.lang.Long $vtable(local.get $ll)))))
   ;; ll.shortValue();
   (drop (call_ref (local.get $ll)(struct.get $java.lang.Long.vtable $m_shortValue__short (struct.get $java.lang.Long $vtable(local.get $ll)))))
   ;; Character c = new Character.<init>(97);
   
   (local.set $c (call $m_<init>__char__void@java.lang.Character (struct.new_with_rtt $java.lang.Character (global.get $java.lang.Character.vtable) (i32.const 0) (i32.const 0) (global.get $java.lang.Character.rtt))(i32.const 97)))
   ;; c.charValue();
   (drop (call_ref (local.get $c)(struct.get $java.lang.Character.vtable $m_charValue__char (struct.get $java.lang.Character $vtable(local.get $c)))))
   ;; Boolean bool = new Boolean.<init>(true);
   
   (local.set $bool (call $m_<init>__boolean__void@java.lang.Boolean (struct.new_with_rtt $java.lang.Boolean (global.get $java.lang.Boolean.vtable) (i32.const 0) (i32.const 0) (global.get $java.lang.Boolean.rtt))(i32.const 1)))
   ;; bool.booleanValue();
   (drop (call_ref (local.get $bool)(struct.get $java.lang.Boolean.vtable $m_booleanValue__boolean (struct.get $java.lang.Boolean $vtable(local.get $bool)))))
  )
 )
)
(elem declare func $m_main__void@devirtualizedcalls.NumberCalls)

;;; void NumberCalls.$clinit()
(func $$clinit__void@devirtualizedcalls.NumberCalls
 (block $return.label
  (block
   ;; if (devirtualizedcalls.NumberCalls.$initialized) return;
   (if (global.get $f_$initialized__devirtualizedcalls_NumberCalls)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (devirtualizedcalls.NumberCalls.$initialized = true);
   (global.set $f_$initialized__devirtualizedcalls_NumberCalls (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> NumberCalls.getClass()
(func $m_getClass__java_lang_Class@devirtualizedcalls.NumberCalls
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $devirtualizedcalls.NumberCalls))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $devirtualizedcalls.NumberCalls.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getDevirtualizedcalls.NumberCalls();
   (local.set $return.value (call $$getDevirtualizedcalls.NumberCalls__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@devirtualizedcalls.NumberCalls)

;;; Code for devirtualizedcalls.ObjectCalls [CLASS]
(type $devirtualizedcalls.ObjectCalls (struct
 (field $vtable (ref null $devirtualizedcalls.ObjectCalls.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $devirtualizedcalls.ObjectCalls.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_main__void (mut (ref $function.__$void)))
 (field $m_test__void (mut (ref $function.__$void)))
))

;;; ObjectCalls()
(func $m_<init>__void@devirtualizedcalls.ObjectCalls
 (param $this (ref null $devirtualizedcalls.ObjectCalls))
 (result (ref null $devirtualizedcalls.ObjectCalls))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void ObjectCalls.main()
(func $m_main__void@devirtualizedcalls.ObjectCalls
 (param $this.untyped (ref null $java.lang.Object))
 (local $object (ref null $java.lang.Object))
 (local $objectCalls (ref null $javaemul.internal.WasmArray.OfObject))
 (local $this (ref null $devirtualizedcalls.ObjectCalls))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $devirtualizedcalls.ObjectCalls.rtt)))
 (block $return.label
  (block
   ;; Object object = new Object.<init>();
   
   (local.set $object (call $m_<init>__void@java.lang.Object (struct.new_with_rtt $java.lang.Object (global.get $java.lang.Object.vtable) (i32.const 0) (global.get $java.lang.Object.rtt))))
   ;; object.equals(object);
   (drop (call_ref (local.get $object)(local.get $object)(struct.get $java.lang.Object.vtable $m_equals__java_lang_Object__boolean (struct.get $java.lang.Object $vtable(local.get $object)))))
   ;; object.hashCode();
   (drop (call_ref (local.get $object)(struct.get $java.lang.Object.vtable $m_hashCode__int (struct.get $java.lang.Object $vtable(local.get $object)))))
   ;; object.toString();
   (drop (call_ref (local.get $object)(struct.get $java.lang.Object.vtable $m_toString__java_lang_String (struct.get $java.lang.Object $vtable(local.get $object)))))
   ;; object.getClass();
   (drop (call_ref (local.get $object)(struct.get $java.lang.Object.vtable $m_getClass__java_lang_Class (struct.get $java.lang.Object $vtable(local.get $object)))))
   ;; ObjectCalls[] objectCalls = new OfObject.<init>(1);
   
   (local.set $objectCalls (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfObject (struct.new_with_rtt $javaemul.internal.WasmArray.OfObject (global.get $javaemul.internal.WasmArray.OfObject.vtable) (i32.const 0) (ref.null $java.lang.Object.array) (global.get $javaemul.internal.WasmArray.OfObject.rtt))(i32.const 1)))
   ;; objectCalls.equals(objectCalls);
   (drop (call_ref (local.get $objectCalls)(local.get $objectCalls)(struct.get $java.lang.Object.vtable $m_equals__java_lang_Object__boolean (struct.get $java.lang.Object $vtable(local.get $objectCalls)))))
   ;; objectCalls.hashCode();
   (drop (call_ref (local.get $objectCalls)(struct.get $java.lang.Object.vtable $m_hashCode__int (struct.get $java.lang.Object $vtable(local.get $objectCalls)))))
   ;; objectCalls.toString();
   (drop (call_ref (local.get $objectCalls)(struct.get $java.lang.Object.vtable $m_toString__java_lang_String (struct.get $java.lang.Object $vtable(local.get $objectCalls)))))
   ;; objectCalls.getClass();
   (drop (call_ref (local.get $objectCalls)(struct.get $java.lang.Object.vtable $m_getClass__java_lang_Class (struct.get $java.lang.Object $vtable(local.get $objectCalls)))))
  )
 )
)
(elem declare func $m_main__void@devirtualizedcalls.ObjectCalls)

;;; void ObjectCalls.test()
(func $m_test__void@devirtualizedcalls.ObjectCalls
 (param $this.untyped (ref null $java.lang.Object))
 (local $this (ref null $devirtualizedcalls.ObjectCalls))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $devirtualizedcalls.ObjectCalls.rtt)))
 (block $return.label
  (block
   ;; ObjectCalls.this.equals(new Object.<init>());
   (drop (call_ref (local.get $this)(call $m_<init>__void@java.lang.Object (struct.new_with_rtt $java.lang.Object (global.get $java.lang.Object.vtable) (i32.const 0) (global.get $java.lang.Object.rtt)))(struct.get $java.lang.Object.vtable $m_equals__java_lang_Object__boolean (struct.get $java.lang.Object $vtable(local.get $this)))))
   ;; ObjectCalls.this.hashCode();
   (drop (call_ref (local.get $this)(struct.get $java.lang.Object.vtable $m_hashCode__int (struct.get $java.lang.Object $vtable(local.get $this)))))
   ;; ObjectCalls.this.toString();
   (drop (call_ref (local.get $this)(struct.get $java.lang.Object.vtable $m_toString__java_lang_String (struct.get $java.lang.Object $vtable(local.get $this)))))
   ;; ObjectCalls.this.getClass();
   (drop (call_ref (local.get $this)(struct.get $java.lang.Object.vtable $m_getClass__java_lang_Class (struct.get $java.lang.Object $vtable(local.get $this)))))
   ;; ObjectCalls.this.equals(new Object.<init>());
   (drop (call_ref (local.get $this)(call $m_<init>__void@java.lang.Object (struct.new_with_rtt $java.lang.Object (global.get $java.lang.Object.vtable) (i32.const 0) (global.get $java.lang.Object.rtt)))(struct.get $java.lang.Object.vtable $m_equals__java_lang_Object__boolean (struct.get $java.lang.Object $vtable(local.get $this)))))
   ;; ObjectCalls.this.hashCode();
   (drop (call_ref (local.get $this)(struct.get $java.lang.Object.vtable $m_hashCode__int (struct.get $java.lang.Object $vtable(local.get $this)))))
   ;; ObjectCalls.this.toString();
   (drop (call_ref (local.get $this)(struct.get $java.lang.Object.vtable $m_toString__java_lang_String (struct.get $java.lang.Object $vtable(local.get $this)))))
   ;; ObjectCalls.this.getClass();
   (drop (call_ref (local.get $this)(struct.get $java.lang.Object.vtable $m_getClass__java_lang_Class (struct.get $java.lang.Object $vtable(local.get $this)))))
  )
 )
)
(elem declare func $m_test__void@devirtualizedcalls.ObjectCalls)

;;; void ObjectCalls.$clinit()
(func $$clinit__void@devirtualizedcalls.ObjectCalls
 (block $return.label
  (block
   ;; if (devirtualizedcalls.ObjectCalls.$initialized) return;
   (if (global.get $f_$initialized__devirtualizedcalls_ObjectCalls)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (devirtualizedcalls.ObjectCalls.$initialized = true);
   (global.set $f_$initialized__devirtualizedcalls_ObjectCalls (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> ObjectCalls.getClass()
(func $m_getClass__java_lang_Class@devirtualizedcalls.ObjectCalls
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $devirtualizedcalls.ObjectCalls))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $devirtualizedcalls.ObjectCalls.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getDevirtualizedcalls.ObjectCalls();
   (local.set $return.value (call $$getDevirtualizedcalls.ObjectCalls__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@devirtualizedcalls.ObjectCalls)

;;; Code for devirtualizedcalls.StringCalls [CLASS]
(type $devirtualizedcalls.StringCalls (struct
 (field $vtable (ref null $devirtualizedcalls.StringCalls.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $devirtualizedcalls.StringCalls.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_main__void (mut (ref $function.__$void)))
))

;;; StringCalls()
(func $m_<init>__void@devirtualizedcalls.StringCalls
 (param $this (ref null $devirtualizedcalls.StringCalls))
 (result (ref null $devirtualizedcalls.StringCalls))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void StringCalls.main()
(func $m_main__void@devirtualizedcalls.StringCalls
 (param $this.untyped (ref null $java.lang.Object))
 (local $literal (ref null $java.lang.String))
 (local $sub (ref null $java.lang.String))
 (local $sub2 (ref null $java.lang.String))
 (local $trimmed (ref null $java.lang.String))
 (local $newString (ref null $java.lang.String))
 (local $this (ref null $devirtualizedcalls.StringCalls))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $devirtualizedcalls.StringCalls.rtt)))
 (block $return.label
  (block
   ;; String literal = javaemul.internal.StringPool.$getString_|String|();
   
   (local.set $literal (call $$getString_|String|__java_lang_String@javaemul.internal.StringPool ))
   ;; String sub = literal.substring(1);
   
   (local.set $sub (call_ref (local.get $literal)(i32.const 1)(struct.get $java.lang.String.vtable $m_substring__int__java_lang_String (struct.get $java.lang.String $vtable(local.get $literal)))))
   ;; String sub2 = literal.substring(2,3);
   
   (local.set $sub2 (call_ref (local.get $literal)(i32.const 2)(i32.const 3)(struct.get $java.lang.String.vtable $m_substring__int__int__java_lang_String (struct.get $java.lang.String $vtable(local.get $literal)))))
   ;; String trimmed = literal.trim();
   
   (local.set $trimmed (call_ref (local.get $literal)(struct.get $java.lang.String.vtable $m_trim__java_lang_String (struct.get $java.lang.String $vtable(local.get $literal)))))
   ;; String newString = literal.toString();
   
   (local.set $newString (call_ref (local.get $literal)(struct.get $java.lang.String.vtable $m_toString__java_lang_String (struct.get $java.lang.String $vtable(local.get $literal)))))
  )
 )
)
(elem declare func $m_main__void@devirtualizedcalls.StringCalls)

;;; void StringCalls.$clinit()
(func $$clinit__void@devirtualizedcalls.StringCalls
 (block $return.label
  (block
   ;; if (devirtualizedcalls.StringCalls.$initialized) return;
   (if (global.get $f_$initialized__devirtualizedcalls_StringCalls)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (devirtualizedcalls.StringCalls.$initialized = true);
   (global.set $f_$initialized__devirtualizedcalls_StringCalls (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> StringCalls.getClass()
(func $m_getClass__java_lang_Class@devirtualizedcalls.StringCalls
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $devirtualizedcalls.StringCalls))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $devirtualizedcalls.StringCalls.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getDevirtualizedcalls.StringCalls();
   (local.set $return.value (call $$getDevirtualizedcalls.StringCalls__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@devirtualizedcalls.StringCalls)

 ;;; Code for devirtualizedcalls.ArrayCalls [vtable.init]
 (global.set $devirtualizedcalls.ArrayCalls.vtable (struct.new_with_rtt $devirtualizedcalls.ArrayCalls.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@devirtualizedcalls.ArrayCalls) (ref.func $m_main__void@devirtualizedcalls.ArrayCalls) (rtt.canon $devirtualizedcalls.ArrayCalls.vtable)))

 ;;; Code for devirtualizedcalls.CharSequenceCalls [vtable.init]
 (global.set $devirtualizedcalls.CharSequenceCalls.vtable (struct.new_with_rtt $devirtualizedcalls.CharSequenceCalls.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@devirtualizedcalls.CharSequenceCalls) (ref.func $m_test__java_lang_CharSequence__void@devirtualizedcalls.CharSequenceCalls) (ref.func $m_main__void@devirtualizedcalls.CharSequenceCalls) (rtt.canon $devirtualizedcalls.CharSequenceCalls.vtable)))

 ;;; Code for devirtualizedcalls.NumberCalls [vtable.init]
 (global.set $devirtualizedcalls.NumberCalls.vtable (struct.new_with_rtt $devirtualizedcalls.NumberCalls.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@devirtualizedcalls.NumberCalls) (ref.func $m_main__void@devirtualizedcalls.NumberCalls) (rtt.canon $devirtualizedcalls.NumberCalls.vtable)))

 ;;; Code for devirtualizedcalls.ObjectCalls [vtable.init]
 (global.set $devirtualizedcalls.ObjectCalls.vtable (struct.new_with_rtt $devirtualizedcalls.ObjectCalls.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@devirtualizedcalls.ObjectCalls) (ref.func $m_main__void@devirtualizedcalls.ObjectCalls) (ref.func $m_test__void@devirtualizedcalls.ObjectCalls) (rtt.canon $devirtualizedcalls.ObjectCalls.vtable)))

 ;;; Code for devirtualizedcalls.StringCalls [vtable.init]
 (global.set $devirtualizedcalls.StringCalls.vtable (struct.new_with_rtt $devirtualizedcalls.StringCalls.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@devirtualizedcalls.StringCalls) (ref.func $m_main__void@devirtualizedcalls.StringCalls) (rtt.canon $devirtualizedcalls.StringCalls.vtable)))
