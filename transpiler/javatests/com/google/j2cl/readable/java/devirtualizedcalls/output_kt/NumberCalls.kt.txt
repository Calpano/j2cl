package devirtualizedcalls

open class NumberCalls {
 fun main() {
  var i: java.lang.Number? = java.lang.Integer?(1)
  i.byteValue()
  i.doubleValue()
  i.floatValue()
  i.intValue()
  i.longValue()
  i.shortValue()
  var ii: java.lang.Integer? = java.lang.Integer?(1)
  ii.byteValue()
  ii.doubleValue()
  ii.floatValue()
  ii.intValue()
  ii.longValue()
  ii.shortValue()
  var d: java.lang.Number? = java.lang.Double?(1.1)
  d.byteValue()
  d.doubleValue()
  d.floatValue()
  d.intValue()
  d.longValue()
  d.shortValue()
  var dd: java.lang.Double? = java.lang.Double?(1.1)
  dd.byteValue()
  dd.doubleValue()
  dd.floatValue()
  dd.intValue()
  dd.longValue()
  dd.shortValue()
  var s: java.lang.Number? = java.lang.Short?(1 as Short)
  s.byteValue()
  s.doubleValue()
  s.floatValue()
  s.intValue()
  s.longValue()
  s.shortValue()
  var ss: java.lang.Short? = java.lang.Short?(1 as Short)
  ss.byteValue()
  ss.doubleValue()
  ss.floatValue()
  ss.intValue()
  ss.longValue()
  ss.shortValue()
  var b: java.lang.Number? = java.lang.Byte?(1 as Byte)
  b.byteValue()
  b.doubleValue()
  b.floatValue()
  b.intValue()
  b.longValue()
  b.shortValue()
  var bb: java.lang.Byte? = java.lang.Byte?(1 as Byte)
  bb.byteValue()
  bb.doubleValue()
  bb.floatValue()
  bb.intValue()
  bb.longValue()
  bb.shortValue()
  var f: java.lang.Number? = java.lang.Float?(1.1f)
  f.byteValue()
  f.doubleValue()
  f.floatValue()
  f.intValue()
  f.longValue()
  f.shortValue()
  var ff: java.lang.Float? = java.lang.Float?(1.1f)
  ff.byteValue()
  ff.doubleValue()
  ff.floatValue()
  ff.intValue()
  ff.longValue()
  ff.shortValue()
  var l: java.lang.Number? = java.lang.Long?(1L)
  l.byteValue()
  l.doubleValue()
  l.floatValue()
  l.intValue()
  l.longValue()
  l.shortValue()
  var ll: java.lang.Long? = java.lang.Long?(1L)
  ll.byteValue()
  ll.doubleValue()
  ll.floatValue()
  ll.intValue()
  ll.longValue()
  ll.shortValue()
  var c: java.lang.Character? = java.lang.Character?('a')
  c.charValue()
  var bool: java.lang.Boolean? = java.lang.Boolean?(true)
  bool.booleanValue()
 }
}
