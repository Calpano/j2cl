package bridgejsmethod

open class Main {
 constructor(): super()

 companion object {
  @JvmStatic
  fun test() {
   val a: bridgejsmethod.`Main$A`<*>? = bridgejsmethod.`Main$A`<kotlin.Int?>()
   a!!.`fun`(1)
   a!!.bar(1)
   val b: bridgejsmethod.`Main$B`? = bridgejsmethod.`Main$B`()
   b!!.`fun`("abc")
   b!!.bar("abc")
   val c: bridgejsmethod.`Main$C`? = bridgejsmethod.`Main$C`()
   c!!.`fun`(1)
   c!!.bar(1)
   val d: bridgejsmethod.`Main$D`? = bridgejsmethod.`Main$D`()
   d!!.`fun`(1)
   d!!.bar(1)
   val e: bridgejsmethod.`Main$E`? = bridgejsmethod.`Main$E`()
   e!!.`fun`("abc")
   e!!.bar("abc")
   val h: bridgejsmethod.`Main$H`<kotlin.Int?>? = bridgejsmethod.`Main$H`<kotlin.Int?>()
   h!!.enclose(1)
   val l: bridgejsmethod.`Main$L`<kotlin.Int?>? = bridgejsmethod.`Main$L`<kotlin.Int?>()
   l!!.`fun`("foo", 1)
  }
 }
}

open class `Main$A`<T> {
 constructor(): super()

 open fun `fun`(t: T?): T? {
  return t
 }

 open fun bar(t: T?) {}
}

fun interface `Main$I`<T: kotlin.Number?> {
 fun `fun`(t: T?): T?
}

fun interface `Main$J`<T> {
 fun bar(t: T?)
}

open class `Main$B`: bridgejsmethod.`Main$A`<kotlin.String?> {
 constructor(): super()

 open override fun `fun`(s: kotlin.String?): kotlin.String? {
  return s
 }

 open override fun bar(s: kotlin.String?) {}
}

open class `Main$C`: bridgejsmethod.`Main$A`<kotlin.Int?> {
 constructor(): super()

 open override fun `fun`(i: kotlin.Int?): kotlin.Int? {
  return i
 }
}

open class `Main$D`: bridgejsmethod.`Main$I`<kotlin.Int?>, bridgejsmethod.`Main$A`<kotlin.Int?> {
 constructor(): super()

 open override fun `fun`(i: kotlin.Int?): kotlin.Int? {
  return i
 }
}

open class `Main$E`: bridgejsmethod.`Main$J`<kotlin.String?>, bridgejsmethod.`Main$B` {
 constructor(): super()
}

open class `Main$F`: bridgejsmethod.`Main$I`<kotlin.Int?>, bridgejsmethod.`Main$A`<kotlin.Int?> {
 constructor(): super()
}

fun interface `Main$G`<V> {
 fun enclose(value: V?): V?
}

open class `Main$H`<V>: bridgejsmethod.`Main$G`<V> {
 constructor(): super()

 open override fun enclose(value: V?): V? {
  return null
 }
}

open class `Main$K`<K1, K2> {
 constructor(): super()

 internal open fun `fun`(k1: K1?, k2: K2?) {}
}

open class `Main$L`<L1>: bridgejsmethod.`Main$K`<kotlin.String?, L1> {
 constructor(): super()

 internal open override fun `fun`(string: kotlin.String?, l1: L1?) {}
}

fun interface `Main$M` {
 fun getB(): bridgejsmethod.`Main$B`?
}

abstract class `Main$N`: bridgejsmethod.`Main$M` {
 @JvmField val `this`: bridgejsmethod.Main?

 internal constructor(`$outer_this`: bridgejsmethod.Main?): super() {
  this.`this` = `$outer_this`
 }

 abstract open override fun getB(): bridgejsmethod.`Main$B`?
}

open class `Main$O`: bridgejsmethod.`Main$N` {
 @JvmField val `this`: bridgejsmethod.Main?

 internal constructor(`$outer_this`: bridgejsmethod.Main?): super(`$outer_this`) {
  this.`this` = `$outer_this`
 }

 internal var b: bridgejsmethod.`Main$B`? = null

 open override fun getB(): bridgejsmethod.`Main$B`? {
  return this.b
 }
}

fun interface `Main$P` {
 fun getKey(): kotlin.String?
}

abstract class `Main$Q`: bridgejsmethod.`Main$P` {
 @JvmField val `this`: bridgejsmethod.Main?

 internal constructor(`$outer_this`: bridgejsmethod.Main?): super() {
  this.`this` = `$outer_this`
 }

 abstract open override fun getKey(): kotlin.String?
}

abstract class `Main$R`: bridgejsmethod.`Main$Q` {
 @JvmField val `this`: bridgejsmethod.Main?

 internal constructor(`$outer_this`: bridgejsmethod.Main?): super(`$outer_this`) {
  this.`this` = `$outer_this`
 }

 open override fun getKey(): kotlin.String? {
  return null
 }
}

open class `Main$S`: bridgejsmethod.`Main$R` {
 @JvmField val `this`: bridgejsmethod.Main?

 internal constructor(`$outer_this`: bridgejsmethod.Main?): super(`$outer_this`) {
  this.`this` = `$outer_this`
 }
}

open class `Main$GrandParent`<T> {
 @JvmField val `this`: bridgejsmethod.Main?

 internal constructor(`$outer_this`: bridgejsmethod.Main?): super() {
  this.`this` = `$outer_this`
 }

 open fun jsMethod(t: T?) {}

 open fun method(t: T?) {}
}

open class `Main$Parent`<T: bridgejsmethod.`Main$Parent`<T>?>: bridgejsmethod.`Main$GrandParent`<T> {
 @JvmField val `this`: bridgejsmethod.Main?

 internal constructor(`$outer_this`: bridgejsmethod.Main?): super(`$outer_this`) {
  this.`this` = `$outer_this`
 }

 open override fun jsMethod(t: T?) {}

 open override fun method(t: T?) {}
}

open class `Main$Child`: bridgejsmethod.`Main$Parent`<bridgejsmethod.`Main$Child`?> {
 @JvmField val `this`: bridgejsmethod.Main?

 internal constructor(`$outer_this`: bridgejsmethod.Main?): super(`$outer_this`) {
  this.`this` = `$outer_this`
 }
}
