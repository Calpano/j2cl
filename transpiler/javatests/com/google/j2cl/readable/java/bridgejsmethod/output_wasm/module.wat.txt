;;; Code for bridgejsmethod.Main [vtable]
(global $bridgejsmethod.Main.vtable (mut (ref null $bridgejsmethod.Main.vtable)) (ref.null $bridgejsmethod.Main.vtable))

;;; Code for bridgejsmethod.Main.A [vtable]
(global $bridgejsmethod.Main.A.vtable (mut (ref null $bridgejsmethod.Main.A.vtable)) (ref.null $bridgejsmethod.Main.A.vtable))

;;; Code for bridgejsmethod.Main.B [vtable]
(global $bridgejsmethod.Main.B.vtable (mut (ref null $bridgejsmethod.Main.B.vtable)) (ref.null $bridgejsmethod.Main.B.vtable))

;;; Code for bridgejsmethod.Main.C [vtable]
(global $bridgejsmethod.Main.C.vtable (mut (ref null $bridgejsmethod.Main.C.vtable)) (ref.null $bridgejsmethod.Main.C.vtable))

;;; Code for bridgejsmethod.Main.D [vtable]
(global $bridgejsmethod.Main.D.vtable (mut (ref null $bridgejsmethod.Main.D.vtable)) (ref.null $bridgejsmethod.Main.D.vtable))

;;; Code for bridgejsmethod.Main.E [vtable]
(global $bridgejsmethod.Main.E.vtable (mut (ref null $bridgejsmethod.Main.E.vtable)) (ref.null $bridgejsmethod.Main.E.vtable))

;;; Code for bridgejsmethod.Main.F [vtable]
(global $bridgejsmethod.Main.F.vtable (mut (ref null $bridgejsmethod.Main.F.vtable)) (ref.null $bridgejsmethod.Main.F.vtable))

;;; Code for bridgejsmethod.Main.H [vtable]
(global $bridgejsmethod.Main.H.vtable (mut (ref null $bridgejsmethod.Main.H.vtable)) (ref.null $bridgejsmethod.Main.H.vtable))

;;; Code for bridgejsmethod.Main.K [vtable]
(global $bridgejsmethod.Main.K.vtable (mut (ref null $bridgejsmethod.Main.K.vtable)) (ref.null $bridgejsmethod.Main.K.vtable))

;;; Code for bridgejsmethod.Main.L [vtable]
(global $bridgejsmethod.Main.L.vtable (mut (ref null $bridgejsmethod.Main.L.vtable)) (ref.null $bridgejsmethod.Main.L.vtable))

;;; Code for bridgejsmethod.Main.N [vtable]
(global $bridgejsmethod.Main.N.vtable (mut (ref null $bridgejsmethod.Main.N.vtable)) (ref.null $bridgejsmethod.Main.N.vtable))

;;; Code for bridgejsmethod.Main.O [vtable]
(global $bridgejsmethod.Main.O.vtable (mut (ref null $bridgejsmethod.Main.O.vtable)) (ref.null $bridgejsmethod.Main.O.vtable))

;;; Code for bridgejsmethod.Main.Q [vtable]
(global $bridgejsmethod.Main.Q.vtable (mut (ref null $bridgejsmethod.Main.Q.vtable)) (ref.null $bridgejsmethod.Main.Q.vtable))

;;; Code for bridgejsmethod.Main.R [vtable]
(global $bridgejsmethod.Main.R.vtable (mut (ref null $bridgejsmethod.Main.R.vtable)) (ref.null $bridgejsmethod.Main.R.vtable))

;;; Code for bridgejsmethod.Main.S [vtable]
(global $bridgejsmethod.Main.S.vtable (mut (ref null $bridgejsmethod.Main.S.vtable)) (ref.null $bridgejsmethod.Main.S.vtable))

;;; Code for bridgejsmethod.Main.GrandParent [vtable]
(global $bridgejsmethod.Main.GrandParent.vtable (mut (ref null $bridgejsmethod.Main.GrandParent.vtable)) (ref.null $bridgejsmethod.Main.GrandParent.vtable))

;;; Code for bridgejsmethod.Main.Parent [vtable]
(global $bridgejsmethod.Main.Parent.vtable (mut (ref null $bridgejsmethod.Main.Parent.vtable)) (ref.null $bridgejsmethod.Main.Parent.vtable))

;;; Code for bridgejsmethod.Main.Child [vtable]
(global $bridgejsmethod.Main.Child.vtable (mut (ref null $bridgejsmethod.Main.Child.vtable)) (ref.null $bridgejsmethod.Main.Child.vtable))

;;; Code for bridgejsmethod.Main [static fields]
(global $f_$initialized__bridgejsmethod_Main (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.A [static fields]
(global $f_$initialized__bridgejsmethod_Main_A (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.I [static fields]
(global $f_$initialized__bridgejsmethod_Main_I (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.J [static fields]
(global $f_$initialized__bridgejsmethod_Main_J (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.B [static fields]
(global $f_$initialized__bridgejsmethod_Main_B (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.C [static fields]
(global $f_$initialized__bridgejsmethod_Main_C (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.D [static fields]
(global $f_$initialized__bridgejsmethod_Main_D (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.E [static fields]
(global $f_$initialized__bridgejsmethod_Main_E (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.F [static fields]
(global $f_$initialized__bridgejsmethod_Main_F (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.G [static fields]
(global $f_$initialized__bridgejsmethod_Main_G (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.H [static fields]
(global $f_$initialized__bridgejsmethod_Main_H (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.K [static fields]
(global $f_$initialized__bridgejsmethod_Main_K (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.L [static fields]
(global $f_$initialized__bridgejsmethod_Main_L (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.M [static fields]
(global $f_$initialized__bridgejsmethod_Main_M (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.N [static fields]
(global $f_$initialized__bridgejsmethod_Main_N (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.O [static fields]
(global $f_$initialized__bridgejsmethod_Main_O (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.P [static fields]
(global $f_$initialized__bridgejsmethod_Main_P (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.Q [static fields]
(global $f_$initialized__bridgejsmethod_Main_Q (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.R [static fields]
(global $f_$initialized__bridgejsmethod_Main_R (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.S [static fields]
(global $f_$initialized__bridgejsmethod_Main_S (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.GrandParent [static fields]
(global $f_$initialized__bridgejsmethod_Main_GrandParent (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.Parent [static fields]
(global $f_$initialized__bridgejsmethod_Main_Parent (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main.Child [static fields]
(global $f_$initialized__bridgejsmethod_Main_Child (mut i32) (i32.const 0))

;;; Code for bridgejsmethod.Main [CLASS]
(type $bridgejsmethod.Main (struct
 (field $vtable (ref null $bridgejsmethod.Main.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $bridgejsmethod.Main.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))

;;; Main()
(func $m_<init>__void@bridgejsmethod.Main
 (param $this (ref null $bridgejsmethod.Main))
 (result (ref null $bridgejsmethod.Main))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void Main.test()
(func $m_test__void@bridgejsmethod.Main
 (local $a (ref null $bridgejsmethod.Main.A))
 (local $b (ref null $bridgejsmethod.Main.B))
 (local $$array_literal (ref null $char.array))
 (local $$array_literal_1 (ref null $char.array))
 (local $c (ref null $bridgejsmethod.Main.C))
 (local $d (ref null $bridgejsmethod.Main.D))
 (local $e (ref null $bridgejsmethod.Main.E))
 (local $$array_literal_2 (ref null $char.array))
 (local $$array_literal_3 (ref null $char.array))
 (local $h (ref null $bridgejsmethod.Main.H))
 (local $l (ref null $bridgejsmethod.Main.L))
 (local $$array_literal_4 (ref null $char.array))
 (block $return.label
  (block
   ;; bridgejsmethod.Main.$clinit();
   (call $$clinit__void@bridgejsmethod.Main )
   ;; A a = new A.<init>();
   
   (local.set $a (call $m_<init>__void@bridgejsmethod.Main.A (struct.new_with_rtt $bridgejsmethod.Main.A (global.get $bridgejsmethod.Main.A.vtable) (i32.const 0) (global.get $bridgejsmethod.Main.A.rtt))))
   ;; a.fun(1);
   (drop (call_ref (local.get $a)(ref.null $java.lang.Object)(struct.get $bridgejsmethod.Main.A.vtable $m_fun__java_lang_Object__java_lang_Object (struct.get $bridgejsmethod.Main.A $vtable(local.get $a)))))
   ;; a.bar(1);
   (call_ref (local.get $a)(ref.null $java.lang.Object)(struct.get $bridgejsmethod.Main.A.vtable $m_bar__java_lang_Object__void (struct.get $bridgejsmethod.Main.A $vtable(local.get $a))))
   ;; B b = new B.<init>();
   
   (local.set $b (call $m_<init>__void@bridgejsmethod.Main.B (struct.new_with_rtt $bridgejsmethod.Main.B (global.get $bridgejsmethod.Main.B.vtable) (i32.const 0) (global.get $bridgejsmethod.Main.B.rtt))))
   ;; b.fun(java.lang.String.fromInternalArray((char[] $array_literal = new char[3],($array_literal[0] = 97),($array_literal[1] = 98),($array_literal[2] = 99),$array_literal)));
   (drop (call_ref (local.get $b)(call $m_fromInternalArray__arrayOf_char__java_lang_String@java.lang.String (block (result (ref null $char.array))
    
    (local.set $$array_literal (struct.new_with_rtt $char.array (global.get $java.lang.Object.vtable) (i32.const 0) (array.new_default_with_rtt $char.array.elements (i32.const 3) (global.get $char.array.elements.rtt)) (global.get $char.array.rtt)))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 0) (i32.const 97))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 1) (i32.const 98))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 2) (i32.const 99))
    (local.get $$array_literal)
   ))(struct.get $bridgejsmethod.Main.B.vtable $m_fun__java_lang_String__java_lang_String (struct.get $bridgejsmethod.Main.B $vtable(local.get $b)))))
   ;; b.bar(java.lang.String.fromInternalArray((char[] $array_literal = new char[3],($array_literal[0] = 97),($array_literal[1] = 98),($array_literal[2] = 99),$array_literal)));
   (call_ref (local.get $b)(call $m_fromInternalArray__arrayOf_char__java_lang_String@java.lang.String (block (result (ref null $char.array))
    
    (local.set $$array_literal_1 (struct.new_with_rtt $char.array (global.get $java.lang.Object.vtable) (i32.const 0) (array.new_default_with_rtt $char.array.elements (i32.const 3) (global.get $char.array.elements.rtt)) (global.get $char.array.rtt)))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal_1)) (i32.const 0) (i32.const 97))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal_1)) (i32.const 1) (i32.const 98))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal_1)) (i32.const 2) (i32.const 99))
    (local.get $$array_literal_1)
   ))(struct.get $bridgejsmethod.Main.B.vtable $m_bar__java_lang_String__void (struct.get $bridgejsmethod.Main.B $vtable(local.get $b))))
   ;; C c = new C.<init>();
   
   (local.set $c (call $m_<init>__void@bridgejsmethod.Main.C (struct.new_with_rtt $bridgejsmethod.Main.C (global.get $bridgejsmethod.Main.C.vtable) (i32.const 0) (global.get $bridgejsmethod.Main.C.rtt))))
   ;; c.fun(1);
   (drop (call_ref (local.get $c)(ref.null $java.lang.Integer)(struct.get $bridgejsmethod.Main.C.vtable $m_fun__java_lang_Integer__java_lang_Integer (struct.get $bridgejsmethod.Main.C $vtable(local.get $c)))))
   ;; c.bar(1);
   (call_ref (local.get $c)(ref.null $java.lang.Integer)(struct.get $bridgejsmethod.Main.A.vtable $m_bar__java_lang_Object__void (struct.get $bridgejsmethod.Main.A $vtable(local.get $c))))
   ;; D d = new D.<init>();
   
   (local.set $d (call $m_<init>__void@bridgejsmethod.Main.D (struct.new_with_rtt $bridgejsmethod.Main.D (global.get $bridgejsmethod.Main.D.vtable) (i32.const 0) (global.get $bridgejsmethod.Main.D.rtt))))
   ;; d.fun(1);
   (drop (call_ref (local.get $d)(ref.null $java.lang.Integer)(struct.get $bridgejsmethod.Main.D.vtable $m_fun__java_lang_Integer__java_lang_Integer (struct.get $bridgejsmethod.Main.D $vtable(local.get $d)))))
   ;; d.bar(1);
   (call_ref (local.get $d)(ref.null $java.lang.Integer)(struct.get $bridgejsmethod.Main.A.vtable $m_bar__java_lang_Object__void (struct.get $bridgejsmethod.Main.A $vtable(local.get $d))))
   ;; E e = new E.<init>();
   
   (local.set $e (call $m_<init>__void@bridgejsmethod.Main.E (struct.new_with_rtt $bridgejsmethod.Main.E (global.get $bridgejsmethod.Main.E.vtable) (i32.const 0) (global.get $bridgejsmethod.Main.E.rtt))))
   ;; e.fun(java.lang.String.fromInternalArray((char[] $array_literal = new char[3],($array_literal[0] = 97),($array_literal[1] = 98),($array_literal[2] = 99),$array_literal)));
   (drop (call_ref (local.get $e)(call $m_fromInternalArray__arrayOf_char__java_lang_String@java.lang.String (block (result (ref null $char.array))
    
    (local.set $$array_literal_2 (struct.new_with_rtt $char.array (global.get $java.lang.Object.vtable) (i32.const 0) (array.new_default_with_rtt $char.array.elements (i32.const 3) (global.get $char.array.elements.rtt)) (global.get $char.array.rtt)))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal_2)) (i32.const 0) (i32.const 97))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal_2)) (i32.const 1) (i32.const 98))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal_2)) (i32.const 2) (i32.const 99))
    (local.get $$array_literal_2)
   ))(struct.get $bridgejsmethod.Main.B.vtable $m_fun__java_lang_String__java_lang_String (struct.get $bridgejsmethod.Main.B $vtable(local.get $e)))))
   ;; e.bar(java.lang.String.fromInternalArray((char[] $array_literal = new char[3],($array_literal[0] = 97),($array_literal[1] = 98),($array_literal[2] = 99),$array_literal)));
   (call_ref (local.get $e)(call $m_fromInternalArray__arrayOf_char__java_lang_String@java.lang.String (block (result (ref null $char.array))
    
    (local.set $$array_literal_3 (struct.new_with_rtt $char.array (global.get $java.lang.Object.vtable) (i32.const 0) (array.new_default_with_rtt $char.array.elements (i32.const 3) (global.get $char.array.elements.rtt)) (global.get $char.array.rtt)))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal_3)) (i32.const 0) (i32.const 97))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal_3)) (i32.const 1) (i32.const 98))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal_3)) (i32.const 2) (i32.const 99))
    (local.get $$array_literal_3)
   ))(struct.get $bridgejsmethod.Main.B.vtable $m_bar__java_lang_String__void (struct.get $bridgejsmethod.Main.B $vtable(local.get $e))))
   ;; H<Integer> h = new H.<init>();
   
   (local.set $h (call $m_<init>__void@bridgejsmethod.Main.H (struct.new_with_rtt $bridgejsmethod.Main.H (global.get $bridgejsmethod.Main.H.vtable) (i32.const 0) (global.get $bridgejsmethod.Main.H.rtt))))
   ;; h.enclose(1);
   (drop (call_ref (local.get $h)(ref.null $java.lang.Integer)(struct.get $bridgejsmethod.Main.H.vtable $m_enclose__java_lang_Object__java_lang_Object (struct.get $bridgejsmethod.Main.H $vtable(local.get $h)))))
   ;; L<Integer> l = new L.<init>();
   
   (local.set $l (call $m_<init>__void@bridgejsmethod.Main.L (struct.new_with_rtt $bridgejsmethod.Main.L (global.get $bridgejsmethod.Main.L.vtable) (i32.const 0) (global.get $bridgejsmethod.Main.L.rtt))))
   ;; l.fun(java.lang.String.fromInternalArray((char[] $array_literal = new char[3],($array_literal[0] = 102),($array_literal[1] = 111),($array_literal[2] = 111),$array_literal)),1);
   (call_ref (local.get $l)(call $m_fromInternalArray__arrayOf_char__java_lang_String@java.lang.String (block (result (ref null $char.array))
    
    (local.set $$array_literal_4 (struct.new_with_rtt $char.array (global.get $java.lang.Object.vtable) (i32.const 0) (array.new_default_with_rtt $char.array.elements (i32.const 3) (global.get $char.array.elements.rtt)) (global.get $char.array.rtt)))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal_4)) (i32.const 0) (i32.const 102))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal_4)) (i32.const 1) (i32.const 111))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal_4)) (i32.const 2) (i32.const 111))
    (local.get $$array_literal_4)
   ))(ref.null $java.lang.Integer)(struct.get $bridgejsmethod.Main.L.vtable $m_fun__java_lang_String__java_lang_Object__void_$pp_bridgejsmethod (struct.get $bridgejsmethod.Main.L $vtable(local.get $l))))
  )
 )
)

;;; void Main.$clinit()
(func $$clinit__void@bridgejsmethod.Main
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Code for bridgejsmethod.Main.A [CLASS]
(type $bridgejsmethod.Main.A (struct
 (field $vtable (ref null $bridgejsmethod.Main.A.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $bridgejsmethod.Main.A.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_fun__java_lang_Object__java_lang_Object (mut (ref $function.$java.lang.Object__$java.lang.Object)))
 (field $m_bar__java_lang_Object__void (mut (ref $function.$java.lang.Object__$void)))
))

;;; A()
(func $m_<init>__void@bridgejsmethod.Main.A
 (param $this (ref null $bridgejsmethod.Main.A))
 (result (ref null $bridgejsmethod.Main.A))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; T A.fun(T t)
(func $m_fun__java_lang_Object__java_lang_Object@bridgejsmethod.Main.A
 (param $this.untyped (ref null $java.lang.Object))
 (param $t (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (local $this (ref null $bridgejsmethod.Main.A))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.A (local.get $this.untyped) (global.get $bridgejsmethod.Main.A.rtt)))
 (block $return.label
  (block
   ;; return t;
   (local.set $return.value (local.get $t))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_fun__java_lang_Object__java_lang_Object@bridgejsmethod.Main.A)

;;; void A.bar(T t)
(func $m_bar__java_lang_Object__void@bridgejsmethod.Main.A
 (param $this.untyped (ref null $java.lang.Object))
 (param $t (ref null $java.lang.Object))
 (local $this (ref null $bridgejsmethod.Main.A))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.A (local.get $this.untyped) (global.get $bridgejsmethod.Main.A.rtt)))
 (block $return.label
  (block
  )
 )
)
(elem declare func $m_bar__java_lang_Object__void@bridgejsmethod.Main.A)

;;; void A.$clinit()
(func $$clinit__void@bridgejsmethod.Main.A
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.A.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_A)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.A.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_A (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Code for bridgejsmethod.Main.I [INTERFACE]

;;; void I.$clinit()
(func $$clinit__void@bridgejsmethod.Main.I
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.I.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_I)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.I.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_I (i32.const 1))
  )
 )
)

;;; Code for bridgejsmethod.Main.J [INTERFACE]

;;; void J.$clinit()
(func $$clinit__void@bridgejsmethod.Main.J
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.J.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_J)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.J.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_J (i32.const 1))
  )
 )
)

;;; Code for bridgejsmethod.Main.B [CLASS]
(type $bridgejsmethod.Main.B (struct
 (field $vtable (ref null $bridgejsmethod.Main.B.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $bridgejsmethod.Main.B.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_fun__java_lang_Object__java_lang_Object (mut (ref $function.$java.lang.Object__$java.lang.Object)))
 (field $m_bar__java_lang_Object__void (mut (ref $function.$java.lang.Object__$void)))
 (field $m_fun__java_lang_String__java_lang_String (mut (ref $function.$java.lang.String__$java.lang.String)))
 (field $m_bar__java_lang_String__void (mut (ref $function.$java.lang.String__$void)))
))

;;; B()
(func $m_<init>__void@bridgejsmethod.Main.B
 (param $this (ref null $bridgejsmethod.Main.B))
 (result (ref null $bridgejsmethod.Main.B))
 (block $return.label
  (block
   ;; A.this.A.<init>();
   (drop (call $m_<init>__void@bridgejsmethod.Main.A (local.get $this)))
  )
 )
 (local.get $this)
)

;;; String B.fun(String s)
(func $m_fun__java_lang_String__java_lang_String@bridgejsmethod.Main.B
 (param $this.untyped (ref null $java.lang.Object))
 (param $s (ref null $java.lang.String))
 (result (ref null $java.lang.String))
 (local $return.value (ref null $java.lang.String))
 (local $this (ref null $bridgejsmethod.Main.B))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.B (local.get $this.untyped) (global.get $bridgejsmethod.Main.B.rtt)))
 (block $return.label
  (block
   ;; return s;
   (local.set $return.value (local.get $s))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_fun__java_lang_String__java_lang_String@bridgejsmethod.Main.B)

;;; void B.bar(String s)
(func $m_bar__java_lang_String__void@bridgejsmethod.Main.B
 (param $this.untyped (ref null $java.lang.Object))
 (param $s (ref null $java.lang.String))
 (local $this (ref null $bridgejsmethod.Main.B))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.B (local.get $this.untyped) (global.get $bridgejsmethod.Main.B.rtt)))
 (block $return.label
  (block
  )
 )
)
(elem declare func $m_bar__java_lang_String__void@bridgejsmethod.Main.B)

;;; void B.bar(Object arg0)
(func $m_bar__java_lang_Object__void@bridgejsmethod.Main.B
 (param $this.untyped (ref null $java.lang.Object))
 (param $arg0 (ref null $java.lang.Object))
 (local $$cast_expression (ref null $java.lang.Object))
 (local $this (ref null $bridgejsmethod.Main.B))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.B (local.get $this.untyped) (global.get $bridgejsmethod.Main.B.rtt)))
 (block $return.label
  (block
   ;; B.this.bar((Object $cast_expression = arg0,(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((String) $cast_expression))));
   (call_ref (local.get $this)(block (result (ref null $java.lang.String))
    
    (local.set $$cast_expression (local.get $arg0))
    (if (result (ref null $java.lang.String)) (ref.is_null (local.get $$cast_expression)) (then (ref.null $java.lang.String)) (else (ref.cast $java.lang.Object $java.lang.String (local.get $$cast_expression) (global.get $java.lang.String.rtt))))
   )(struct.get $bridgejsmethod.Main.B.vtable $m_bar__java_lang_String__void (struct.get $bridgejsmethod.Main.B $vtable(local.get $this))))
  )
 )
)
(elem declare func $m_bar__java_lang_Object__void@bridgejsmethod.Main.B)

;;; String B.fun(Object arg0)
(func $m_fun__java_lang_Object__java_lang_Object@bridgejsmethod.Main.B
 (param $this.untyped (ref null $java.lang.Object))
 (param $arg0 (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (local $$cast_expression (ref null $java.lang.Object))
 (local $this (ref null $bridgejsmethod.Main.B))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.B (local.get $this.untyped) (global.get $bridgejsmethod.Main.B.rtt)))
 (block $return.label
  (block
   ;; return B.this.fun((Object $cast_expression = arg0,(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((String) $cast_expression))));
   (local.set $return.value (call_ref (local.get $this)(block (result (ref null $java.lang.String))
    
    (local.set $$cast_expression (local.get $arg0))
    (if (result (ref null $java.lang.String)) (ref.is_null (local.get $$cast_expression)) (then (ref.null $java.lang.String)) (else (ref.cast $java.lang.Object $java.lang.String (local.get $$cast_expression) (global.get $java.lang.String.rtt))))
   )(struct.get $bridgejsmethod.Main.B.vtable $m_fun__java_lang_String__java_lang_String (struct.get $bridgejsmethod.Main.B $vtable(local.get $this)))))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_fun__java_lang_Object__java_lang_Object@bridgejsmethod.Main.B)

;;; void B.$clinit()
(func $$clinit__void@bridgejsmethod.Main.B
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.B.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_B)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.B.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_B (i32.const 1))
   ;; bridgejsmethod.Main.A.$clinit();
   (call $$clinit__void@bridgejsmethod.Main.A )
  )
 )
)

;;; Code for bridgejsmethod.Main.C [CLASS]
(type $bridgejsmethod.Main.C (struct
 (field $vtable (ref null $bridgejsmethod.Main.C.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $bridgejsmethod.Main.C.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_fun__java_lang_Object__java_lang_Object (mut (ref $function.$java.lang.Object__$java.lang.Object)))
 (field $m_bar__java_lang_Object__void (mut (ref $function.$java.lang.Object__$void)))
 (field $m_fun__java_lang_Integer__java_lang_Integer (mut (ref $function.$java.lang.Integer__$java.lang.Integer)))
))

;;; C()
(func $m_<init>__void@bridgejsmethod.Main.C
 (param $this (ref null $bridgejsmethod.Main.C))
 (result (ref null $bridgejsmethod.Main.C))
 (block $return.label
  (block
   ;; A.this.A.<init>();
   (drop (call $m_<init>__void@bridgejsmethod.Main.A (local.get $this)))
  )
 )
 (local.get $this)
)

;;; Integer C.fun(Integer i)
(func $m_fun__java_lang_Integer__java_lang_Integer@bridgejsmethod.Main.C
 (param $this.untyped (ref null $java.lang.Object))
 (param $i (ref null $java.lang.Integer))
 (result (ref null $java.lang.Integer))
 (local $return.value (ref null $java.lang.Integer))
 (local $this (ref null $bridgejsmethod.Main.C))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.C (local.get $this.untyped) (global.get $bridgejsmethod.Main.C.rtt)))
 (block $return.label
  (block
   ;; return i;
   (local.set $return.value (local.get $i))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_fun__java_lang_Integer__java_lang_Integer@bridgejsmethod.Main.C)

;;; Integer C.fun(Object arg0)
(func $m_fun__java_lang_Object__java_lang_Object@bridgejsmethod.Main.C
 (param $this.untyped (ref null $java.lang.Object))
 (param $arg0 (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (local $$cast_expression (ref null $java.lang.Object))
 (local $this (ref null $bridgejsmethod.Main.C))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.C (local.get $this.untyped) (global.get $bridgejsmethod.Main.C.rtt)))
 (block $return.label
  (block
   ;; return C.this.fun((Object $cast_expression = arg0,(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((Integer) $cast_expression))));
   (local.set $return.value (call_ref (local.get $this)(block (result (ref null $java.lang.Integer))
    
    (local.set $$cast_expression (local.get $arg0))
    (if (result (ref null $java.lang.Integer)) (ref.is_null (local.get $$cast_expression)) (then (ref.null $java.lang.Integer)) (else (ref.cast $java.lang.Object $java.lang.Integer (local.get $$cast_expression) (global.get $java.lang.Integer.rtt))))
   )(struct.get $bridgejsmethod.Main.C.vtable $m_fun__java_lang_Integer__java_lang_Integer (struct.get $bridgejsmethod.Main.C $vtable(local.get $this)))))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_fun__java_lang_Object__java_lang_Object@bridgejsmethod.Main.C)

;;; void C.$clinit()
(func $$clinit__void@bridgejsmethod.Main.C
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.C.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_C)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.C.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_C (i32.const 1))
   ;; bridgejsmethod.Main.A.$clinit();
   (call $$clinit__void@bridgejsmethod.Main.A )
  )
 )
)

;;; Code for bridgejsmethod.Main.D [CLASS]
(type $bridgejsmethod.Main.D (struct
 (field $vtable (ref null $bridgejsmethod.Main.D.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $bridgejsmethod.Main.D.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_fun__java_lang_Object__java_lang_Object (mut (ref $function.$java.lang.Object__$java.lang.Object)))
 (field $m_bar__java_lang_Object__void (mut (ref $function.$java.lang.Object__$void)))
 (field $m_fun__java_lang_Integer__java_lang_Integer (mut (ref $function.$java.lang.Integer__$java.lang.Integer)))
 (field $m_fun__java_lang_Number__java_lang_Number (mut (ref $function.$java.lang.Number__$java.lang.Number)))
))

;;; D()
(func $m_<init>__void@bridgejsmethod.Main.D
 (param $this (ref null $bridgejsmethod.Main.D))
 (result (ref null $bridgejsmethod.Main.D))
 (block $return.label
  (block
   ;; A.this.A.<init>();
   (drop (call $m_<init>__void@bridgejsmethod.Main.A (local.get $this)))
  )
 )
 (local.get $this)
)

;;; Integer D.fun(Integer i)
(func $m_fun__java_lang_Integer__java_lang_Integer@bridgejsmethod.Main.D
 (param $this.untyped (ref null $java.lang.Object))
 (param $i (ref null $java.lang.Integer))
 (result (ref null $java.lang.Integer))
 (local $return.value (ref null $java.lang.Integer))
 (local $this (ref null $bridgejsmethod.Main.D))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.D (local.get $this.untyped) (global.get $bridgejsmethod.Main.D.rtt)))
 (block $return.label
  (block
   ;; return i;
   (local.set $return.value (local.get $i))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_fun__java_lang_Integer__java_lang_Integer@bridgejsmethod.Main.D)

;;; Integer D.fun(Number arg0)
(func $m_fun__java_lang_Number__java_lang_Number@bridgejsmethod.Main.D
 (param $this.untyped (ref null $java.lang.Object))
 (param $arg0 (ref null $java.lang.Number))
 (result (ref null $java.lang.Number))
 (local $return.value (ref null $java.lang.Number))
 (local $$cast_expression (ref null $java.lang.Object))
 (local $this (ref null $bridgejsmethod.Main.D))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.D (local.get $this.untyped) (global.get $bridgejsmethod.Main.D.rtt)))
 (block $return.label
  (block
   ;; return D.this.fun((Object $cast_expression = arg0,(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((Integer) $cast_expression))));
   (local.set $return.value (call_ref (local.get $this)(block (result (ref null $java.lang.Integer))
    
    (local.set $$cast_expression (local.get $arg0))
    (if (result (ref null $java.lang.Integer)) (ref.is_null (local.get $$cast_expression)) (then (ref.null $java.lang.Integer)) (else (ref.cast $java.lang.Object $java.lang.Integer (local.get $$cast_expression) (global.get $java.lang.Integer.rtt))))
   )(struct.get $bridgejsmethod.Main.D.vtable $m_fun__java_lang_Integer__java_lang_Integer (struct.get $bridgejsmethod.Main.D $vtable(local.get $this)))))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_fun__java_lang_Number__java_lang_Number@bridgejsmethod.Main.D)

;;; Integer D.fun(Object arg0)
(func $m_fun__java_lang_Object__java_lang_Object@bridgejsmethod.Main.D
 (param $this.untyped (ref null $java.lang.Object))
 (param $arg0 (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (local $$cast_expression (ref null $java.lang.Object))
 (local $this (ref null $bridgejsmethod.Main.D))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.D (local.get $this.untyped) (global.get $bridgejsmethod.Main.D.rtt)))
 (block $return.label
  (block
   ;; return D.this.fun((Object $cast_expression = arg0,(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((Integer) $cast_expression))));
   (local.set $return.value (call_ref (local.get $this)(block (result (ref null $java.lang.Integer))
    
    (local.set $$cast_expression (local.get $arg0))
    (if (result (ref null $java.lang.Integer)) (ref.is_null (local.get $$cast_expression)) (then (ref.null $java.lang.Integer)) (else (ref.cast $java.lang.Object $java.lang.Integer (local.get $$cast_expression) (global.get $java.lang.Integer.rtt))))
   )(struct.get $bridgejsmethod.Main.D.vtable $m_fun__java_lang_Integer__java_lang_Integer (struct.get $bridgejsmethod.Main.D $vtable(local.get $this)))))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_fun__java_lang_Object__java_lang_Object@bridgejsmethod.Main.D)

;;; void D.$clinit()
(func $$clinit__void@bridgejsmethod.Main.D
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.D.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_D)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.D.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_D (i32.const 1))
   ;; bridgejsmethod.Main.A.$clinit();
   (call $$clinit__void@bridgejsmethod.Main.A )
  )
 )
)

;;; Code for bridgejsmethod.Main.E [CLASS]
(type $bridgejsmethod.Main.E (struct
 (field $vtable (ref null $bridgejsmethod.Main.E.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $bridgejsmethod.Main.E.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_fun__java_lang_Object__java_lang_Object (mut (ref $function.$java.lang.Object__$java.lang.Object)))
 (field $m_bar__java_lang_Object__void (mut (ref $function.$java.lang.Object__$void)))
 (field $m_fun__java_lang_String__java_lang_String (mut (ref $function.$java.lang.String__$java.lang.String)))
 (field $m_bar__java_lang_String__void (mut (ref $function.$java.lang.String__$void)))
))

;;; E()
(func $m_<init>__void@bridgejsmethod.Main.E
 (param $this (ref null $bridgejsmethod.Main.E))
 (result (ref null $bridgejsmethod.Main.E))
 (block $return.label
  (block
   ;; B.this.B.<init>();
   (drop (call $m_<init>__void@bridgejsmethod.Main.B (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void E.$clinit()
(func $$clinit__void@bridgejsmethod.Main.E
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.E.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_E)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.E.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_E (i32.const 1))
   ;; bridgejsmethod.Main.B.$clinit();
   (call $$clinit__void@bridgejsmethod.Main.B )
  )
 )
)

;;; Code for bridgejsmethod.Main.F [CLASS]
(type $bridgejsmethod.Main.F (struct
 (field $vtable (ref null $bridgejsmethod.Main.F.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $bridgejsmethod.Main.F.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_fun__java_lang_Object__java_lang_Object (mut (ref $function.$java.lang.Object__$java.lang.Object)))
 (field $m_bar__java_lang_Object__void (mut (ref $function.$java.lang.Object__$void)))
 (field $m_fun__java_lang_Number__java_lang_Number (mut (ref $function.$java.lang.Number__$java.lang.Number)))
 (field $m_fun__java_lang_Integer__java_lang_Integer (mut (ref $function.$java.lang.Integer__$java.lang.Integer)))
))

;;; F()
(func $m_<init>__void@bridgejsmethod.Main.F
 (param $this (ref null $bridgejsmethod.Main.F))
 (result (ref null $bridgejsmethod.Main.F))
 (block $return.label
  (block
   ;; A.this.A.<init>();
   (drop (call $m_<init>__void@bridgejsmethod.Main.A (local.get $this)))
  )
 )
 (local.get $this)
)

;;; Integer F.fun(Number arg0)
(func $m_fun__java_lang_Number__java_lang_Number@bridgejsmethod.Main.F
 (param $this.untyped (ref null $java.lang.Object))
 (param $arg0 (ref null $java.lang.Number))
 (result (ref null $java.lang.Number))
 (local $return.value (ref null $java.lang.Number))
 (local $$cast_expression (ref null $java.lang.Object))
 (local $this (ref null $bridgejsmethod.Main.F))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.F (local.get $this.untyped) (global.get $bridgejsmethod.Main.F.rtt)))
 (block $return.label
  (block
   ;; return F.this.fun((Object $cast_expression = arg0,(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((Integer) $cast_expression))));
   (local.set $return.value (call_ref (local.get $this)(block (result (ref null $java.lang.Integer))
    
    (local.set $$cast_expression (local.get $arg0))
    (if (result (ref null $java.lang.Integer)) (ref.is_null (local.get $$cast_expression)) (then (ref.null $java.lang.Integer)) (else (ref.cast $java.lang.Object $java.lang.Integer (local.get $$cast_expression) (global.get $java.lang.Integer.rtt))))
   )(struct.get $bridgejsmethod.Main.F.vtable $m_fun__java_lang_Integer__java_lang_Integer (struct.get $bridgejsmethod.Main.F $vtable(local.get $this)))))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_fun__java_lang_Number__java_lang_Number@bridgejsmethod.Main.F)

;;; Integer F.fun(Object arg0)
(func $m_fun__java_lang_Object__java_lang_Object@bridgejsmethod.Main.F
 (param $this.untyped (ref null $java.lang.Object))
 (param $arg0 (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (local $$cast_expression (ref null $java.lang.Object))
 (local $this (ref null $bridgejsmethod.Main.F))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.F (local.get $this.untyped) (global.get $bridgejsmethod.Main.F.rtt)))
 (block $return.label
  (block
   ;; return F.this.fun((Object $cast_expression = arg0,(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((Integer) $cast_expression))));
   (local.set $return.value (call_ref (local.get $this)(block (result (ref null $java.lang.Integer))
    
    (local.set $$cast_expression (local.get $arg0))
    (if (result (ref null $java.lang.Integer)) (ref.is_null (local.get $$cast_expression)) (then (ref.null $java.lang.Integer)) (else (ref.cast $java.lang.Object $java.lang.Integer (local.get $$cast_expression) (global.get $java.lang.Integer.rtt))))
   )(struct.get $bridgejsmethod.Main.F.vtable $m_fun__java_lang_Integer__java_lang_Integer (struct.get $bridgejsmethod.Main.F $vtable(local.get $this)))))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_fun__java_lang_Object__java_lang_Object@bridgejsmethod.Main.F)

;;; Integer F.fun(Integer arg0)
(func $m_fun__java_lang_Integer__java_lang_Integer@bridgejsmethod.Main.F
 (param $this.untyped (ref null $java.lang.Object))
 (param $arg0 (ref null $java.lang.Integer))
 (result (ref null $java.lang.Integer))
 (local $return.value (ref null $java.lang.Integer))
 (local $$cast_expression (ref null $java.lang.Object))
 (local $this (ref null $bridgejsmethod.Main.F))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.F (local.get $this.untyped) (global.get $bridgejsmethod.Main.F.rtt)))
 (block $return.label
  (block
   ;; return (Object $cast_expression = super.fun(arg0),(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((Integer) $cast_expression)));
   (local.set $return.value (block (result (ref null $java.lang.Integer))
    
    (local.set $$cast_expression (call $m_fun__java_lang_Object__java_lang_Object@bridgejsmethod.Main.A (local.get $this)(local.get $arg0)))
    (if (result (ref null $java.lang.Integer)) (ref.is_null (local.get $$cast_expression)) (then (ref.null $java.lang.Integer)) (else (ref.cast $java.lang.Object $java.lang.Integer (local.get $$cast_expression) (global.get $java.lang.Integer.rtt))))
   ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_fun__java_lang_Integer__java_lang_Integer@bridgejsmethod.Main.F)

;;; void F.$clinit()
(func $$clinit__void@bridgejsmethod.Main.F
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.F.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_F)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.F.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_F (i32.const 1))
   ;; bridgejsmethod.Main.A.$clinit();
   (call $$clinit__void@bridgejsmethod.Main.A )
  )
 )
)

;;; Code for bridgejsmethod.Main.G [INTERFACE]

;;; void G.$clinit()
(func $$clinit__void@bridgejsmethod.Main.G
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.G.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_G)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.G.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_G (i32.const 1))
  )
 )
)

;;; Code for bridgejsmethod.Main.H [CLASS]
(type $bridgejsmethod.Main.H (struct
 (field $vtable (ref null $bridgejsmethod.Main.H.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $bridgejsmethod.Main.H.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_enclose__java_lang_Object__java_lang_Object (mut (ref $function.$java.lang.Object__$java.lang.Object)))
))

;;; H()
(func $m_<init>__void@bridgejsmethod.Main.H
 (param $this (ref null $bridgejsmethod.Main.H))
 (result (ref null $bridgejsmethod.Main.H))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; V H.enclose(V value)
(func $m_enclose__java_lang_Object__java_lang_Object@bridgejsmethod.Main.H
 (param $this.untyped (ref null $java.lang.Object))
 (param $value (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (local $this (ref null $bridgejsmethod.Main.H))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.H (local.get $this.untyped) (global.get $bridgejsmethod.Main.H.rtt)))
 (block $return.label
  (block
   ;; return null;
   (local.set $return.value (ref.null $java.lang.Object))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_enclose__java_lang_Object__java_lang_Object@bridgejsmethod.Main.H)

;;; void H.$clinit()
(func $$clinit__void@bridgejsmethod.Main.H
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.H.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_H)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.H.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_H (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Code for bridgejsmethod.Main.K [CLASS]
(type $bridgejsmethod.Main.K (struct
 (field $vtable (ref null $bridgejsmethod.Main.K.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $bridgejsmethod.Main.K.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_fun__java_lang_Object__java_lang_Object__void_$pp_bridgejsmethod (mut (ref $function.$java.lang.Object__$java.lang.Object__$void)))
))

;;; K()
(func $m_<init>__void@bridgejsmethod.Main.K
 (param $this (ref null $bridgejsmethod.Main.K))
 (result (ref null $bridgejsmethod.Main.K))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void K.fun(K1 k1, K2 k2)
(func $m_fun__java_lang_Object__java_lang_Object__void_$pp_bridgejsmethod@bridgejsmethod.Main.K
 (param $this.untyped (ref null $java.lang.Object))
 (param $k1 (ref null $java.lang.Object))
 (param $k2 (ref null $java.lang.Object))
 (local $this (ref null $bridgejsmethod.Main.K))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.K (local.get $this.untyped) (global.get $bridgejsmethod.Main.K.rtt)))
 (block $return.label
  (block
  )
 )
)
(elem declare func $m_fun__java_lang_Object__java_lang_Object__void_$pp_bridgejsmethod@bridgejsmethod.Main.K)

;;; void K.$clinit()
(func $$clinit__void@bridgejsmethod.Main.K
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.K.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_K)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.K.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_K (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Code for bridgejsmethod.Main.L [CLASS]
(type $bridgejsmethod.Main.L (struct
 (field $vtable (ref null $bridgejsmethod.Main.L.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $bridgejsmethod.Main.L.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_fun__java_lang_Object__java_lang_Object__void_$pp_bridgejsmethod (mut (ref $function.$java.lang.Object__$java.lang.Object__$void)))
 (field $m_fun__java_lang_String__java_lang_Object__void_$pp_bridgejsmethod (mut (ref $function.$java.lang.String__$java.lang.Object__$void)))
))

;;; L()
(func $m_<init>__void@bridgejsmethod.Main.L
 (param $this (ref null $bridgejsmethod.Main.L))
 (result (ref null $bridgejsmethod.Main.L))
 (block $return.label
  (block
   ;; K.this.K.<init>();
   (drop (call $m_<init>__void@bridgejsmethod.Main.K (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void L.fun(String string, L1 l1)
(func $m_fun__java_lang_String__java_lang_Object__void_$pp_bridgejsmethod@bridgejsmethod.Main.L
 (param $this.untyped (ref null $java.lang.Object))
 (param $string (ref null $java.lang.String))
 (param $l1 (ref null $java.lang.Object))
 (local $this (ref null $bridgejsmethod.Main.L))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.L (local.get $this.untyped) (global.get $bridgejsmethod.Main.L.rtt)))
 (block $return.label
  (block
  )
 )
)
(elem declare func $m_fun__java_lang_String__java_lang_Object__void_$pp_bridgejsmethod@bridgejsmethod.Main.L)

;;; void L.fun(Object arg0, Object arg1)
(func $m_fun__java_lang_Object__java_lang_Object__void_$pp_bridgejsmethod@bridgejsmethod.Main.L
 (param $this.untyped (ref null $java.lang.Object))
 (param $arg0 (ref null $java.lang.Object))
 (param $arg1 (ref null $java.lang.Object))
 (local $$cast_expression (ref null $java.lang.Object))
 (local $this (ref null $bridgejsmethod.Main.L))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.L (local.get $this.untyped) (global.get $bridgejsmethod.Main.L.rtt)))
 (block $return.label
  (block
   ;; L.this.fun((Object $cast_expression = arg0,(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((String) $cast_expression))),arg1);
   (call_ref (local.get $this)(block (result (ref null $java.lang.String))
    
    (local.set $$cast_expression (local.get $arg0))
    (if (result (ref null $java.lang.String)) (ref.is_null (local.get $$cast_expression)) (then (ref.null $java.lang.String)) (else (ref.cast $java.lang.Object $java.lang.String (local.get $$cast_expression) (global.get $java.lang.String.rtt))))
   )(local.get $arg1)(struct.get $bridgejsmethod.Main.L.vtable $m_fun__java_lang_String__java_lang_Object__void_$pp_bridgejsmethod (struct.get $bridgejsmethod.Main.L $vtable(local.get $this))))
  )
 )
)
(elem declare func $m_fun__java_lang_Object__java_lang_Object__void_$pp_bridgejsmethod@bridgejsmethod.Main.L)

;;; void L.$clinit()
(func $$clinit__void@bridgejsmethod.Main.L
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.L.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_L)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.L.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_L (i32.const 1))
   ;; bridgejsmethod.Main.K.$clinit();
   (call $$clinit__void@bridgejsmethod.Main.K )
  )
 )
)

;;; Code for bridgejsmethod.Main.M [INTERFACE]

;;; void M.$clinit()
(func $$clinit__void@bridgejsmethod.Main.M
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.M.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_M)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.M.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_M (i32.const 1))
  )
 )
)

;;; Code for bridgejsmethod.Main.N [CLASS]
(type $bridgejsmethod.Main.N (struct
 (field $vtable (ref null $bridgejsmethod.Main.N.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $$outer_this__bridgejsmethod_Main_N (mut (ref null $bridgejsmethod.Main)))
))
(type $bridgejsmethod.Main.N.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_getB__bridgejsmethod_Main_B (mut (ref $function.__$bridgejsmethod.Main.B)))
))

;;; N(Main $outer_this)
(func $m_<init>__bridgejsmethod_Main__void_$pp_bridgejsmethod@bridgejsmethod.Main.N
 (param $this (ref null $bridgejsmethod.Main.N))
 (param $$outer_this (ref null $bridgejsmethod.Main))
 (result (ref null $bridgejsmethod.Main.N))
 (block $return.label
  (block
   ;; (N.this.this = $outer_this);
   (struct.set $bridgejsmethod.Main.N $$outer_this__bridgejsmethod_Main_N(local.get $this) (local.get $$outer_this))
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void N.$clinit()
(func $$clinit__void@bridgejsmethod.Main.N
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.N.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_N)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.N.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_N (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Code for bridgejsmethod.Main.O [CLASS]
(type $bridgejsmethod.Main.O (struct
 (field $vtable (ref null $bridgejsmethod.Main.O.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $$outer_this__bridgejsmethod_Main_N (mut (ref null $bridgejsmethod.Main)))
 (field $$outer_this__bridgejsmethod_Main_O (mut (ref null $bridgejsmethod.Main)))
 (field $f_b__bridgejsmethod_Main_O_ (mut (ref null $bridgejsmethod.Main.B)))
))
(type $bridgejsmethod.Main.O.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_getB__bridgejsmethod_Main_B (mut (ref $function.__$bridgejsmethod.Main.B)))
))

;;; O(Main $outer_this)
(func $m_<init>__bridgejsmethod_Main__void_$pp_bridgejsmethod@bridgejsmethod.Main.O
 (param $this (ref null $bridgejsmethod.Main.O))
 (param $$outer_this (ref null $bridgejsmethod.Main))
 (result (ref null $bridgejsmethod.Main.O))
 (block $return.label
  (block
   ;; (O.this.this = $outer_this);
   (struct.set $bridgejsmethod.Main.O $$outer_this__bridgejsmethod_Main_O(local.get $this) (local.get $$outer_this))
   ;; N.this.N.<init>($outer_this);
   (drop (call $m_<init>__bridgejsmethod_Main__void_$pp_bridgejsmethod@bridgejsmethod.Main.N (local.get $this)(local.get $$outer_this)))
  )
 )
 (local.get $this)
)

;;; B O.getB()
(func $m_getB__bridgejsmethod_Main_B@bridgejsmethod.Main.O
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $bridgejsmethod.Main.B))
 (local $return.value (ref null $bridgejsmethod.Main.B))
 (local $this (ref null $bridgejsmethod.Main.O))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.O (local.get $this.untyped) (global.get $bridgejsmethod.Main.O.rtt)))
 (block $return.label
  (block
   ;; return O.this.b;
   (local.set $return.value (struct.get $bridgejsmethod.Main.O $f_b__bridgejsmethod_Main_O_(local.get $this)))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getB__bridgejsmethod_Main_B@bridgejsmethod.Main.O)

;;; void O.$clinit()
(func $$clinit__void@bridgejsmethod.Main.O
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.O.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_O)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.O.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_O (i32.const 1))
   ;; bridgejsmethod.Main.N.$clinit();
   (call $$clinit__void@bridgejsmethod.Main.N )
  )
 )
)

;;; Code for bridgejsmethod.Main.P [INTERFACE]

;;; void P.$clinit()
(func $$clinit__void@bridgejsmethod.Main.P
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.P.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_P)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.P.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_P (i32.const 1))
  )
 )
)

;;; Code for bridgejsmethod.Main.Q [CLASS]
(type $bridgejsmethod.Main.Q (struct
 (field $vtable (ref null $bridgejsmethod.Main.Q.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $$outer_this__bridgejsmethod_Main_Q (mut (ref null $bridgejsmethod.Main)))
))
(type $bridgejsmethod.Main.Q.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_getKey__java_lang_String (mut (ref $function.__$java.lang.String)))
))

;;; Q(Main $outer_this)
(func $m_<init>__bridgejsmethod_Main__void_$pp_bridgejsmethod@bridgejsmethod.Main.Q
 (param $this (ref null $bridgejsmethod.Main.Q))
 (param $$outer_this (ref null $bridgejsmethod.Main))
 (result (ref null $bridgejsmethod.Main.Q))
 (block $return.label
  (block
   ;; (Q.this.this = $outer_this);
   (struct.set $bridgejsmethod.Main.Q $$outer_this__bridgejsmethod_Main_Q(local.get $this) (local.get $$outer_this))
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void Q.$clinit()
(func $$clinit__void@bridgejsmethod.Main.Q
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.Q.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_Q)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.Q.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_Q (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Code for bridgejsmethod.Main.R [CLASS]
(type $bridgejsmethod.Main.R (struct
 (field $vtable (ref null $bridgejsmethod.Main.R.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $$outer_this__bridgejsmethod_Main_Q (mut (ref null $bridgejsmethod.Main)))
 (field $$outer_this__bridgejsmethod_Main_R (mut (ref null $bridgejsmethod.Main)))
))
(type $bridgejsmethod.Main.R.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_getKey__java_lang_String (mut (ref $function.__$java.lang.String)))
))

;;; R(Main $outer_this)
(func $m_<init>__bridgejsmethod_Main__void_$pp_bridgejsmethod@bridgejsmethod.Main.R
 (param $this (ref null $bridgejsmethod.Main.R))
 (param $$outer_this (ref null $bridgejsmethod.Main))
 (result (ref null $bridgejsmethod.Main.R))
 (block $return.label
  (block
   ;; (R.this.this = $outer_this);
   (struct.set $bridgejsmethod.Main.R $$outer_this__bridgejsmethod_Main_R(local.get $this) (local.get $$outer_this))
   ;; Q.this.Q.<init>($outer_this);
   (drop (call $m_<init>__bridgejsmethod_Main__void_$pp_bridgejsmethod@bridgejsmethod.Main.Q (local.get $this)(local.get $$outer_this)))
  )
 )
 (local.get $this)
)

;;; String R.getKey()
(func $m_getKey__java_lang_String@bridgejsmethod.Main.R
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.String))
 (local $return.value (ref null $java.lang.String))
 (local $this (ref null $bridgejsmethod.Main.R))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.R (local.get $this.untyped) (global.get $bridgejsmethod.Main.R.rtt)))
 (block $return.label
  (block
   ;; return null;
   (local.set $return.value (ref.null $java.lang.String))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getKey__java_lang_String@bridgejsmethod.Main.R)

;;; void R.$clinit()
(func $$clinit__void@bridgejsmethod.Main.R
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.R.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_R)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.R.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_R (i32.const 1))
   ;; bridgejsmethod.Main.Q.$clinit();
   (call $$clinit__void@bridgejsmethod.Main.Q )
  )
 )
)

;;; Code for bridgejsmethod.Main.S [CLASS]
(type $bridgejsmethod.Main.S (struct
 (field $vtable (ref null $bridgejsmethod.Main.S.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $$outer_this__bridgejsmethod_Main_Q (mut (ref null $bridgejsmethod.Main)))
 (field $$outer_this__bridgejsmethod_Main_R (mut (ref null $bridgejsmethod.Main)))
 (field $$outer_this__bridgejsmethod_Main_S (mut (ref null $bridgejsmethod.Main)))
))
(type $bridgejsmethod.Main.S.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_getKey__java_lang_String (mut (ref $function.__$java.lang.String)))
))

;;; S(Main $outer_this)
(func $m_<init>__bridgejsmethod_Main__void_$pp_bridgejsmethod@bridgejsmethod.Main.S
 (param $this (ref null $bridgejsmethod.Main.S))
 (param $$outer_this (ref null $bridgejsmethod.Main))
 (result (ref null $bridgejsmethod.Main.S))
 (block $return.label
  (block
   ;; (S.this.this = $outer_this);
   (struct.set $bridgejsmethod.Main.S $$outer_this__bridgejsmethod_Main_S(local.get $this) (local.get $$outer_this))
   ;; R.this.R.<init>($outer_this);
   (drop (call $m_<init>__bridgejsmethod_Main__void_$pp_bridgejsmethod@bridgejsmethod.Main.R (local.get $this)(local.get $$outer_this)))
  )
 )
 (local.get $this)
)

;;; void S.$clinit()
(func $$clinit__void@bridgejsmethod.Main.S
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.S.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_S)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.S.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_S (i32.const 1))
   ;; bridgejsmethod.Main.R.$clinit();
   (call $$clinit__void@bridgejsmethod.Main.R )
  )
 )
)

;;; Code for bridgejsmethod.Main.GrandParent [CLASS]
(type $bridgejsmethod.Main.GrandParent (struct
 (field $vtable (ref null $bridgejsmethod.Main.GrandParent.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $$outer_this__bridgejsmethod_Main_GrandParent (mut (ref null $bridgejsmethod.Main)))
))
(type $bridgejsmethod.Main.GrandParent.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_jsMethod__java_lang_Object__void (mut (ref $function.$java.lang.Object__$void)))
 (field $m_method__java_lang_Object__void (mut (ref $function.$java.lang.Object__$void)))
))

;;; GrandParent(Main $outer_this)
(func $m_<init>__bridgejsmethod_Main__void_$pp_bridgejsmethod@bridgejsmethod.Main.GrandParent
 (param $this (ref null $bridgejsmethod.Main.GrandParent))
 (param $$outer_this (ref null $bridgejsmethod.Main))
 (result (ref null $bridgejsmethod.Main.GrandParent))
 (block $return.label
  (block
   ;; (GrandParent.this.this = $outer_this);
   (struct.set $bridgejsmethod.Main.GrandParent $$outer_this__bridgejsmethod_Main_GrandParent(local.get $this) (local.get $$outer_this))
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void GrandParent.jsMethod(T t)
(func $m_jsMethod__java_lang_Object__void@bridgejsmethod.Main.GrandParent
 (param $this.untyped (ref null $java.lang.Object))
 (param $t (ref null $java.lang.Object))
 (local $this (ref null $bridgejsmethod.Main.GrandParent))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.GrandParent (local.get $this.untyped) (global.get $bridgejsmethod.Main.GrandParent.rtt)))
 (block $return.label
  (block
  )
 )
)
(elem declare func $m_jsMethod__java_lang_Object__void@bridgejsmethod.Main.GrandParent)

;;; void GrandParent.method(T t)
(func $m_method__java_lang_Object__void@bridgejsmethod.Main.GrandParent
 (param $this.untyped (ref null $java.lang.Object))
 (param $t (ref null $java.lang.Object))
 (local $this (ref null $bridgejsmethod.Main.GrandParent))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.GrandParent (local.get $this.untyped) (global.get $bridgejsmethod.Main.GrandParent.rtt)))
 (block $return.label
  (block
  )
 )
)
(elem declare func $m_method__java_lang_Object__void@bridgejsmethod.Main.GrandParent)

;;; void GrandParent.$clinit()
(func $$clinit__void@bridgejsmethod.Main.GrandParent
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.GrandParent.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_GrandParent)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.GrandParent.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_GrandParent (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Code for bridgejsmethod.Main.Parent [CLASS]
(type $bridgejsmethod.Main.Parent (struct
 (field $vtable (ref null $bridgejsmethod.Main.Parent.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $$outer_this__bridgejsmethod_Main_GrandParent (mut (ref null $bridgejsmethod.Main)))
 (field $$outer_this__bridgejsmethod_Main_Parent (mut (ref null $bridgejsmethod.Main)))
))
(type $bridgejsmethod.Main.Parent.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_jsMethod__java_lang_Object__void (mut (ref $function.$java.lang.Object__$void)))
 (field $m_method__java_lang_Object__void (mut (ref $function.$java.lang.Object__$void)))
 (field $m_jsMethod__bridgejsmethod_Main_Parent__void (mut (ref $function.$bridgejsmethod.Main.Parent__$void)))
 (field $m_method__bridgejsmethod_Main_Parent__void (mut (ref $function.$bridgejsmethod.Main.Parent__$void)))
))

;;; Parent(Main $outer_this)
(func $m_<init>__bridgejsmethod_Main__void_$pp_bridgejsmethod@bridgejsmethod.Main.Parent
 (param $this (ref null $bridgejsmethod.Main.Parent))
 (param $$outer_this (ref null $bridgejsmethod.Main))
 (result (ref null $bridgejsmethod.Main.Parent))
 (block $return.label
  (block
   ;; (Parent.this.this = $outer_this);
   (struct.set $bridgejsmethod.Main.Parent $$outer_this__bridgejsmethod_Main_Parent(local.get $this) (local.get $$outer_this))
   ;; GrandParent.this.GrandParent.<init>($outer_this);
   (drop (call $m_<init>__bridgejsmethod_Main__void_$pp_bridgejsmethod@bridgejsmethod.Main.GrandParent (local.get $this)(local.get $$outer_this)))
  )
 )
 (local.get $this)
)

;;; void Parent.jsMethod(T t)
(func $m_jsMethod__bridgejsmethod_Main_Parent__void@bridgejsmethod.Main.Parent
 (param $this.untyped (ref null $java.lang.Object))
 (param $t (ref null $bridgejsmethod.Main.Parent))
 (local $this (ref null $bridgejsmethod.Main.Parent))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.Parent (local.get $this.untyped) (global.get $bridgejsmethod.Main.Parent.rtt)))
 (block $return.label
  (block
  )
 )
)
(elem declare func $m_jsMethod__bridgejsmethod_Main_Parent__void@bridgejsmethod.Main.Parent)

;;; void Parent.method(T t)
(func $m_method__bridgejsmethod_Main_Parent__void@bridgejsmethod.Main.Parent
 (param $this.untyped (ref null $java.lang.Object))
 (param $t (ref null $bridgejsmethod.Main.Parent))
 (local $this (ref null $bridgejsmethod.Main.Parent))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.Parent (local.get $this.untyped) (global.get $bridgejsmethod.Main.Parent.rtt)))
 (block $return.label
  (block
  )
 )
)
(elem declare func $m_method__bridgejsmethod_Main_Parent__void@bridgejsmethod.Main.Parent)

;;; void Parent.jsMethod(Object arg0)
(func $m_jsMethod__java_lang_Object__void@bridgejsmethod.Main.Parent
 (param $this.untyped (ref null $java.lang.Object))
 (param $arg0 (ref null $java.lang.Object))
 (local $$cast_expression (ref null $java.lang.Object))
 (local $this (ref null $bridgejsmethod.Main.Parent))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.Parent (local.get $this.untyped) (global.get $bridgejsmethod.Main.Parent.rtt)))
 (block $return.label
  (block
   ;; Parent.this.jsMethod((Object $cast_expression = arg0,(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((T) $cast_expression))));
   (call_ref (local.get $this)(block (result (ref null $bridgejsmethod.Main.Parent))
    
    (local.set $$cast_expression (local.get $arg0))
    (if (result (ref null $bridgejsmethod.Main.Parent)) (ref.is_null (local.get $$cast_expression)) (then (ref.null $bridgejsmethod.Main.Parent)) (else (ref.cast $java.lang.Object $bridgejsmethod.Main.Parent (local.get $$cast_expression) (global.get $bridgejsmethod.Main.Parent.rtt))))
   )(struct.get $bridgejsmethod.Main.Parent.vtable $m_jsMethod__bridgejsmethod_Main_Parent__void (struct.get $bridgejsmethod.Main.Parent $vtable(local.get $this))))
  )
 )
)
(elem declare func $m_jsMethod__java_lang_Object__void@bridgejsmethod.Main.Parent)

;;; void Parent.method(Object arg0)
(func $m_method__java_lang_Object__void@bridgejsmethod.Main.Parent
 (param $this.untyped (ref null $java.lang.Object))
 (param $arg0 (ref null $java.lang.Object))
 (local $$cast_expression (ref null $java.lang.Object))
 (local $this (ref null $bridgejsmethod.Main.Parent))
 (local.set $this (ref.cast $java.lang.Object $bridgejsmethod.Main.Parent (local.get $this.untyped) (global.get $bridgejsmethod.Main.Parent.rtt)))
 (block $return.label
  (block
   ;; Parent.this.method((Object $cast_expression = arg0,(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((T) $cast_expression))));
   (call_ref (local.get $this)(block (result (ref null $bridgejsmethod.Main.Parent))
    
    (local.set $$cast_expression (local.get $arg0))
    (if (result (ref null $bridgejsmethod.Main.Parent)) (ref.is_null (local.get $$cast_expression)) (then (ref.null $bridgejsmethod.Main.Parent)) (else (ref.cast $java.lang.Object $bridgejsmethod.Main.Parent (local.get $$cast_expression) (global.get $bridgejsmethod.Main.Parent.rtt))))
   )(struct.get $bridgejsmethod.Main.Parent.vtable $m_method__bridgejsmethod_Main_Parent__void (struct.get $bridgejsmethod.Main.Parent $vtable(local.get $this))))
  )
 )
)
(elem declare func $m_method__java_lang_Object__void@bridgejsmethod.Main.Parent)

;;; void Parent.$clinit()
(func $$clinit__void@bridgejsmethod.Main.Parent
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.Parent.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_Parent)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.Parent.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_Parent (i32.const 1))
   ;; bridgejsmethod.Main.GrandParent.$clinit();
   (call $$clinit__void@bridgejsmethod.Main.GrandParent )
  )
 )
)

;;; Code for bridgejsmethod.Main.Child [CLASS]
(type $bridgejsmethod.Main.Child (struct
 (field $vtable (ref null $bridgejsmethod.Main.Child.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $$outer_this__bridgejsmethod_Main_GrandParent (mut (ref null $bridgejsmethod.Main)))
 (field $$outer_this__bridgejsmethod_Main_Parent (mut (ref null $bridgejsmethod.Main)))
 (field $$outer_this__bridgejsmethod_Main_Child (mut (ref null $bridgejsmethod.Main)))
))
(type $bridgejsmethod.Main.Child.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_jsMethod__java_lang_Object__void (mut (ref $function.$java.lang.Object__$void)))
 (field $m_method__java_lang_Object__void (mut (ref $function.$java.lang.Object__$void)))
 (field $m_jsMethod__bridgejsmethod_Main_Parent__void (mut (ref $function.$bridgejsmethod.Main.Parent__$void)))
 (field $m_method__bridgejsmethod_Main_Parent__void (mut (ref $function.$bridgejsmethod.Main.Parent__$void)))
))

;;; Child(Main $outer_this)
(func $m_<init>__bridgejsmethod_Main__void_$pp_bridgejsmethod@bridgejsmethod.Main.Child
 (param $this (ref null $bridgejsmethod.Main.Child))
 (param $$outer_this (ref null $bridgejsmethod.Main))
 (result (ref null $bridgejsmethod.Main.Child))
 (block $return.label
  (block
   ;; (Child.this.this = $outer_this);
   (struct.set $bridgejsmethod.Main.Child $$outer_this__bridgejsmethod_Main_Child(local.get $this) (local.get $$outer_this))
   ;; Parent.this.Parent.<init>($outer_this);
   (drop (call $m_<init>__bridgejsmethod_Main__void_$pp_bridgejsmethod@bridgejsmethod.Main.Parent (local.get $this)(local.get $$outer_this)))
  )
 )
 (local.get $this)
)

;;; void Child.$clinit()
(func $$clinit__void@bridgejsmethod.Main.Child
 (block $return.label
  (block
   ;; if (bridgejsmethod.Main.Child.$initialized) return;
   (if (global.get $f_$initialized__bridgejsmethod_Main_Child)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (bridgejsmethod.Main.Child.$initialized = true);
   (global.set $f_$initialized__bridgejsmethod_Main_Child (i32.const 1))
   ;; bridgejsmethod.Main.Parent.$clinit();
   (call $$clinit__void@bridgejsmethod.Main.Parent )
  )
 )
)

 ;;; Code for bridgejsmethod.Main [vtable.init]
 (global.set $bridgejsmethod.Main.vtable (struct.new_with_rtt $bridgejsmethod.Main.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (rtt.canon $bridgejsmethod.Main.vtable)))

 ;;; Code for bridgejsmethod.Main.A [vtable.init]
 (global.set $bridgejsmethod.Main.A.vtable (struct.new_with_rtt $bridgejsmethod.Main.A.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_fun__java_lang_Object__java_lang_Object@bridgejsmethod.Main.A) (ref.func $m_bar__java_lang_Object__void@bridgejsmethod.Main.A) (rtt.canon $bridgejsmethod.Main.A.vtable)))

 ;;; Code for bridgejsmethod.Main.B [vtable.init]
 (global.set $bridgejsmethod.Main.B.vtable (struct.new_with_rtt $bridgejsmethod.Main.B.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_fun__java_lang_Object__java_lang_Object@bridgejsmethod.Main.B) (ref.func $m_bar__java_lang_Object__void@bridgejsmethod.Main.B) (ref.func $m_fun__java_lang_String__java_lang_String@bridgejsmethod.Main.B) (ref.func $m_bar__java_lang_String__void@bridgejsmethod.Main.B) (rtt.canon $bridgejsmethod.Main.B.vtable)))

 ;;; Code for bridgejsmethod.Main.C [vtable.init]
 (global.set $bridgejsmethod.Main.C.vtable (struct.new_with_rtt $bridgejsmethod.Main.C.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_fun__java_lang_Object__java_lang_Object@bridgejsmethod.Main.C) (ref.func $m_bar__java_lang_Object__void@bridgejsmethod.Main.A) (ref.func $m_fun__java_lang_Integer__java_lang_Integer@bridgejsmethod.Main.C) (rtt.canon $bridgejsmethod.Main.C.vtable)))

 ;;; Code for bridgejsmethod.Main.D [vtable.init]
 (global.set $bridgejsmethod.Main.D.vtable (struct.new_with_rtt $bridgejsmethod.Main.D.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_fun__java_lang_Object__java_lang_Object@bridgejsmethod.Main.D) (ref.func $m_bar__java_lang_Object__void@bridgejsmethod.Main.A) (ref.func $m_fun__java_lang_Integer__java_lang_Integer@bridgejsmethod.Main.D) (ref.func $m_fun__java_lang_Number__java_lang_Number@bridgejsmethod.Main.D) (rtt.canon $bridgejsmethod.Main.D.vtable)))

 ;;; Code for bridgejsmethod.Main.E [vtable.init]
 (global.set $bridgejsmethod.Main.E.vtable (struct.new_with_rtt $bridgejsmethod.Main.E.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_fun__java_lang_Object__java_lang_Object@bridgejsmethod.Main.B) (ref.func $m_bar__java_lang_Object__void@bridgejsmethod.Main.B) (ref.func $m_fun__java_lang_String__java_lang_String@bridgejsmethod.Main.B) (ref.func $m_bar__java_lang_String__void@bridgejsmethod.Main.B) (rtt.canon $bridgejsmethod.Main.E.vtable)))

 ;;; Code for bridgejsmethod.Main.F [vtable.init]
 (global.set $bridgejsmethod.Main.F.vtable (struct.new_with_rtt $bridgejsmethod.Main.F.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_fun__java_lang_Object__java_lang_Object@bridgejsmethod.Main.F) (ref.func $m_bar__java_lang_Object__void@bridgejsmethod.Main.A) (ref.func $m_fun__java_lang_Number__java_lang_Number@bridgejsmethod.Main.F) (ref.func $m_fun__java_lang_Integer__java_lang_Integer@bridgejsmethod.Main.F) (rtt.canon $bridgejsmethod.Main.F.vtable)))

 ;;; Code for bridgejsmethod.Main.H [vtable.init]
 (global.set $bridgejsmethod.Main.H.vtable (struct.new_with_rtt $bridgejsmethod.Main.H.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_enclose__java_lang_Object__java_lang_Object@bridgejsmethod.Main.H) (rtt.canon $bridgejsmethod.Main.H.vtable)))

 ;;; Code for bridgejsmethod.Main.K [vtable.init]
 (global.set $bridgejsmethod.Main.K.vtable (struct.new_with_rtt $bridgejsmethod.Main.K.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_fun__java_lang_Object__java_lang_Object__void_$pp_bridgejsmethod@bridgejsmethod.Main.K) (rtt.canon $bridgejsmethod.Main.K.vtable)))

 ;;; Code for bridgejsmethod.Main.L [vtable.init]
 (global.set $bridgejsmethod.Main.L.vtable (struct.new_with_rtt $bridgejsmethod.Main.L.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_fun__java_lang_Object__java_lang_Object__void_$pp_bridgejsmethod@bridgejsmethod.Main.L) (ref.func $m_fun__java_lang_String__java_lang_Object__void_$pp_bridgejsmethod@bridgejsmethod.Main.L) (rtt.canon $bridgejsmethod.Main.L.vtable)))

 ;;; Code for bridgejsmethod.Main.O [vtable.init]
 (global.set $bridgejsmethod.Main.O.vtable (struct.new_with_rtt $bridgejsmethod.Main.O.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_getB__bridgejsmethod_Main_B@bridgejsmethod.Main.O) (rtt.canon $bridgejsmethod.Main.O.vtable)))

 ;;; Code for bridgejsmethod.Main.S [vtable.init]
 (global.set $bridgejsmethod.Main.S.vtable (struct.new_with_rtt $bridgejsmethod.Main.S.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_getKey__java_lang_String@bridgejsmethod.Main.R) (rtt.canon $bridgejsmethod.Main.S.vtable)))

 ;;; Code for bridgejsmethod.Main.GrandParent [vtable.init]
 (global.set $bridgejsmethod.Main.GrandParent.vtable (struct.new_with_rtt $bridgejsmethod.Main.GrandParent.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_jsMethod__java_lang_Object__void@bridgejsmethod.Main.GrandParent) (ref.func $m_method__java_lang_Object__void@bridgejsmethod.Main.GrandParent) (rtt.canon $bridgejsmethod.Main.GrandParent.vtable)))

 ;;; Code for bridgejsmethod.Main.Parent [vtable.init]
 (global.set $bridgejsmethod.Main.Parent.vtable (struct.new_with_rtt $bridgejsmethod.Main.Parent.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_jsMethod__java_lang_Object__void@bridgejsmethod.Main.Parent) (ref.func $m_method__java_lang_Object__void@bridgejsmethod.Main.Parent) (ref.func $m_jsMethod__bridgejsmethod_Main_Parent__void@bridgejsmethod.Main.Parent) (ref.func $m_method__bridgejsmethod_Main_Parent__void@bridgejsmethod.Main.Parent) (rtt.canon $bridgejsmethod.Main.Parent.vtable)))

 ;;; Code for bridgejsmethod.Main.Child [vtable.init]
 (global.set $bridgejsmethod.Main.Child.vtable (struct.new_with_rtt $bridgejsmethod.Main.Child.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_jsMethod__java_lang_Object__void@bridgejsmethod.Main.Parent) (ref.func $m_method__java_lang_Object__void@bridgejsmethod.Main.Parent) (ref.func $m_jsMethod__bridgejsmethod_Main_Parent__void@bridgejsmethod.Main.Parent) (ref.func $m_method__bridgejsmethod_Main_Parent__void@bridgejsmethod.Main.Parent) (rtt.canon $bridgejsmethod.Main.Child.vtable)))
