// Generated from "typewildcards/TypeWildCards.java"
@file:OptIn(ExperimentalObjCName::class)

package typewildcards

import javaemul.lang.*
import kotlin.Any
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName
import typewildcards.Bar
import typewildcards.DeepRecursiveType
import typewildcards.Function
import typewildcards.GenericType
import typewildcards.List
import typewildcards.RecursiveSubtype
import typewildcards.RecursiveType
import typewildcards.TypeWildCards

@ObjCName("TypewildcardsFunction", exact = true)
fun interface Function<I, O> {
 fun apply(
  @ObjCName("withNSObject", exact = false) i: I
 ): O
}

@ObjCName("TypewildcardsList", exact = true)
interface List<I> {}

@ObjCName("TypewildcardsGenericType", exact = true)
open class GenericType<T> {
 open fun get(): T {
  return null as T
 }
}

@ObjCName("TypewildcardsBar", exact = true)
open class Bar {}

@ObjCName("TypewildcardsRecursiveType", exact = true)
open class RecursiveType<T: RecursiveType<T>?> {
 constructor(
  @ObjCName("withTypewildcardsRecursiveType", exact = false) wildcardParameter: RecursiveType<*>?
 )
}

@ObjCName("TypewildcardsDeepRecursiveType", exact = true)
interface DeepRecursiveType<T: GenericType<in T>?> {}

@ObjCName("TypewildcardsRecursiveSubtype", exact = true)
open class RecursiveSubtype: RecursiveType<RecursiveSubtype?> {
 constructor(
  @ObjCName("withTypewildcardsRecursiveType", exact = false) wildcardParameter: RecursiveType<*>?
 ): super(wildcardParameter)
}

@ObjCName("TypewildcardsTypeWildCards", exact = true)
open class TypeWildCards {
 open fun unbounded(
  @ObjCName("withTypewildcardsGenericType", exact = false) g: GenericType<*>?
 ): Any? {
  return g!!.get()
 }

 open fun upperBound(
  @ObjCName("withTypewildcardsGenericType", exact = false) g: GenericType<out Bar?>?
 ): Bar? {
  return g!!.get()
 }

 open fun lowerBound(
  @ObjCName("withTypewildcardsGenericType", exact = false) g: GenericType<in Bar?>?
 ): Any? {
  return g!!.get()
 }

 open fun unboundedRecursive(
  @ObjCName("withTypewildcardsRecursiveType", exact = false) g: RecursiveType<*>?
 ) {}

 open fun upperBoundRecursive(
  @ObjCName("withTypewildcardsGenericType", exact = false) g: GenericType<out RecursiveType<*>?>?
 ) {}

 open fun lowerBoundRecursive(
  @ObjCName("withTypewildcardsGenericType", exact = false) g: GenericType<in RecursiveType<*>?>?
 ) {}

 open fun deepRecursiveType(
  @ObjCName("withTypewildcardsDeepRecursiveType", exact = false) t: DeepRecursiveType<*>?
 ) {}

 open fun test() {
  this.unbounded(GenericType<Bar?>() as GenericType<*>?)
  this.upperBound(GenericType<Bar?>() as GenericType<out Bar?>?)
  this.lowerBound(GenericType<Bar?>() as GenericType<in Bar?>?)
 }

 open fun testInferredGenericIntersection() {
  val elements: List<TypeWildCards.Element?>? = null
  val otherElements: List<TypeWildCards.SubOtherElement?>? = null
  val integers: List<Int?>? = TypeWildCards.transform_private_2(TypeWildCards.concat_private_2(elements, otherElements), Function { a ->
   a!!.getKey()
   return@Function a!!.get()
  })
 }

 open fun testRecursiveGeneric() {
  TypeWildCards.takesRecursiveGeneric_private_2(Foo())
 }

 companion object {
  @JvmStatic
  fun <T: TypeWildCards.A?> testBoundedTypeMemberAccess(
   @ObjCName("withTypewildcardsTypeWildCards_A", exact = false) t: T
  ) {
   val i: Int = t!!.f
   t!!.m()
  }

  @JvmStatic
  fun <T> testIntersectionBoundedTypeMemberAccess(
   @ObjCName("withId", exact = false) t: T
  ) where T: TypeWildCards.A?, T: TypeWildCards.Y? {
   val i: Int = t!!.f
   t!!.m()
   t!!.n()
  }

  @JvmStatic
  fun <F, V> transform_private_2(
   @ObjCName("withTypewildcardsList", exact = false) from: List<F>?,
   @ObjCName("withTypewildcardsFunction", exact = false) function: Function<in F, out V>?
  ): List<V>? {
   return null
  }

  @JvmStatic
  fun <E> concat_private_2(
   @ObjCName("withTypewildcardsList", exact = false) a: List<out E>?,
   @ObjCName("withTypewildcardsList", exact = false) b: List<out E>?
  ): List<E>? {
   return null
  }

  @JvmStatic
  fun takesRecursiveGeneric_private_2(
   @ObjCName("withTypewildcardsGenericType", exact = false) foo: GenericType<TypeWildCards.Foo?>?
  ) {}

  @JvmStatic
  fun <C> testInferredIntersectionWithTypeVariable(
   @ObjCName("withTypewildcardsTypeWildCards_RecursiveInterface", exact = false) ri: TypeWildCards.RecursiveInterface<out C, C>?
  ): C {
   return ri!!.m()
  }

  @JvmStatic
  fun <D> createMultipleGenerics(
   @ObjCName("withTypewildcardsList", exact = false) foo: List<D>?
  ): TypeWildCards.MultipleGenerics<D, String?, List<D>?>? {
   return null
  }

  @JvmField var listWithWildcard: List<*>? = null

  @JvmField var valMultipleGenerics: TypeWildCards.MultipleGenerics<*, String?, *>? = TypeWildCards.createMultipleGenerics(TypeWildCards.listWithWildcard) as TypeWildCards.MultipleGenerics<*, String?, *>?
 }

 @ObjCName("TypewildcardsTypeWildCards_X", exact = true)
 fun interface X {
  fun m()
 }

 @ObjCName("TypewildcardsTypeWildCards_Y", exact = true)
 fun interface Y {
  fun n()
 }

 @ObjCName("TypewildcardsTypeWildCards_A", exact = true)
 open class A: TypeWildCards.X {
  @JvmField var f: Int = 0

  open override fun m() {}
 }

 @ObjCName("TypewildcardsTypeWildCards_IntegerSupplier", exact = true)
 fun interface IntegerSupplier {
  fun get(): Int?
 }

 @ObjCName("TypewildcardsTypeWildCards_HasKey", exact = true)
 fun interface HasKey {
  fun getKey(): String?
 }

 @ObjCName("TypewildcardsTypeWildCards_Element", exact = true)
 abstract inner class Element: TypeWildCards.HasKey, TypeWildCards.IntegerSupplier {}

 @ObjCName("TypewildcardsTypeWildCards_OtherElement", exact = true)
 abstract inner class OtherElement: TypeWildCards.IntegerSupplier, TypeWildCards.HasKey {}

 @ObjCName("TypewildcardsTypeWildCards_SubOtherElement", exact = true)
 abstract inner class SubOtherElement: TypeWildCards.HasKey, TypeWildCards.OtherElement() {}

 @ObjCName("TypewildcardsTypeWildCards_Foo", exact = true)
 open inner class Foo: GenericType<TypeWildCards.Foo?>() {}

 @ObjCName("TypewildcardsTypeWildCards_RecursiveInterface", exact = true)
 fun interface RecursiveInterface<T: TypeWildCards.RecursiveInterface<T, C>?, C> {
  fun m(): T
 }

 @ObjCName("TypewildcardsTypeWildCards_MultipleGenerics", exact = true)
 open inner class MultipleGenerics<A, B, C> {}
}
