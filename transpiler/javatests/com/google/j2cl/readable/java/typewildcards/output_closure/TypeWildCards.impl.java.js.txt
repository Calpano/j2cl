goog.module('typewildcards.TypeWildCards$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let List = goog.forwardDeclare('java.util.List$impl');
let j_u_function_Function = goog.forwardDeclare('java.util.function.Function$impl');
let GenericType = goog.forwardDeclare('typewildcards.GenericType$impl');
let A = goog.forwardDeclare('typewildcards.TypeWildCards.A$impl');
let Foo = goog.forwardDeclare('typewildcards.TypeWildCards.Foo$impl');
let HasKey = goog.forwardDeclare('typewildcards.TypeWildCards.HasKey$impl');
let IntegerSupplier = goog.forwardDeclare('typewildcards.TypeWildCards.IntegerSupplier$impl');
let RecursiveInterface = goog.forwardDeclare('typewildcards.TypeWildCards.RecursiveInterface$impl');
let Y = goog.forwardDeclare('typewildcards.TypeWildCards.Y$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

class TypeWildCards extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!TypeWildCards} */
 static $create__() {
  TypeWildCards.$clinit();
  let $instance = new TypeWildCards();
  $instance.$ctor__typewildcards_TypeWildCards__void();
  return $instance;
 }
 /** @nodts */
 $ctor__typewildcards_TypeWildCards__void() {
  this.$ctor__java_lang_Object__void();
 }
 /** @nodts */
 m_unbounded__typewildcards_GenericType__void(/** GenericType<?> */ g) {}
 /** @nodts */
 m_upperBound__typewildcards_GenericType__void(/** GenericType<?> */ g) {}
 /** @nodts */
 m_lowerBound__typewildcards_GenericType__void(/** GenericType<?> */ g) {}
 /** @nodts */
 m_test__void() {
  this.m_unbounded__typewildcards_GenericType__void(/**@type {!GenericType<TypeWildCards>}*/ (GenericType.$create__()));
  this.m_upperBound__typewildcards_GenericType__void(/**@type {!GenericType<TypeWildCards>}*/ (GenericType.$create__()));
  this.m_lowerBound__typewildcards_GenericType__void(/**@type {!GenericType<TypeWildCards>}*/ (GenericType.$create__()));
 }
 /** @nodts @template T */
 static m_testBoundedTypeMemberAccess__typewildcards_TypeWildCards_A__void(/** T */ t) {
  TypeWildCards.$clinit();
  let i = /**@type {!A}*/ (t).f_f__typewildcards_TypeWildCards_A;
  /**@type {!A}*/ (t).m_m__void();
 }
 /** @nodts @template T */
 static m_testIntersectionBoundedTypeMemberAccess__typewildcards_TypeWildCards_A__void(/** T */ t) {
  TypeWildCards.$clinit();
  let i = /**@type {!A}*/ (t).f_f__typewildcards_TypeWildCards_A;
  /**@type {!A}*/ (t).m_m__void();
  /**@type {!Y}*/ ($Casts.$to(t, Y)).m_n__void();
 }
 /** @nodts @template F, V @return {List<V>} */
 static m_transform__java_util_List__java_util_function_Function__java_util_List(/** List<F> */ from, /** j_u_function_Function<?, ?> */ function_1) {
  return null;
 }
 /** @nodts @template E @return {List<E>} */
 static m_concat__java_util_List__java_util_List__java_util_List(/** List<?> */ a, /** List<?> */ b) {
  return null;
 }
 /** @nodts */
 m_testInferredGenericIntersection__void() {
  let elements = null;
  let otherElements = null;
  let integers = /**@type {List<Integer>}*/ (TypeWildCards.m_transform__java_util_List__java_util_function_Function__java_util_List(/**@type {List<*>}*/ (TypeWildCards.m_concat__java_util_List__java_util_List__java_util_List(elements, otherElements)), j_u_function_Function.$adapt((/** ? */ a) =>{
   /**@type {!HasKey}*/ ($Casts.$to(a, HasKey)).m_getKey__java_lang_String();
   return /**@type {!IntegerSupplier}*/ ($Casts.$to(a, IntegerSupplier)).m_get__java_lang_Integer();
  })));
 }
 /** @nodts */
 static m_takesRecursiveGeneric__typewildcards_GenericType__void(/** GenericType<Foo> */ foo) {}
 /** @nodts */
 m_testRecursiveGeneric__void() {
  TypeWildCards.m_takesRecursiveGeneric__typewildcards_GenericType__void(Foo.$create__typewildcards_TypeWildCards(this));
 }
 /** @nodts @template C @return {C} */
 static m_testInferredIntersectionWithTypeVariable__typewildcards_TypeWildCards_RecursiveInterface__java_lang_Object(/** RecursiveInterface<?, C> */ ri) {
  TypeWildCards.$clinit();
  return ri.m_m__typewildcards_TypeWildCards_RecursiveInterface();
 }
 /** @nodts */
 static $clinit() {
  TypeWildCards.$clinit = () =>{};
  TypeWildCards.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof TypeWildCards;
 }
 
 /** @nodts */
 static $loadModules() {
  j_u_function_Function = goog.module.get('java.util.function.Function$impl');
  GenericType = goog.module.get('typewildcards.GenericType$impl');
  Foo = goog.module.get('typewildcards.TypeWildCards.Foo$impl');
  HasKey = goog.module.get('typewildcards.TypeWildCards.HasKey$impl');
  IntegerSupplier = goog.module.get('typewildcards.TypeWildCards.IntegerSupplier$impl');
  Y = goog.module.get('typewildcards.TypeWildCards.Y$impl');
  $Casts = goog.module.get('vmbootstrap.Casts$impl');
 }
}
$Util.$setClassMetadata(TypeWildCards, 'typewildcards.TypeWildCards');

exports = TypeWildCards;

//# sourceMappingURL=TypeWildCards.js.map
