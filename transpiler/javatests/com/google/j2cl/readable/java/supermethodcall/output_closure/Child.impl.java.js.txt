goog.module('supermethodcall.Child$impl');

const $Util = goog.require('nativebootstrap.Util$impl');
const Parent = goog.require('supermethodcall.Parent$impl');

class Child extends Parent {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!Child} */
 static $create__() {
  Child.$clinit();
  let $instance = new Child();
  $instance.$ctor__supermethodcall_Child__();
  return $instance;
 }
 /** @nodts */
 $ctor__supermethodcall_Child__() {
  this.$ctor__supermethodcall_Parent__();
 }
 /** @override @nodts */
 m_parentSimplest__() {
  super.m_parentSimplest__();
 }
 /** @override @nodts */
 m_parentWithParams__int(/** number */ foo) {
  super.m_parentWithParams__int(foo);
 }
 /** @override @nodts @return {Child} */
 m_parentWithChangingReturn__() {
  super.m_parentWithChangingReturn__();
  return this;
 }
 /** @override @nodts */
 m_grandParentSimplest__() {
  super.m_grandParentSimplest__();
 }
 /** @override @nodts */
 m_grandParentWithParams__int(/** number */ foo) {
  super.m_grandParentWithParams__int(foo);
 }
 /** @override @nodts @return {Child} */
 m_grandParentWithChangingReturn__() {
  super.m_grandParentWithChangingReturn__();
  return this;
 }
 /** @nodts */
 static $clinit() {
  Child.$clinit = () =>{};
  Child.$loadModules();
  Parent.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof Child;
 }
 
 /** @nodts */
 static $loadModules() {}
}
$Util.$setClassMetadata(Child, 'supermethodcall.Child');

exports = Child;

//# sourceMappingURL=Child.js.map
