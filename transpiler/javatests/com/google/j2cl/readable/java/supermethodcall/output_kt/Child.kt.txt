// Generated from "supermethodcall/Child.java"
package supermethodcall

import javaemul.lang.*
import kotlin.jvm.*

interface GrandParentInterface {
 fun defaultGrandParent() {}
}

interface ParentInterface {
 fun defaultParent() {}
}

open class GrandParent {
 open fun grandParentSimplest() {}

 open fun grandParentWithParams(foo: kotlin.Int) {}

 open fun grandParentWithChangingReturn(): kotlin.Any? {
  return null
 }

 open fun defaultParent() {}

 open fun defaultGrandParent() {}
}

open class Parent: supermethodcall.ParentInterface, supermethodcall.GrandParent() {
 open fun parentSimplest() {}

 open fun parentWithParams(foo: kotlin.Int) {}

 open fun parentWithChangingReturn(): kotlin.Any? {
  return null
 }

 open override fun defaultParent() {
  super<supermethodcall.GrandParent>.defaultParent()
  super<supermethodcall.ParentInterface>.defaultParent()
 }
}

open class Child: supermethodcall.GrandParentInterface, supermethodcall.Parent() {
 open override fun parentSimplest() {
  super<supermethodcall.Parent>.parentSimplest()
 }

 open override fun parentWithParams(foo: kotlin.Int) {
  super<supermethodcall.Parent>.parentWithParams(foo)
 }

 open override fun parentWithChangingReturn(): supermethodcall.Child? {
  super<supermethodcall.Parent>.parentWithChangingReturn()
  return this
 }

 open override fun grandParentSimplest() {
  super<supermethodcall.Parent>.grandParentSimplest()
 }

 open override fun grandParentWithParams(foo: kotlin.Int) {
  super<supermethodcall.Parent>.grandParentWithParams(foo)
 }

 open override fun grandParentWithChangingReturn(): supermethodcall.Child? {
  super<supermethodcall.Parent>.grandParentWithChangingReturn()
  return this
 }

 open override fun defaultGrandParent() {
  super<supermethodcall.Parent>.defaultGrandParent()
  super<supermethodcall.GrandParentInterface>.defaultGrandParent()
 }
}

interface I1 {
 fun m() {}
}

fun interface I2 {
 fun m()
}

interface I3: supermethodcall.I1 {}

open class Super {
 open fun m() {}
}

open class Sub: supermethodcall.I2, supermethodcall.I3, supermethodcall.Super() {
 open override fun m() {
  super<supermethodcall.I3>.m()
 }
}
