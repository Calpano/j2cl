// Generated from "genericmethod/GenericMethod.java"
@file:OptIn(ExperimentalObjCName::class)

package genericmethod

import javaemul.lang.*
import genericmethod.GenericMethod
import kotlin.Any
import kotlin.Array
import kotlin.Error
import kotlin.Exception
import kotlin.Number
import kotlin.OptIn
import kotlin.String
import kotlin.arrayOf
import kotlin.collections.MutableList
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("GenericmethodGenericMethod", exact = true)
open class GenericMethod<T> {
 open fun <T_1, S> foo(
  @ObjCName("withId", exact = false) f: T_1,
  @ObjCName("withId", exact = false) s: S
 ) {}

 open fun `fun`(@ObjCName("withJavaLangAny", exact = false) o: Any?) {}

 open fun <T_1: Exception?> `fun`(@ObjCName("withId", exact = false) t: T_1) {}

 open fun <T_1: Error?> `fun`(@ObjCName("withId", exact = false) t: T_1) {
  object : GenericMethod<T_1>() {
   open fun fun2(@ObjCName("withId", exact = false) t: T_1) {}

   open fun <T_1> fun2(@ObjCName("withId", exact = false) t: T_1) {}
  }
  open class ___1LocalClass<T>: GenericMethod<T>() {
   open fun fun2(@ObjCName("withId", exact = false) t: T) {}

   open fun <T_1: Number?> fun2(@ObjCName("withId", exact = false) t: T_1) {}
  }
  ___1LocalClass<T_1>()
 }

 open fun <T_1> bar(): GenericMethod<T_1>? {
  return null
 }

 open fun <T_1> `fun`(@ObjCName("withIdArray", exact = false) array: Array<T_1>?): Array<T_1>? {
  return array
 }

 open fun <T_1> checked(): T_1 {
  return null as T_1
 }

 open fun <T_1> unchecked(): T_1 {
  return null as T_1
 }

 open fun test() {
  val g: GenericMethod<Number?>? = GenericMethod<Number?>()
  g!!.foo<GenericMethod<Number?>?, GenericMethod<Number?>?>(g, g)
  g!!.foo<Error?, Exception?>(java.lang.Error(), java.lang.Exception())
  g!!.`fun`(Any())
  g!!.`fun`<Exception?>(java.lang.Exception())
  g!!.`fun`<Error?>(java.lang.Error())
  g!!.`fun`<String?>(arrayOf<String?>("asdf"))
  var s: String? = this.checked<String?>()
  s = this.unchecked<String?>()
  this.checked<GenericMethod.Content?>()!!.getProp()
  this.unchecked<GenericMethod.Content?>()!!.getProp()
 }

 companion object {
  @JvmStatic
  fun acceptsContent(@ObjCName("withGenericmethodContent", exact = false) content: GenericMethod.Content?) {}

  @JvmStatic
  fun acceptsString(@ObjCName("withJavaLangString", exact = false) string: String?) {}

  @JvmStatic
  fun testErasureCast_wildcard() {
   val list: MutableList<GenericMethod.Container<*>?>? = null
   val content: GenericMethod.Content? = list!!.get(0)!!.get()
   GenericMethod.acceptsString(content!!.getProp())
   GenericMethod.acceptsContent(content)
   val nestedWildcardList: MutableList<GenericMethod.SuperContainer<out GenericMethod.Container<*>?>?>? = null
   val nestedContent: GenericMethod.Content? = nestedWildcardList!!.get(0)!!.get()!!.get()
   GenericMethod.acceptsString(nestedContent!!.getProp())
   GenericMethod.acceptsContent(nestedContent)
   val deepWildcardList: MutableList<GenericMethod.SuperContainer<GenericMethod.Container<*>?>?>? = null
   val deepContent: GenericMethod.Content? = deepWildcardList!!.get(0)!!.get()!!.get()
   GenericMethod.acceptsString(deepContent!!.getProp())
   GenericMethod.acceptsContent(deepContent)
  }

  @JvmStatic
  fun <CT: GenericMethod.Container<C>?, C: GenericMethod.Content?> testErasureCast_typeVariable() {
   val list: MutableList<GenericMethod.Container<C>?>? = null
   val content: GenericMethod.Content? = list!!.get(0)!!.get()
   GenericMethod.acceptsString(content!!.getProp())
   GenericMethod.acceptsContent(content)
   val nestedTypeVariableList: MutableList<GenericMethod.SuperContainer<CT>?>? = null
   val nestedContent: GenericMethod.Content? = nestedTypeVariableList!!.get(0)!!.get()!!.get()
   GenericMethod.acceptsString(nestedContent!!.getProp())
   GenericMethod.acceptsContent(nestedContent)
   val deepTypeVariableList: MutableList<GenericMethod.SuperContainer<GenericMethod.Container<C>?>?>? = null
   val deepContent: GenericMethod.Content? = deepTypeVariableList!!.get(0)!!.get()!!.get()
   GenericMethod.acceptsString(deepContent!!.getProp())
   GenericMethod.acceptsContent(deepContent)
  }

  @JvmStatic
  fun <V> testLowerWildcardBound(
   @ObjCName("withId", exact = false) consumer: GenericMethod.Consumer<in V>?,
   @ObjCName("withId", exact = false) v: V
  ) {
   consumer!!.accept(v)
  }

  @JvmStatic
  fun <V> testUpperWildcardBound(@ObjCName("withId", exact = false) supplier: GenericMethod.Supplier<out V>?): V {
   return supplier!!.get()
  }

  @JvmStatic
  fun <T_1: Number?> methodWithBoundTypeVariable() {}

  @JvmStatic
  fun testMethodCallsWithCaptureTypeArguments() {
   GenericMethod.methodWithBoundTypeVariable<Number?>()
  }
 }

 open class SuperContainer<C: GenericMethod.Container<*>?> {
  open fun get(): C {
   return null as C
  }
 }

 open class Container<CT: GenericMethod.Content?> {
  open fun get(): CT {
   return null as CT
  }
 }

 open class Content {
  open fun getProp(): String? {
   return null
  }
 }

 fun interface Consumer<V> {
  fun accept(@ObjCName("withId", exact = false) v: V)
 }

 fun interface Supplier<V> {
  fun get(): V
 }
}
