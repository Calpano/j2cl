// Generated from "genericmethod/GenericMethod.java"
package genericmethod

import javaemul.lang.*
import kotlin.jvm.*

open class GenericMethod<T> {
 open fun <T_1, S> foo(f: T_1?, s: S?) {}

 open fun `fun`(o: kotlin.Any?) {}

 open fun <T_1: kotlin.Exception?> `fun`(t: T_1?) {}

 open fun <T_1: kotlin.Error?> `fun`(t: T_1?) {
  object : GenericMethod<T_1>() {
   open fun fun2(t: T_1?) {}

   open fun <T_1> fun2(t: T_1?) {}
  }
  open class ___1LocalClass<T>: genericmethod.GenericMethod<T>() {
   open fun fun2(t: T?) {}

   open fun <T_1: kotlin.Number?> fun2(t: T_1?) {}
  }
  ___1LocalClass<T_1>()
 }

 open fun <T_1> bar(): genericmethod.GenericMethod<T_1>? {
  return null
 }

 open fun <T_1> `fun`(array: kotlin.Array<T_1?>?): kotlin.Array<T_1?>? {
  return array
 }

 open fun <T_1> checked(): T_1? {
  return null
 }

 open fun <T_1> unchecked(): T_1? {
  return null
 }

 open fun test() {
  val g: genericmethod.GenericMethod<kotlin.Number?>? = genericmethod.GenericMethod<kotlin.Number?>()
  g!!.foo(g, g)
  g!!.foo(kotlin.Error(), kotlin.Exception())
  g!!.`fun`(kotlin.Any())
  g!!.`fun`(kotlin.Exception())
  g!!.`fun`(kotlin.Error())
  g!!.`fun`(kotlin.arrayOf<kotlin.String?>("asdf"))
  var s: kotlin.String? = this.checked()
  s = this.unchecked()
  this.checked()!!.getProp()
  this.unchecked()!!.getProp()
 }

 companion object {
  @kotlin.jvm.JvmStatic
  fun acceptsContent(content: genericmethod.GenericMethod.Content?) {}

  @kotlin.jvm.JvmStatic
  fun acceptsString(string: kotlin.String?) {}

  @kotlin.jvm.JvmStatic
  fun testErasureCast_wildcard() {
   val list: java.util.List<genericmethod.GenericMethod.Container<out genericmethod.GenericMethod.Content?>?>? = null
   val content: genericmethod.GenericMethod.Content? = list!!.get(0)!!.get()
   genericmethod.GenericMethod.acceptsString(content!!.getProp())
   genericmethod.GenericMethod.acceptsContent(content)
   val nestedWildcardList: java.util.List<genericmethod.GenericMethod.SuperContainer<out genericmethod.GenericMethod.Container<out genericmethod.GenericMethod.Content?>?>?>? = null
   val nestedContent: genericmethod.GenericMethod.Content? = nestedWildcardList!!.get(0)!!.get()!!.get()
   genericmethod.GenericMethod.acceptsString(nestedContent!!.getProp())
   genericmethod.GenericMethod.acceptsContent(nestedContent)
   val deepWildcardList: java.util.List<genericmethod.GenericMethod.SuperContainer<genericmethod.GenericMethod.Container<out genericmethod.GenericMethod.Content?>?>?>? = null
   val deepContent: genericmethod.GenericMethod.Content? = deepWildcardList!!.get(0)!!.get()!!.get()
   genericmethod.GenericMethod.acceptsString(deepContent!!.getProp())
   genericmethod.GenericMethod.acceptsContent(deepContent)
  }

  @kotlin.jvm.JvmStatic
  fun <CT: genericmethod.GenericMethod.Container<C>?, C: genericmethod.GenericMethod.Content?> testErasureCast_typeVariable() {
   val list: java.util.List<genericmethod.GenericMethod.Container<C>?>? = null
   val content: genericmethod.GenericMethod.Content? = list!!.get(0)!!.get()
   genericmethod.GenericMethod.acceptsString(content!!.getProp())
   genericmethod.GenericMethod.acceptsContent(content)
   val nestedTypeVariableList: java.util.List<genericmethod.GenericMethod.SuperContainer<CT>?>? = null
   val nestedContent: genericmethod.GenericMethod.Content? = nestedTypeVariableList!!.get(0)!!.get()!!.get()
   genericmethod.GenericMethod.acceptsString(nestedContent!!.getProp())
   genericmethod.GenericMethod.acceptsContent(nestedContent)
   val deepTypeVariableList: java.util.List<genericmethod.GenericMethod.SuperContainer<genericmethod.GenericMethod.Container<C>?>?>? = null
   val deepContent: genericmethod.GenericMethod.Content? = deepTypeVariableList!!.get(0)!!.get()!!.get()
   genericmethod.GenericMethod.acceptsString(deepContent!!.getProp())
   genericmethod.GenericMethod.acceptsContent(deepContent)
  }

  @kotlin.jvm.JvmStatic
  fun <V> testLowerWildcardBound(consumer: genericmethod.GenericMethod.Consumer<in V?>?, v: V?) {
   consumer!!.accept(v)
  }

  @kotlin.jvm.JvmStatic
  fun <V> testUpperWildcardBound(supplier: genericmethod.GenericMethod.Supplier<out V?>?): V? {
   return supplier!!.get()
  }

  @kotlin.jvm.JvmStatic
  fun <T_1: kotlin.Number?> methodWithBoundTypeVariable() {}

  @kotlin.jvm.JvmStatic
  fun testMethodCallsWithCaptureTypeArguments() {
   genericmethod.GenericMethod.methodWithBoundTypeVariable()
  }
 }

 open class SuperContainer<C: genericmethod.GenericMethod.Container<out genericmethod.GenericMethod.Content?>?> {
  open fun get(): C? {
   return null
  }
 }

 open class Container<CT: genericmethod.GenericMethod.Content?> {
  open fun get(): CT? {
   return null
  }
 }

 open class Content {
  open fun getProp(): kotlin.String? {
   return null
  }
 }

 fun interface Consumer<V> {
  fun accept(v: V?)
 }

 fun interface Supplier<V> {
  fun get(): V?
 }
}
