// Generated from "anonymousclass/AnonymousClass.java"
package anonymousclass

import javaemul.lang.*
import kotlin.jvm.*

abstract class SomeClass {
 abstract fun foo(): kotlin.String?

 constructor(i: kotlin.Int)
}

open class AnonymousClass {
 @kotlin.jvm.JvmField var i: kotlin.Int = 0

 open fun main() {
  val instance: anonymousclass.SomeClass? = object : anonymousclass.SomeClass(this.i) {
   @kotlin.jvm.JvmField var `object`: kotlin.Any? = this

   @kotlin.jvm.JvmField var outer: kotlin.Any? = this@AnonymousClass

   open override fun foo(): kotlin.String? {
    return "a"
   }
  }
 }
}

interface SomeInterface {
 companion object {
  @kotlin.jvm.JvmField val implicitlyStatic: anonymousclass.SomeClass? = object : anonymousclass.SomeClass(1) {
   open override fun foo(): kotlin.String? {
    return "a"
   }
  }
 }
}

open class ThisReferenceTest {
 constructor(test: anonymousclass.ThisReferenceTest?)

 open fun test() {
  object : anonymousclass.ThisReferenceTest(this@ThisReferenceTest) {}
  object : anonymousclass.ThisReferenceTest(object : anonymousclass.ThisReferenceTest(this@ThisReferenceTest) {
   @kotlin.jvm.JvmField var innerThis: kotlin.Any? = this
  }) {}
 }

 companion object {
  @kotlin.jvm.JvmStatic
  fun staticMethod() {}
 }
}
