package anonymousclass

abstract class SomeClass {
 abstract open fun foo(): kotlin.String?

 internal constructor(i: Int): super()
}

open class AnonymousClass {
 constructor(): super()

 open fun main() {
  val instance: anonymousclass.SomeClass? = anonymousclass.`AnonymousClass$1`(this, 1)
 }
}

open class `AnonymousClass$1`: anonymousclass.SomeClass {
 internal constructor(`$outer_this`: anonymousclass.AnonymousClass?, `$_0`: Int): super(`$_0`) {
  this.`this` = `$outer_this`
 }

 @JvmField val `this`: anonymousclass.AnonymousClass?

 @JvmField internal var `object`: kotlin.Any? = this

 @JvmField internal var outer: kotlin.Any? = this.`this`

 open override fun foo(): kotlin.String? {
  return "a"
 }
}

interface SomeInterface {
 companion object {
  @JvmField val implicitlyStatic: anonymousclass.SomeClass? = anonymousclass.`SomeInterface$1`(1)
 }
}

open class `SomeInterface$1`: anonymousclass.SomeClass {
 internal constructor(`$_0`: Int): super(`$_0`)

 open override fun foo(): kotlin.String? {
  return "a"
 }
}
