package anonymousclass

abstract class SomeClass {
 abstract open fun foo(): String?

 internal constructor(i: Int) {}
}

open class AnonymousClass {
 open fun main() {
  val instance: anonymousclass.SomeClass? = TODO("expression.qualify needs rendering: AnonymousClass.this)")
 }
}

open class `1`: anonymousclass.SomeClass {
 internal constructor(`$_0`: Int): super(`$_0`) {

 }

 @JvmField val `this`: anonymousclass.AnonymousClass?

 @JvmField internal var `object`: Any? = this

 @JvmField internal var outer: Any? = this.`this`

 open fun foo(): String? {
  return "a"
 }
}

interface SomeInterface {
 companion object {
  @JvmField val implicitlyStatic: anonymousclass.SomeClass? = anonymousclass.SomeInterface.`1`(1)
 }
}

open class `1`: anonymousclass.SomeClass {
 internal constructor(`$_0`: Int): super(`$_0`) {

 }

 open fun foo(): String? {
  return "a"
 }
}
