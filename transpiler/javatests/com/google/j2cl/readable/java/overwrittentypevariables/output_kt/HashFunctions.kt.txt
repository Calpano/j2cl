package overwrittentypevariables

fun interface MyFunction<F, T> {
 fun apply(input: F?): T?
}

fun interface HashFunction<T>: overwrittentypevariables.MyFunction<T, String?> {}

open class HashFunctions {
 constructor(): super()

 companion object {
  @JvmStatic
  fun <T> hashFunction(): overwrittentypevariables.HashFunction<T>? {
   return overwrittentypevariables.`HashFunctions$1`<T>()
  }

  @JvmStatic
  fun <T: Enum<T>?> enumHashFunction(): overwrittentypevariables.HashFunction<T>? {
   return overwrittentypevariables.`HashFunctions$2`<T>()
  }
 }
}

open class `HashFunctions$1`<T>: overwrittentypevariables.HashFunction<T> {
 internal constructor(): super()

 open override fun apply(input: T?): String? {
  return ""
 }
}

open class `HashFunctions$2`<T: Enum<T>?>: overwrittentypevariables.HashFunction<T> {
 internal constructor(): super()

 open override fun apply(input: T?): String? {
  return "" + input!!.ordinal()
 }
}
