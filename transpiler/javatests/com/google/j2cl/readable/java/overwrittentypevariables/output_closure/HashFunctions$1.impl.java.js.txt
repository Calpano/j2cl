goog.module('overwrittentypevariables.HashFunctions.$1$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');
const HashFunction = goog.require('overwrittentypevariables.HashFunction$impl');

/**
 * @template T
 * @implements {HashFunction<T>}
 */
class $1 extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @template T @return {!$1<T>} */
 static $create__() {
  $1.$clinit();
  let $instance = new $1();
  $instance.$ctor__overwrittentypevariables_HashFunctions_1__();
  return $instance;
 }
 /** @nodts */
 $ctor__overwrittentypevariables_HashFunctions_1__() {
  this.$ctor__java_lang_Object__();
 }
 /** @override @nodts @return {?string} */
 m_apply__java_lang_Object(/** T */ input) {
  return '';
 }
 /** @nodts */
 static $clinit() {
  $1.$clinit = () =>{};
  $1.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof $1;
 }
 
 /** @nodts */
 static $loadModules() {}
}
HashFunction.$markImplementor($1);
$Util.$setClassMetadata($1, 'overwrittentypevariables.HashFunctions$1');

exports = $1;

//# sourceMappingURL=HashFunctions$1.js.map
