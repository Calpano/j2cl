package innerclassinheritance

open class MultipleNestings {
 open fun funInM() {}
}

open class `MultipleNestings$Parent` {
 @JvmField val `this`: innerclassinheritance.MultipleNestings?

 open fun `fun`() {}
}

open class `MultipleNestings$InnerClass1`: innerclassinheritance.`MultipleNestings$Parent`() {
 @JvmField val `this`: innerclassinheritance.MultipleNestings?

 open fun funInI1() {}
}

open class `MultipleNestings$InnerClass1$InnerClass2`: innerclassinheritance.`MultipleNestings$Parent`() {
 @JvmField val `this`: innerclassinheritance.`MultipleNestings$InnerClass1`?

 open fun funInI2() {}

 open fun test() {
  this.`fun`()
  this.`fun`()
  this.`this`!!.`fun`()
  this.`this`!!.`this`!!.funInM()
  this.`this`!!.`this`!!.funInM()
  this.`this`!!.funInI1()
  this.`this`!!.funInI1()
  this.funInI2()
 }
}
