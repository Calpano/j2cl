package innerclassinheritance

open class ParentOuter {
 internal constructor(): super()

 @JvmField var fieldInParentOuter: Int = 0

 open fun funInParentOuter() {}
}

open class ParentInner {
 internal constructor(): super()

 @JvmField var fieldInParentInner: Int = 0

 open fun funInParentInner() {}
}

open class ChildClass: innerclassinheritance.ParentOuter {
 constructor(): super()

 @JvmField var fieldInOuter: Int = 0

 open fun funInOuter() {}

 open fun testLocalClass() {
  if (true) {}
  innerclassinheritance.`ChildClass$1LocalClass`(this).test()
 }
}

open class `ChildClass$InnerClass`: innerclassinheritance.ParentInner {
 @JvmField val `this`: innerclassinheritance.ChildClass?

 internal constructor(`$outer_this`: innerclassinheritance.ChildClass?): super() {
  this.`this` = `$outer_this`
 }

 @JvmField var fieldInInner: Int = 0

 open fun funInInner() {}

 open fun testInnerClass(): Int {
  this.`this`!!.funInParentOuter()
  this.`this`!!.funInParentOuter()
  this.`this`!!.funInOuter()
  this.`this`!!.funInOuter()
  this.funInParentInner()
  this.funInParentInner()
  this.funInInner()
  this.funInInner()
  var a: Int = this.`this`!!.fieldInParentOuter
  a = this.`this`!!.fieldInParentOuter
  a = this.`this`!!.fieldInOuter
  a = this.`this`!!.fieldInOuter
  a = this.fieldInParentInner
  a = this.fieldInParentInner
  a = this.fieldInInner
  a = this.fieldInInner
  return a
 }
}

open class `ChildClass$1LocalClass`: innerclassinheritance.ChildClass {
 @JvmField val `this`: innerclassinheritance.ChildClass?

 internal constructor(`$outer_this`: innerclassinheritance.ChildClass?): super() {
  this.`this` = `$outer_this`
 }

 @JvmField internal var `object`: kotlin.Any? = this

 open override fun funInParentOuter() {}

 open fun test() {
  this.funInOuter()
  this.`this`!!.funInOuter()
  this.funInParentOuter()
  this.funInParentOuter()
  this.`this`!!.funInParentOuter()
 }
}
