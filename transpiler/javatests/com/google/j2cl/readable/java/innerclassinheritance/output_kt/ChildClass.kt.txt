package innerclassinheritance

open class ParentOuter {
 var fieldInParentOuter: Int

 open fun funInParentOuter() {}
}

open class ParentInner {
 var fieldInParentInner: Int

 open fun funInParentInner() {}
}

open class ChildClass: innerclassinheritance.ParentOuter() {
 var fieldInOuter: Int

 open fun funInOuter() {}

 open fun testLocalClass() {
  TODO("expression.qualify needs rendering: ChildClass.this)").test()
 }
}

open class InnerClass: innerclassinheritance.ParentInner() {
 val `this`: innerclassinheritance.ChildClass?

 var fieldInInner: Int

 open fun funInInner() {}

 open fun testInnerClass(): Int {
  this.`this`.funInParentOuter()
  this.`this`.funInParentOuter()
  this.`this`.funInOuter()
  this.`this`.funInOuter()
  this.funInParentInner()
  this.funInParentInner()
  this.funInInner()
  this.funInInner()
  var a: Int = this.`this`.fieldInParentOuter
  a = this.`this`.fieldInParentOuter
  a = this.`this`.fieldInOuter
  a = this.`this`.fieldInOuter
  a = this.fieldInParentInner
  a = this.fieldInParentInner
  a = this.fieldInInner
  a = this.fieldInInner
  return a
 }
}

open class `1LocalClass`: innerclassinheritance.ChildClass() {
 val `this`: innerclassinheritance.ChildClass?

 internal var `object`: Any? = this

 open fun funInParentOuter() {}

 open fun test() {
  this.funInOuter()
  this.`this`.funInOuter()
  this.funInParentOuter()
  this.funInParentOuter()
  this.`this`.funInParentOuter()
 }
}
