;;; Code for simplebridgemethods.SimpleBridgeMethods

;;; CLASS  Superclass

(type $simplebridgemethods.Superclass (struct
))

;;; Superclass()
(func $<init><>:void@simplebridgemethods.Superclass
 (param $this (ref null $simplebridgemethods.Superclass))
 (result (ref null $simplebridgemethods.Superclass))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; void Superclass.m1(T t)
(func $m1<java.lang.Error>:void@simplebridgemethods.Superclass
 (param $this (ref null $java.lang.Object))
 (param $t (ref null $java.lang.Error))
 (block $return.label
  (block
  )
 )
)

;;; CLASS  Subclass

(type $simplebridgemethods.Subclass (struct
))

;;; Subclass()
(func $<init><>:void@simplebridgemethods.Subclass
 (param $this (ref null $simplebridgemethods.Subclass))
 (result (ref null $simplebridgemethods.Subclass))
 (block $return.label
  (block
   ;; Superclass.this.Superclass.<init>();
   
  )
 )
 (local.get $this)
)

;;; void Subclass.m1(AssertionError a)
(func $m1<java.lang.AssertionError>:void@simplebridgemethods.Subclass
 (param $this (ref null $java.lang.Object))
 (param $a (ref null $java.lang.AssertionError))
 (block $return.label
  (block
  )
 )
)

;;; CLASS  AnotherSubclass

(type $simplebridgemethods.AnotherSubclass (struct
))

;;; AnotherSubclass()
(func $<init><>:void@simplebridgemethods.AnotherSubclass
 (param $this (ref null $simplebridgemethods.AnotherSubclass))
 (result (ref null $simplebridgemethods.AnotherSubclass))
 (block $return.label
  (block
   ;; Superclass.this.Superclass.<init>();
   
  )
 )
 (local.get $this)
)

;;; INTERFACE  Callable

(type $simplebridgemethods.Callable (struct
))

;;; CLASS  Task

(type $simplebridgemethods.Task (struct
))

;;; Task()
(func $<init><>:void@simplebridgemethods.Task
 (param $this (ref null $simplebridgemethods.Task))
 (result (ref null $simplebridgemethods.Task))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; void Task.call(T t)
(func $call<java.lang.Object>:void@simplebridgemethods.Task
 (param $this (ref null $java.lang.Object))
 (param $t (ref null $java.lang.Object))
 (block $return.label
  (block
  )
 )
)

;;; CLASS  AnotherTask

(type $simplebridgemethods.AnotherTask (struct
))

;;; AnotherTask()
(func $<init><>:void@simplebridgemethods.AnotherTask
 (param $this (ref null $simplebridgemethods.AnotherTask))
 (result (ref null $simplebridgemethods.AnotherTask))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; void AnotherTask.call(Superclass<T> t)
(func $call<simplebridgemethods.Superclass>:void@simplebridgemethods.AnotherTask
 (param $this (ref null $java.lang.Object))
 (param $t (ref null $simplebridgemethods.Superclass))
 (block $return.label
  (block
  )
 )
)

;;; CLASS  SimpleBridgeMethods

(type $simplebridgemethods.SimpleBridgeMethods (struct
))

;;; SimpleBridgeMethods()
(func $<init><>:void@simplebridgemethods.SimpleBridgeMethods
 (param $this (ref null $simplebridgemethods.SimpleBridgeMethods))
 (result (ref null $simplebridgemethods.SimpleBridgeMethods))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

