package booleanoperations

open class BooleanOperations {
 open fun test() {
  var ls: Boolean = true
  val rs: Boolean = true
  var r: Boolean = true
  val t: Boolean = !!!true
  r = ls == rs
  r = ls != rs
  r = ls ^ rs
  r = ls & rs
  r = ls | rs
  r = ls && rs
  r = ls || rs
  r = ls = rs
  r ^= rs
  r &= rs
  r |= rs
  booleanoperations.BooleanOperations.acceptBoolean(ls == rs)
  booleanoperations.BooleanOperations.acceptBoolean(ls != rs)
  booleanoperations.BooleanOperations.acceptBoolean(ls ^ rs)
  booleanoperations.BooleanOperations.acceptBoolean(ls & rs)
  booleanoperations.BooleanOperations.acceptBoolean(ls | rs)
  booleanoperations.BooleanOperations.acceptBoolean(ls && rs)
  booleanoperations.BooleanOperations.acceptBoolean(ls || rs)
  booleanoperations.BooleanOperations.acceptBoolean(ls = rs)
  var br: Boolean?
  br = ls == rs as Boolean?
  br = ls != rs as Boolean?
  br = ls ^ rs as Boolean?
  br = ls & rs as Boolean?
  br = ls | rs as Boolean?
  br = ls && rs as Boolean?
  br = ls || rs as Boolean?
  br = ls = rs as Boolean?
  if (ls == rs) {
   r = true
  }
  if (ls != rs) {
   r = true
  }
  if (ls ^ rs) {
   r = true
  }
  if (ls & rs) {
   r = true
  }
  if (ls | rs) {
   r = true
  }
  if (ls && rs) {
   r = true
  }
  if (ls || rs) {
   r = true
  }
  var finalOuter: booleanoperations.BooleanOperations.`1Outer`? = TODO("expression.qualify needs rendering: BooleanOperations.this)")
  finalOuter.b |= true
  var outer: booleanoperations.BooleanOperations.`1Outer`? = TODO("expression.qualify needs rendering: BooleanOperations.this)")
  outer.b |= (outer = null) == null
 }

 companion object {
  @JvmStatic
  private fun acceptBoolean(b: Boolean) {}
 }
}

open class `1Outer` {
 val `this`: booleanoperations.BooleanOperations?

 internal var b: Boolean
}

open class Inner {
 val `this`: booleanoperations.BooleanOperations.`1Outer`?

 init {
  this.`this`.b |= true
 }
}
