package booleanoperations

import javaemul.lang.*

open class BooleanOperations {
 open fun test() {
  var ls: kotlin.Boolean = true
  val rs: kotlin.Boolean = true
  var r: kotlin.Boolean = true
  val t: kotlin.Boolean = !!!true
  r = ls === rs
  r = ls !== rs
  r = ls.xor(rs)
  r = ls.and(rs)
  r = ls.or(rs)
  r = ls && rs
  r = ls || rs
  r = kotlin.run {
   ls = rs
   ls
  }
  r = r.xor(rs)
  r = r.and(rs)
  r = r.or(rs)
  booleanoperations.BooleanOperations.acceptBoolean(ls === rs)
  booleanoperations.BooleanOperations.acceptBoolean(ls !== rs)
  booleanoperations.BooleanOperations.acceptBoolean(ls.xor(rs))
  booleanoperations.BooleanOperations.acceptBoolean(ls.and(rs))
  booleanoperations.BooleanOperations.acceptBoolean(ls.or(rs))
  booleanoperations.BooleanOperations.acceptBoolean(ls && rs)
  booleanoperations.BooleanOperations.acceptBoolean(ls || rs)
  booleanoperations.BooleanOperations.acceptBoolean(kotlin.run {
   ls = rs
   ls
  })
  var br: kotlin.Boolean?
  br = kotlin.Boolean.valueOf(ls === rs)
  br = kotlin.Boolean.valueOf(ls !== rs)
  br = kotlin.Boolean.valueOf(ls.xor(rs))
  br = kotlin.Boolean.valueOf(ls.and(rs))
  br = kotlin.Boolean.valueOf(ls.or(rs))
  br = kotlin.Boolean.valueOf(ls && rs)
  br = kotlin.Boolean.valueOf(ls || rs)
  br = kotlin.Boolean.valueOf(kotlin.run {
   ls = rs
   ls
  })
  if (ls === rs) {
   r = true
  }
  if (ls !== rs) {
   r = true
  }
  if (ls.xor(rs)) {
   r = true
  }
  if (ls.and(rs)) {
   r = true
  }
  if (ls.or(rs)) {
   r = true
  }
  if (ls && rs) {
   r = true
  }
  if (ls || rs) {
   r = true
  }
  open class `$1Outer` {
   @kotlin.jvm.JvmField var b: kotlin.Boolean = false

   open inner class Inner {
    init {
     this@`$1Outer`.b = this@`$1Outer`.b.or(true)
    }
   }
  }
  val finalOuter: `$1Outer`? = `$1Outer`()
  finalOuter!!.b = finalOuter!!.b.or(true)
  var outer: `$1Outer`? = `$1Outer`()
  outer!!.b = outer!!.b.or(kotlin.run {
   outer = null
   outer
  } === null)
 }

 companion object {
  @kotlin.jvm.JvmStatic
  fun acceptBoolean(b: kotlin.Boolean) {}
 }
}
