// Generated from "newinnerclasswithsameouter/NewInnerClassWithSameOuter.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress("REPEATED_BOUND", "UNNECESSARY_NOT_NULL_ASSERTION", "VARIABLE_WITH_REDUNDANT_INITIALIZER", "UNCHECKED_CAST", "PARAMETER_NAME_CHANGED_ON_OVERRIDE", "ALWAYS_NULL", "SENSELESS_COMPARISON", "UNUSED_PARAMETER")

package newinnerclasswithsameouter

import javaemul.lang.*
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("NewinnerclasswithsameouterNewInnerClassWithSameOuter", exact = true)
open class NewInnerClassWithSameOuter {
 @ObjCName("NewinnerclasswithsameouterNewInnerClassWithSameOuter_A", exact = true)
 open inner class A {
  @ObjCName("test")
  open fun test() {
   this@NewInnerClassWithSameOuter.B()
   this@NewInnerClassWithSameOuter.C()
  }
 }

 @ObjCName("NewinnerclasswithsameouterNewInnerClassWithSameOuter_B", exact = true)
 open inner class B {}

 open inner class C {}
}
