package newinnerclasswithsameouter

open class NewInnerClassWithSameOuter {
 constructor(): super()
}

open class `NewInnerClassWithSameOuter$A` {
 @JvmField val `this`: newinnerclasswithsameouter.NewInnerClassWithSameOuter?

 constructor(`$outer_this`: newinnerclasswithsameouter.NewInnerClassWithSameOuter?): super() {
  this.`this` = `$outer_this`
 }

 open fun test() {
  newinnerclasswithsameouter.`NewInnerClassWithSameOuter$B`(this.`this`)
  newinnerclasswithsameouter.`NewInnerClassWithSameOuter$C`(this.`this`)
 }
}

open class `NewInnerClassWithSameOuter$B` {
 @JvmField val `this`: newinnerclasswithsameouter.NewInnerClassWithSameOuter?

 constructor(`$outer_this`: newinnerclasswithsameouter.NewInnerClassWithSameOuter?): super() {
  this.`this` = `$outer_this`
 }
}

open class `NewInnerClassWithSameOuter$C` {
 @JvmField val `this`: newinnerclasswithsameouter.NewInnerClassWithSameOuter?

 internal constructor(`$outer_this`: newinnerclasswithsameouter.NewInnerClassWithSameOuter?): super() {
  this.`this` = `$outer_this`
 }
}
