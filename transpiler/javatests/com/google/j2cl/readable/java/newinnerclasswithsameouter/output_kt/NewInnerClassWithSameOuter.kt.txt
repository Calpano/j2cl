// Generated from "newinnerclasswithsameouter/NewInnerClassWithSameOuter.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package newinnerclasswithsameouter

import javaemul.lang.*
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("NewinnerclasswithsameouterNewInnerClassWithSameOuter", exact = true)
open class NewInnerClassWithSameOuter {
 @ObjCName("NewinnerclasswithsameouterNewInnerClassWithSameOuter_A", exact = true)
 open inner class A {
  @ObjCName("test")
  open fun test() {
   this@NewInnerClassWithSameOuter.B()
   this@NewInnerClassWithSameOuter.C()
  }
 }

 @ObjCName("NewinnerclasswithsameouterNewInnerClassWithSameOuter_B", exact = true)
 open inner class B {}

 open inner class C {}
}
