;;; Code for instancejsmethods.Main

;;; INTERFACE  MyInterface

(type $instancejsmethods.MyInterface (struct
))

;;; CLASS  SuperParent

(type $instancejsmethods.SuperParent (struct
))

;;; SuperParent()
(func $<init><>:void@instancejsmethods.SuperParent
 (param $this (ref null $instancejsmethods.SuperParent))
 (result (ref null $instancejsmethods.SuperParent))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; int SuperParent.fun(int a, int b)
(func $fun<int|int>:int@instancejsmethods.SuperParent
 (param $this (ref null $java.lang.Object))
 (param $a i32)
 (param $b i32)
 (result i32)
 (local $return.value i32)
 (block $return.label
  (block
   ;; return ((a + b) + 111);
   (local.set $return.value (i32.add (i32.add (local.get $a) (local.get $b)) (i32.const 111)))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; int SuperParent.bar(int a, int b)
(func $bar<int|int>:int@instancejsmethods.SuperParent
 (param $this (ref null $java.lang.Object))
 (param $a i32)
 (param $b i32)
 (result i32)
 (local $return.value i32)
 (block $return.label
  (block
   ;; return ((a * b) + 222);
   (local.set $return.value (i32.add (i32.mul (local.get $a) (local.get $b)) (i32.const 222)))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; CLASS  Parent

(type $instancejsmethods.Parent (struct
))

;;; Parent()
(func $<init><>:void@instancejsmethods.Parent
 (param $this (ref null $instancejsmethods.Parent))
 (result (ref null $instancejsmethods.Parent))
 (block $return.label
  (block
   ;; SuperParent.this.SuperParent.<init>();
   
  )
 )
 (local.get $this)
)

;;; int Parent.fun(int a, int b)
(func $fun<int|int>:int@instancejsmethods.Parent
 (param $this (ref null $java.lang.Object))
 (param $a i32)
 (param $b i32)
 (result i32)
 (local $return.value i32)
 (block $return.label
  (block
   ;; return (a + b);
   (local.set $return.value (i32.add (local.get $a) (local.get $b)))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; int Parent.bar(int a, int b)
(func $bar<int|int>:int@instancejsmethods.Parent
 (param $this (ref null $java.lang.Object))
 (param $a i32)
 (param $b i32)
 (result i32)
 (local $return.value i32)
 (block $return.label
  (block
   ;; return (a * b);
   (local.set $return.value (i32.mul (local.get $a) (local.get $b)))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; int Parent.foo(int a)
(func $foo<int>:int@instancejsmethods.Parent
 (param $this (ref null $java.lang.Object))
 (param $a i32)
 (result i32)
 (local $return.value i32)
 (block $return.label
  (block
   ;; return a;
   (local.set $return.value (local.get $a))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; CLASS  Child

(type $instancejsmethods.Child (struct
))

;;; Child()
(func $<init><>:void@instancejsmethods.Child
 (param $this (ref null $instancejsmethods.Child))
 (result (ref null $instancejsmethods.Child))
 (block $return.label
  (block
   ;; Parent.this.Parent.<init>();
   
  )
 )
 (local.get $this)
)

;;; int Child.fun(int a, int b)
(func $fun<int|int>:int@instancejsmethods.Child
 (param $this (ref null $java.lang.Object))
 (param $a i32)
 (param $b i32)
 (result i32)
 (local $return.value i32)
 (block $return.label
  (block
   ;; return ((a + b) + 1);
   (local.set $return.value (i32.add (i32.add (local.get $a) (local.get $b)) (i32.const 1)))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; int Child.bar(int a, int b)
(func $bar<int|int>:int@instancejsmethods.Child
 (param $this (ref null $java.lang.Object))
 (param $a i32)
 (param $b i32)
 (result i32)
 (local $return.value i32)
 (block $return.label
  (block
   ;; return ((a * b) + 1);
   (local.set $return.value (i32.add (i32.mul (local.get $a) (local.get $b)) (i32.const 1)))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; int Child.foo(int a)
(func $foo<int>:int@instancejsmethods.Child
 (param $this (ref null $java.lang.Object))
 (param $a i32)
 (result i32)
 (local $return.value i32)
 (block $return.label
  (block
   ;; return a;
   (local.set $return.value (local.get $a))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; int Child.intfFoo()
(func $intfFoo<>:int@instancejsmethods.Child
 (param $this (ref null $java.lang.Object))
 (result i32)
 (local $return.value i32)
 (block $return.label
  (block
   ;; return 1;
   (local.set $return.value (i32.const 1))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; CLASS  Main

(type $instancejsmethods.Main (struct
))

;;; Main()
(func $<init><>:void@instancejsmethods.Main
 (param $this (ref null $instancejsmethods.Main))
 (result (ref null $instancejsmethods.Main))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; void Main.testCallBySuperParent()
(func $testCallBySuperParent<>:void@instancejsmethods.Main
 (param $this (ref null $java.lang.Object))
 (local $sp (ref null $instancejsmethods.SuperParent))
 (local $p (ref null $instancejsmethods.SuperParent))
 (local $c (ref null $instancejsmethods.SuperParent))
 (local $pp (ref null $instancejsmethods.Parent))
 (local $cc (ref null $instancejsmethods.Parent))
 (local $intf (ref null $instancejsmethods.MyInterface))
 (block $return.label
  (block
   ;; SuperParent sp = new SuperParent.<init>();
   
   (local.set $sp (call $<init><>:void@instancejsmethods.SuperParent (struct.new_default_with_rtt $instancejsmethods.SuperParent (global.get $instancejsmethods.SuperParent.rtt)) ))
   ;; SuperParent p = new Parent.<init>();
   
   (local.set $p (call $<init><>:void@instancejsmethods.Parent (struct.new_default_with_rtt $instancejsmethods.Parent (global.get $instancejsmethods.Parent.rtt)) ))
   ;; SuperParent c = new Child.<init>();
   
   (local.set $c (call $<init><>:void@instancejsmethods.Child (struct.new_default_with_rtt $instancejsmethods.Child (global.get $instancejsmethods.Child.rtt)) ))
   ;; Parent pp = new Parent.<init>();
   
   (local.set $pp (call $<init><>:void@instancejsmethods.Parent (struct.new_default_with_rtt $instancejsmethods.Parent (global.get $instancejsmethods.Parent.rtt)) ))
   ;; Parent cc = new Child.<init>();
   
   (local.set $cc (call $<init><>:void@instancejsmethods.Child (struct.new_default_with_rtt $instancejsmethods.Child (global.get $instancejsmethods.Child.rtt)) ))
   ;; MyInterface intf = new Child.<init>();
   
   (local.set $intf (call $<init><>:void@instancejsmethods.Child (struct.new_default_with_rtt $instancejsmethods.Child (global.get $instancejsmethods.Child.rtt)) ))
   ;; sp.fun(12,35);
   (i32.const 0)
   drop
   ;; sp.bar(6,7);
   (i32.const 0)
   drop
   ;; p.fun(12,35);
   (i32.const 0)
   drop
   ;; p.bar(6,7);
   (i32.const 0)
   drop
   ;; c.fun(12,35);
   (i32.const 0)
   drop
   ;; c.bar(6,7);
   (i32.const 0)
   drop
   ;; pp.foo(1);
   (i32.const 0)
   drop
   ;; cc.foo(1);
   (i32.const 0)
   drop
   ;; intf.intfFoo();
   (i32.const 0)
   drop
  )
 )
)

;;; void Main.testCallByConcreteType()
(func $testCallByConcreteType<>:void@instancejsmethods.Main
 (local $sp (ref null $instancejsmethods.SuperParent))
 (local $p (ref null $instancejsmethods.Parent))
 (local $c (ref null $instancejsmethods.Child))
 (block $return.label
  (block
   ;; SuperParent sp = new SuperParent.<init>();
   
   (local.set $sp (call $<init><>:void@instancejsmethods.SuperParent (struct.new_default_with_rtt $instancejsmethods.SuperParent (global.get $instancejsmethods.SuperParent.rtt)) ))
   ;; Parent p = new Parent.<init>();
   
   (local.set $p (call $<init><>:void@instancejsmethods.Parent (struct.new_default_with_rtt $instancejsmethods.Parent (global.get $instancejsmethods.Parent.rtt)) ))
   ;; Child c = new Child.<init>();
   
   (local.set $c (call $<init><>:void@instancejsmethods.Child (struct.new_default_with_rtt $instancejsmethods.Child (global.get $instancejsmethods.Child.rtt)) ))
   ;; sp.fun(12,35);
   (i32.const 0)
   drop
   ;; sp.bar(6,7);
   (i32.const 0)
   drop
   ;; p.fun(12,35);
   (i32.const 0)
   drop
   ;; p.bar(6,7);
   (i32.const 0)
   drop
   ;; p.foo(1);
   (i32.const 0)
   drop
   ;; c.fun(12,35);
   (i32.const 0)
   drop
   ;; c.bar(6,7);
   (i32.const 0)
   drop
   ;; c.foo(1);
   (i32.const 0)
   drop
   ;; c.intfFoo();
   (i32.const 0)
   drop
  )
 )
)

