package implicitparenthesis

open class ImplicitParenthesis {
 open fun test() {
  implicitparenthesis.ImplicitParenthesis.examples()
  implicitparenthesis.ImplicitParenthesis.nonExamples()
 }

 companion object {
  @kotlin.jvm.JvmStatic
  internal fun examples() {
   var primitiveInt: Int
   var boxedInt: kotlin.Int?
   if (true) {
    primitiveInt = 5
    boxedInt = (java.lang.Integer(10) as kotlin.Int)
    primitiveInt = if (primitiveInt == 5) (java.lang.Integer(15) as kotlin.Int) else (java.lang.Integer(30) as kotlin.Int)
    assert(primitiveInt == 15)
   }
   if (true) {
    primitiveInt = 5
    boxedInt = (java.lang.Integer(10) as kotlin.Int)
    primitiveInt = run {
     boxedInt = boxedInt!! + primitiveInt
     boxedInt
    }!!
    assert(primitiveInt == 15)
   }
   if (true) {
    primitiveInt = 5
    boxedInt = (java.lang.Integer(10) as kotlin.Int)
    primitiveInt = run {
     boxedInt = primitiveInt
     boxedInt
    }!!
    assert(primitiveInt == 5)
   }
   if (true) {
    primitiveInt = 5
    boxedInt = (java.lang.Integer(10) as kotlin.Int)
    primitiveInt = run {
     val `$value`: kotlin.Int? = boxedInt
     boxedInt = boxedInt!! + 1
     `$value`
    }!!
    assert(primitiveInt == 10)
   }
   if (true) {
    primitiveInt = 5
    boxedInt = (java.lang.Integer(10) as kotlin.Int)
    primitiveInt = run {
     boxedInt = boxedInt!! + 1
     boxedInt
    }!!
    assert(primitiveInt == 11)
   }
  }

  @kotlin.jvm.JvmStatic
  internal fun nonExamples() {
   var primitiveInt: Int
   var boxedInt: kotlin.Int?
   var boxedBoolean: kotlin.Boolean?
   if (true) {
    primitiveInt = 5
    boxedInt = (java.lang.Integer(10) as kotlin.Int)
    primitiveInt = boxedInt!! - primitiveInt
    assert(primitiveInt == 5)
   }
   if (true) {
    primitiveInt = 5
    boxedInt = (java.lang.Integer(10) as kotlin.Int)
    boxedBoolean = true
    boxedBoolean = boxedInt!! == primitiveInt
    assert(boxedBoolean!! == false)
   }
  }

  @kotlin.jvm.JvmStatic
  internal fun parenthesisRemoval() {
   (java.lang.Integer(1 + 2) as kotlin.Int)
  }
 }
}
