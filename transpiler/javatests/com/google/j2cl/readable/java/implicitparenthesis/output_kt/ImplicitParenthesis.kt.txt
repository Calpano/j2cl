package implicitparenthesis

open class ImplicitParenthesis {
 fun test() {
  TODO("JavaScriptConstructorReference").examples()
  TODO("JavaScriptConstructorReference").nonExamples()
 }

 companion object {
  @JvmStatic
  fun examples() {
   var primitiveInt: Int
   var boxedInt: Int?
   {
    primitiveInt = 5
    boxedInt = Int(10)
    primitiveInt = if (primitiveInt == 5) Int(15) else Int(30)
    assert(primitiveInt == 15)
   }
   {
    primitiveInt = 5
    boxedInt = Int(10)
    primitiveInt = boxedInt += primitiveInt
    assert(primitiveInt == 15)
   }
   {
    primitiveInt = 5
    boxedInt = Int(10)
    primitiveInt = boxedInt = primitiveInt
    assert(primitiveInt == 5)
   }
   {
    primitiveInt = 5
    boxedInt = Int(10)
    primitiveInt = boxedInt++
    assert(primitiveInt == 10)
   }
   {
    primitiveInt = 5
    boxedInt = Int(10)
    primitiveInt = ++boxedInt
    assert(primitiveInt == 11)
   }
  }

  @JvmStatic
  fun nonExamples() {
   var primitiveInt: Int
   var boxedInt: Int?
   var boxedBoolean: Boolean?
   {
    primitiveInt = 5
    boxedInt = Int(10)
    primitiveInt = boxedInt - primitiveInt
    assert(primitiveInt == 5)
   }
   {
    primitiveInt = 5
    boxedInt = Int(10)
    boxedBoolean = true
    boxedBoolean = boxedInt == primitiveInt
    assert(boxedBoolean == false)
   }
  }

  @JvmStatic
  fun parenthesisRemoval() {
   Int(1 + 2)
  }
 }
}
