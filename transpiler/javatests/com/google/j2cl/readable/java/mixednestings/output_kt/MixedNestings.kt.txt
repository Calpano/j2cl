package mixednestings

fun interface MyInterface {
 fun `fun`(a: Int): Int
}

open class MixedNestings {
 constructor(): super()

 open fun mm() {}

 open fun test() {
  mixednestings.`MixedNestings$A`(this).a()
 }
}

open class `MixedNestings$A$1B$1$1`: mixednestings.MyInterface {
 @JvmField val `this`: mixednestings.`MixedNestings$A$1B$1`?

 internal constructor(`$outer_this`: mixednestings.`MixedNestings$A$1B$1`?): super() {
  this.`this` = `$outer_this`
 }

 open override fun `fun`(b: Int): Int {
  return b
 }
}

open class `MixedNestings$A$1B$1`: mixednestings.MyInterface {
 @JvmField val `this`: mixednestings.`MixedNestings$A$1B`?

 internal constructor(`$outer_this`: mixednestings.`MixedNestings$A$1B`?): super() {
  this.`this` = `$outer_this`
 }

 open override fun `fun`(a: Int): Int {
  val ii: mixednestings.MyInterface? = mixednestings.MyInterface (fun(n: Int): Int {
   this.`this`!!.`this`!!.`this`!!.mm()
   this.`this`!!.`this`!!.aa()
   this.`this`!!.bb()
   val iii: mixednestings.MyInterface? = mixednestings.MyInterface (fun(m: Int): Int {
    this.`this`!!.`this`!!.`this`!!.mm()
    this.`this`!!.`this`!!.aa()
    this.`this`!!.bb()
    return mixednestings.`MixedNestings$A$1B$1$1`(this).`fun`(100)
   })
   return iii!!.`fun`(200)
  })
  return ii!!.`fun`(300)
 }
}

open class `MixedNestings$A$1B` {
 @JvmField val `this`: mixednestings.`MixedNestings$A`?

 internal constructor(`$outer_this`: mixednestings.`MixedNestings$A`?): super() {
  this.`this` = `$outer_this`
 }

 open fun bb() {}

 open fun b(): Int {
  val i: mixednestings.MyInterface? = mixednestings.`MixedNestings$A$1B$1`(this)
  return i!!.`fun`(400)
 }
}

open class `MixedNestings$A` {
 @JvmField val `this`: mixednestings.MixedNestings?

 internal constructor(`$outer_this`: mixednestings.MixedNestings?): super() {
  this.`this` = `$outer_this`
 }

 open fun aa() {}

 open fun a() {
  if (true) {}
  mixednestings.`MixedNestings$A$1B`(this).b()
 }
}
