package mixednestings

interface MyInterface {
 fun fun(a: Int): Int
}

open class MixedNestings {
 fun mm() {}

 fun test() {
  TODO("expression.qualify needs rendering: MixedNestings.this)").a()
 }
}

open class A {
 fun aa() {}

 fun a() {
  TODO("expression.qualify needs rendering: A.this)").b()
 }
}

open class `1B` {
 fun bb() {}

 fun b(): Int {
  val i: mixednestings.MyInterface? = TODO("expression.qualify needs rendering: \$1B.this)")
  return i.`fun`(400)
 }
}

open class `1`: mixednestings.MyInterface {
 fun <init>(): mixednestings.MixedNestings.A.`1B`.`1` {
  super()
 }

 fun fun(a: Int): Int {
  val ii: mixednestings.MyInterface? = {n: Int -> {
    this.`this`.`this`.`this`.mm()
    this.`this`.`this`.aa()
    this.`this`.bb()
    val iii: mixednestings.MyInterface? = {m: Int -> {
      this.`this`.`this`.`this`.mm()
      this.`this`.`this`.aa()
      this.`this`.bb()
      return TODO("expression.qualify needs rendering: \$1.this)").`fun`(100)
     }
    }
    return iii.`fun`(200)
   }
  }
  return ii.`fun`(300)
 }
}

open class `1`: mixednestings.MyInterface {
 fun <init>(): mixednestings.MixedNestings.A.`1B`.`1`.`1` {
  super()
 }

 fun fun(b: Int): Int {
  return b
 }
}
