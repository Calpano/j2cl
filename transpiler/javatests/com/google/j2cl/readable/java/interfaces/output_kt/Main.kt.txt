// Generated from "interfaces/Main.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress("REPEATED_BOUND", "UNNECESSARY_NOT_NULL_ASSERTION", "VARIABLE_WITH_REDUNDANT_INITIALIZER", "UNCHECKED_CAST", "PARAMETER_NAME_CHANGED_ON_OVERRIDE", "ALWAYS_NULL", "SENSELESS_COMPARISON", "UNUSED_PARAMETER")

package interfaces

import javaemul.lang.*
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.jvm.JvmStatic
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName
import kotlin.run

@ObjCName("InterfacesMain", exact = true)
open class Main {
 @HiddenFromObjC
 open fun testInterfaceMembers_pp_interfaces() {
  val i: Main.Interface<String?>? = Implementor()
  i!!.interfaceMethod()
  i!!.defaultMethod(null)
  Main.Interface.staticInterfaceMethod()
  val x: Int = run {
   Implementor()
   Main.Interface.a
  } + Main.Interface.b
 }

 fun interface Interface<T> {
  @ObjCName("interfaceMethod")
  fun interfaceMethod()

  @ObjCName("defaultMethod")
  fun defaultMethod(
   @ObjCName("withId") t: T
  ) {
   this.privateMethod_private_interfaces_Main_Interface(t)
  }

  @HiddenFromObjC
  fun privateMethod_private_interfaces_Main_Interface(t: T) {}

  companion object {
   const val a: Int = 1

   const val b: Int = 2

   @JvmStatic
   @ObjCName("staticInterfaceMethod")
   fun staticInterfaceMethod() {}
  }
 }

 fun interface SubInterface: Main.Interface<String?> {
  override fun defaultMethod(s: String?) {
   super<Main.Interface>.defaultMethod(s)
  }
 }

 open inner class Implementor: Main.SubInterface, Main.Interface<String?> {
  open override fun interfaceMethod() {}
 }

 abstract inner class AbstractImplementor: Main.SubInterface {}
}
