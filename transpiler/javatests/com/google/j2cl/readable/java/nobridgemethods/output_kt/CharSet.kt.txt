package nobridgemethods

interface Entry<K> {}

abstract class Map<K> {
 internal constructor(): super()

 abstract open fun getCeilingEntry(key: K?): nobridgemethods.Entry<K>?
}

open class TreeMap<K>: nobridgemethods.Map<K> {
 internal constructor(): super()

 open override fun getCeilingEntry(key: K?): nobridgemethods.`TreeMap$InnerEntry`<K>? {
  return nobridgemethods.`TreeMap$InnerEntry`<K>()
 }
}

open class `TreeMap$InnerEntry`<K>: nobridgemethods.Entry<K> {
 internal constructor(): super()
}

open class CharSet {
 constructor(): super()

 companion object {
  @JvmStatic
  fun main(vararg args: String?) {
   val treeMap: nobridgemethods.TreeMap<String?>? = nobridgemethods.`CharSet$1`()
  }
 }
}

open class `CharSet$1`: nobridgemethods.TreeMap<String?> {
 internal constructor(): super()
}
