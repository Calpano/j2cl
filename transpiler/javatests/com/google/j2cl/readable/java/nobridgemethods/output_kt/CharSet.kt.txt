package nobridgemethods

interface Entry {}

abstract class Map {
 abstract open fun getCeilingEntry(key: K): nobridgemethods.Entry<K>?
}

open class TreeMap: nobridgemethods.Map<K>() {
 open fun getCeilingEntry(key: K): nobridgemethods.TreeMap.InnerEntry<K>? {
  return nobridgemethods.TreeMap.InnerEntry<K>()
 }
}

open class InnerEntry: nobridgemethods.Entry<K> {}

open class CharSet {
 companion object {
  @JvmStatic
  fun main(vararg args: String?) {
   val treeMap: nobridgemethods.TreeMap<String?>? = nobridgemethods.CharSet.`1`()
  }
 }
}

open class `1`: nobridgemethods.TreeMap<String?> {
 internal constructor() {
  super()
 }
}
