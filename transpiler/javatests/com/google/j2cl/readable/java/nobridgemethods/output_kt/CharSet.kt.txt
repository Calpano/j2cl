package nobridgemethods

interface Entry {}

abstract class Map {
 fun getCeilingEntry(key: K): nobridgemethods.Entry<K>?
}

open class TreeMap: nobridgemethods.Map<K> {
 fun getCeilingEntry(key: K): nobridgemethods.TreeMap.InnerEntry<K>? {
  return nobridgemethods.TreeMap.InnerEntry<K>()
 }
}

open class InnerEntry: nobridgemethods.Entry<K> {}

open class CharSet {
 companion object {
  @JvmStatic
  fun main(args: Array<String?>?) {
   val treeMap: nobridgemethods.TreeMap<String?>? = nobridgemethods.CharSet.1()
  }
 }
}

open class $1: nobridgemethods.TreeMap<String?> {
 fun <init>(): nobridgemethods.CharSet.1 {
  super()
 }
}
