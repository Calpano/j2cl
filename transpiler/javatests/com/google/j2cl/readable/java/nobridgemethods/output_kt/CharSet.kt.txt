package nobridgemethods

interface Entry<K> {}

abstract class Map<K> {
 abstract open fun getCeilingEntry(key: K?): nobridgemethods.Entry<K>?
}

open class TreeMap<K>: nobridgemethods.Map<K>() {
 open override fun getCeilingEntry(key: K?): nobridgemethods.TreeMap.InnerEntry<K>? {
  return nobridgemethods.TreeMap.InnerEntry<K>()
 }

 open class InnerEntry<K>: nobridgemethods.Entry<K> {}
}

open class CharSet {
 companion object {
  @kotlin.jvm.JvmStatic
  fun main(vararg args: kotlin.String?) {
   val treeMap: nobridgemethods.TreeMap<kotlin.String?>? = object : nobridgemethods.TreeMap<kotlin.String?>() {}
  }
 }
}
