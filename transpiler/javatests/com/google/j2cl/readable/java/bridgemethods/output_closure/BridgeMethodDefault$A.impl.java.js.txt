goog.module('bridgemethods.BridgeMethodDefault.A$impl');

const II = goog.require('bridgemethods.BridgeMethodDefault.II$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @implements {II}
 */
class A extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!A} */
 static $create__() {
  A.$clinit();
  let $instance = new A();
  $instance.$ctor__bridgemethods_BridgeMethodDefault_A__();
  return $instance;
 }
 /** @nodts */
 $ctor__bridgemethods_BridgeMethodDefault_A__() {
  this.$ctor__java_lang_Object__();
 }
 //Bridge method.
 /** @override @nodts */
 m_m__java_lang_Object(/** ?string */ arg0) {
  this.m_m__java_lang_String(/**@type {?string}*/ ($Casts.$to(arg0, j_l_String)));
 }
 //Default method forwarding stub.
 /** @override @nodts */
 m_m__java_lang_String(/** ?string */ arg0) {
  II.m_m__$default__bridgemethods_BridgeMethodDefault_II__java_lang_String(this, arg0);
 }
 /** @nodts */
 static $clinit() {
  A.$clinit = () =>{};
  A.$loadModules();
  j_l_Object.$clinit();
  II.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof A;
 }
 
 /** @nodts */
 static $loadModules() {
  j_l_String = goog.module.get('java.lang.String$impl');
  $Casts = goog.module.get('vmbootstrap.Casts$impl');
 }
}
II.$markImplementor(A);
$Util.$setClassMetadata(A, 'bridgemethods.BridgeMethodDefault$A');

exports = A;

//# sourceMappingURL=BridgeMethodDefault$A.js.map
