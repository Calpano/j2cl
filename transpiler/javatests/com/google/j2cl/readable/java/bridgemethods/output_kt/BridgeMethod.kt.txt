// Generated from "bridgemethods/BridgeMethod.java"
@file:OptIn(ExperimentalObjCName::class)

package bridgemethods

import javaemul.lang.*
import bridgemethods.AccidentalOverrideBridge
import bridgemethods.ClassWithParameterizedGet
import bridgemethods.Getter
import bridgemethods.LeafChild
import bridgemethods.ParameterizedParent
import bridgemethods.Parent
import bridgemethods.ReparametrerizedChild
import bridgemethods.SomeInterface
import bridgemethods.SomeOtherFooInterface
import bridgemethods.SuperDualUnrelatedAccidentalBridges
import bridgemethods.SuperParent
import bridgemethods.TestCase10036
import bridgemethods.TestCase102
import kotlin.AssertionError
import kotlin.Comparable
import kotlin.Double
import kotlin.Error
import kotlin.Number
import kotlin.OptIn
import kotlin.String
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("BridgemethodsSomeInterface", exact = true)
interface SomeInterface<T, S> {
 fun foo(
  @ObjCName("withId", exact = false) t: T,
  @ObjCName("withId", exact = false) s: S
 )

 fun foo(
  @ObjCName("withId", exact = false) t: T,
  @ObjCName("withNSNumber", exact = false) n: Number?
 )
}

@ObjCName("BridgemethodsSuperParent", exact = true)
open class SuperParent<T, S> {
 open fun foo(
  @ObjCName("withId", exact = false) t: T,
  @ObjCName("withId", exact = false) s: S
 ) {}
}

@ObjCName("BridgemethodsParent", exact = true)
open class Parent<T: Error?>: SuperParent<T, Number?>() {
 open override fun foo(t: T, s: Number?) {}

 open fun <T_1: Number?> bar(
  @ObjCName("withNSNumber", exact = false) t: T_1
 ) {}

 open fun <T_1> `fun`(
  @ObjCName("withId", exact = false) t: T_1
 ) {}
}

@ObjCName("BridgemethodsBridgeMethod", exact = true)
open class BridgeMethod: SomeInterface<AssertionError?, Number?>, Parent<AssertionError?>() {
 open override fun foo(a: AssertionError?, n: Number?) {}

 open override fun bar(t: Number?) {}

 open fun `fun`(
  @ObjCName("withNSNumber", exact = false) t: Number?
 ) {}
}

@ObjCName("BridgemethodsSomeOtherFooInterface", exact = true)
fun interface SomeOtherFooInterface<T> {
 fun foo(
  @ObjCName("withId", exact = false) t: T,
  @ObjCName("withJavaLangDouble", exact = false) s: Double?
 )
}

@ObjCName("BridgemethodsDualUnrelatedBridges", exact = true)
open class DualUnrelatedBridges: SomeInterface<String?, Double?>, SomeOtherFooInterface<String?> {
 open override fun foo(s: String?, n: Double?) {}

 open override fun foo(s: String?, n: Number?) {}
}

@ObjCName("BridgemethodsSuperDualUnrelatedAccidentalBridges", exact = true)
open class SuperDualUnrelatedAccidentalBridges {
 open fun foo(
  @ObjCName("withNSString", exact = false) s: String?,
  @ObjCName("withJavaLangDouble", exact = false) n: Double?
 ) {}

 open fun foo(
  @ObjCName("withNSString", exact = false) s: String?,
  @ObjCName("withNSNumber", exact = false) n: Number?
 ) {}
}

@ObjCName("BridgemethodsDualUnrelatedAccidentalBridges", exact = true)
open class DualUnrelatedAccidentalBridges: SomeInterface<String?, Double?>, SomeOtherFooInterface<String?>, SuperDualUnrelatedAccidentalBridges() {}

@ObjCName("BridgemethodsGetter", exact = true)
fun interface Getter {
 fun get(
  @ObjCName("withNSString", exact = false) s: String?
 ): String?
}

@ObjCName("BridgemethodsClassWithParameterizedGet", exact = true)
open class ClassWithParameterizedGet<T> {
 open fun get(
  @ObjCName("withId", exact = false) t: T
 ): T {
  return null as T
 }
}

@ObjCName("BridgemethodsAccidentalOverrideBridge", exact = true)
open class AccidentalOverrideBridge: Getter, ClassWithParameterizedGet<String?>() {
 open fun test() {
  val g: Getter? = AccidentalOverrideBridge()
  g!!.get("")
 }
}

@ObjCName("BridgemethodsTestCase10036", exact = true)
open class TestCase10036 {
 @ObjCName("BridgemethodsTestCase10036_BI3", exact = true)
 interface BI3 {
  fun get(
   @ObjCName("withNSString", exact = false) value: String?
  ): String? {
   return "BI3 get String"
  }
 }

 @ObjCName("BridgemethodsTestCase10036_BI2", exact = true)
 fun interface BI2 {
  fun get(
   @ObjCName("withNSString", exact = false) value: String?
  ): String?
 }

 @ObjCName("BridgemethodsTestCase10036_BI1", exact = true)
 fun interface BI1: TestCase10036.BI3 {
  override fun get(value: String?): String?
 }

 @ObjCName("BridgemethodsTestCase10036_B", exact = true)
 abstract class B<B1: Comparable<*>?>: TestCase10036.BI1, TestCase10036.BI2 {
  abstract fun get(
   @ObjCName("withJavaLangComparable", exact = false) value: B1
  ): String?
 }
}

@ObjCName("BridgemethodsTestCase102", exact = true)
open class TestCase102 {
 @ObjCName("BridgemethodsTestCase102_BI2", exact = true)
 fun interface BI2 {
  fun set(
   @ObjCName("withNSString", exact = false) value: String?
  )
 }

 @ObjCName("BridgemethodsTestCase102_BI1", exact = true)
 fun interface BI1 {
  fun set(
   @ObjCName("withNSString", exact = false) value: String?
  )
 }

 @ObjCName("BridgemethodsTestCase102_B", exact = true)
 abstract class B<B1>: TestCase102.BI1, TestCase102.BI2 {
  abstract fun set(
   @ObjCName("withId", exact = false) value: B1
  )
 }

 @ObjCName("BridgemethodsTestCase102_C", exact = true)
 open inner class C<B1>: TestCase102.B<B1>() {
  open override fun set(value: String?) {}

  open override fun set(value: B1) {}
 }
}

@ObjCName("BridgemethodsParameterizedParent", exact = true)
open class ParameterizedParent<T: ParameterizedParent<T>?> {
 open fun <Q: T> m(
  @ObjCName("withBridgemethodsParameterizedParent", exact = false) t: Q
 ): Q {
  return null as Q
 }
}

@ObjCName("BridgemethodsReparametrerizedChild", exact = true)
open class ReparametrerizedChild<E: ReparametrerizedChild<E>?>: ParameterizedParent<E>() {
 open fun <S: E> m(
  @ObjCName("withBridgemethodsReparametrerizedChild", exact = false) t: S
 ): S {
  return null as S
 }
}

@ObjCName("BridgemethodsLeafChild", exact = true)
open class LeafChild: ReparametrerizedChild<LeafChild?>() {}
