package bridgemethods

interface SomeInterface<T, S> {
 fun foo(t: T?, s: S?)

 fun foo(t: T?, n: Number?)
}

open class SuperParent<T, S> {
 open fun foo(t: T?, s: S?) {}
}

open class Parent<T: Error?>: bridgemethods.SuperParent<T, Number?>() {
 open fun foo(t: T?, s: Number?) {}

 open fun <T: Number?> bar(t: T?) {}

 open fun <T> `fun`(t: T?) {}
}

open class BridgeMethod: bridgemethods.SomeInterface<java.lang.AssertionError?, Number?>, bridgemethods.Parent<java.lang.AssertionError?>() {
 open fun foo(a: java.lang.AssertionError?, n: Number?) {}

 open fun bar(t: Number?) {}

 open fun `fun`(t: Number?) {}
}

interface SomeOtherFooInterface<T> {
 fun foo(t: T?, s: Double?)
}

open class DualUnrelatedBridges: bridgemethods.SomeInterface<String?, Double?>, bridgemethods.SomeOtherFooInterface<String?> {
 open fun foo(s: String?, n: Double?) {}

 open fun foo(s: String?, n: Number?) {}
}

open class SuperDualUnrelatedAccidentalBridges {
 open fun foo(s: String?, n: Double?) {}

 open fun foo(s: String?, n: Number?) {}
}

open class DualUnrelatedAccidentalBridges: bridgemethods.SomeInterface<String?, Double?>, bridgemethods.SomeOtherFooInterface<String?>, bridgemethods.SuperDualUnrelatedAccidentalBridges() {}

interface Getter {
 fun get(s: String?): String?
}

open class ClassWithParameterizedGet<T> {
 open fun get(t: T?): T? {
  return null
 }
}

open class AccidentalOverrideBridge: bridgemethods.Getter, bridgemethods.ClassWithParameterizedGet<String?>() {
 open fun test() {
  val g: bridgemethods.Getter? = bridgemethods.AccidentalOverrideBridge()
  g!!.get("")
 }
}

open class TestCase10036 {}

interface BI3 {
 fun get(value: String?): String? {
  return "BI3 get String"
 }
}

interface BI2 {
 fun get(value: String?): String?
}

interface BI1: bridgemethods.TestCase10036.BI3 {
 fun get(value: String?): String?
}

abstract class B<B1: Comparable?>: bridgemethods.TestCase10036.BI1, bridgemethods.TestCase10036.BI2 {
 abstract open fun get(value: B1?): String?
}

open class TestCase102 {}

interface BI2 {
 fun set(value: String?)
}

interface BI1 {
 fun set(value: String?)
}

abstract class B<B1>: bridgemethods.TestCase102.BI1, bridgemethods.TestCase102.BI2 {
 abstract open fun set(value: B1?)
}

open class C<B1>: bridgemethods.TestCase102.B<B1>() {
 @JvmField val `this`: bridgemethods.TestCase102?

 open fun set(value: String?) {}

 open fun set(value: B1?) {}
}

open class ParameterizedParent<T: bridgemethods.ParameterizedParent<T>?> {
 internal open fun <Q: T> m(t: Q?): Q? {
  return null
 }
}

open class ReparametrerizedChild<E: bridgemethods.ReparametrerizedChild<E>?>: bridgemethods.ParameterizedParent<E>() {
 internal open fun <S: E> m(t: S?): S? {
  return null
 }
}

open class LeafChild: bridgemethods.ReparametrerizedChild<bridgemethods.LeafChild?>() {}
