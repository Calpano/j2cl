package bridgemethods

import javaemul.lang.*

fun interface I<T, S> {
 fun `fun`(s: S?): T?
}

open class A<T, S> {
 open fun `fun`(s: S?): T? {
  return null
 }

 open fun get(): T? {
  return null
 }
}

open class B: bridgemethods.I<kotlin.Int?, kotlin.String?>, bridgemethods.A<kotlin.Number?, kotlin.String?>() {
 open override fun `fun`(s: kotlin.String?): kotlin.Int? {
  return (java.lang.Integer(1) as kotlin.Int)
 }
}

interface SpecializedInterface {
 fun `fun`(s: kotlin.String?): kotlin.String?

 fun get(): kotlin.String?
}

open class AccidentalOverride: bridgemethods.SpecializedInterface, bridgemethods.A<kotlin.String?, kotlin.String?>() {}
