// Generated from "packageprivatemethods/package1/Child.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)

package packageprivatemethods.package1

import javaemul.lang.*
import kotlin.Int
import kotlin.OptIn
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName
import packageprivatemethods.package1.Interface
import packageprivatemethods.package1.Parent

@ObjCName("PackageprivatemethodsPackage1Child", exact = true)
open class Child: Parent(), Interface {
 open fun overrideInParentExposedInChild(
  @ObjCName("withInt") a: Int
 ): Int {
  return a + 1
 }

 open fun exposedInChild(
  @ObjCName("withInt") a: Int,
  @ObjCName("withInt") b: Int
 ): Int {
  return a + b + 1
 }

 open override fun exposedInChildWithInterface(a: Int, b: Int): Int {
  return a + b + 1
 }

 open override fun exposedAbstractInParent(a: Int, b: Int, c: Int): Int {
  return a + b + c + 2
 }

 @HiddenFromObjC
 open override fun overrideInParentExposedInChild_pp_packageprivatemethods_package1(arg0: Int): Int {
  return this.overrideInParentExposedInChild(arg0)
 }

 @HiddenFromObjC
 open override fun exposedInChild_pp_packageprivatemethods_package1(arg0: Int, arg1: Int): Int {
  return this.exposedInChild(arg0, arg1)
 }

 @HiddenFromObjC
 open override fun exposedInChildWithInterface_pp_packageprivatemethods_package1(arg0: Int, arg1: Int): Int {
  return this.exposedInChildWithInterface(arg0, arg1)
 }
}
