// Generated from "packageprivatemethods/package1/Parent.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress("REPEATED_BOUND", "UNNECESSARY_NOT_NULL_ASSERTION", "VARIABLE_WITH_REDUNDANT_INITIALIZER", "UNCHECKED_CAST", "PARAMETER_NAME_CHANGED_ON_OVERRIDE", "ALWAYS_NULL", "SENSELESS_COMPARISON", "UNUSED_PARAMETER")

package packageprivatemethods.package1

import javaemul.lang.*
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName
import packageprivatemethods.package1.SuperParent

@ObjCName("PackageprivatemethodsPackage1Parent", exact = true)
abstract class Parent: SuperParent() {
 @HiddenFromObjC
 open override fun overrideInParentExposedInChild_pp_packageprivatemethods_package1(a: Int): Int {
  return a
 }

 @ObjCName("exposedAbstractInParent")
 abstract fun exposedAbstractInParent(
  @ObjCName("withInt") a: Int,
  @ObjCName("withInt") b: Int,
  @ObjCName("withInt") c: Int
 ): Int

 @HiddenFromObjC
 open override fun exposedAbstractInParent_pp_packageprivatemethods_package1(arg0: Int, arg1: Int, arg2: Int): Int {
  return this.exposedAbstractInParent(arg0, arg1, arg2)
 }
}
