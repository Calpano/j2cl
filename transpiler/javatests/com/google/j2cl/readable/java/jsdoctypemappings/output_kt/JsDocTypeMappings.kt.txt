package jsdoctypemappings

open class JsDocTypeMappings {
 constructor(): super()

 internal open fun returnComparatorWildcard(): java.util.Comparator<*>? {
  return null
 }

 internal open fun returnComparable(): java.lang.Comparable<*>? {
  return null
 }

 internal open fun returnJavaLangString(): kotlin.String? {
  return null
 }

 internal open fun returnJavaLangObject(): kotlin.Any? {
  return null
 }

 internal open fun returnJavaLangByte(): kotlin.Byte? {
  return null
 }

 internal open fun returnJavaLangShort(): kotlin.Short? {
  return null
 }

 internal open fun returnJavaLangInteger(): kotlin.Int? {
  return null
 }

 internal open fun returnJavaLangLong(): kotlin.Long? {
  return null
 }

 internal open fun returnJavaLangFloat(): kotlin.Float? {
  return null
 }

 internal open fun returnJavaLangDouble(): kotlin.Double? {
  return null
 }

 internal open fun returnJavaLangCharacter(): kotlin.Char? {
  return null
 }

 internal open fun returnJavaLangBoolean(): kotlin.Boolean? {
  return null
 }

 internal open fun returnByte(): Byte {
  return 0
 }

 internal open fun returnShort(): Short {
  return 0
 }

 internal open fun returnInt(): Int {
  return 0
 }

 internal open fun returnLong(): Long {
  return 0L
 }

 internal open fun returnFloat(): Float {
  return 0.0f
 }

 internal open fun returnDouble(): Double {
  return 0.0
 }

 internal open fun returnChar(): Char {
  return 0.toChar()
 }

 internal open fun returnBoolean(): Boolean {
  return false
 }

 internal open fun returnVoid() {}

 internal open fun returnNativeFunction(): jsdoctypemappings.`JsDocTypeMappings$NativeFunction`? {
  return null
 }

 internal open fun returnNativeType(): jsdoctypemappings.`JsDocTypeMappings$NativeType`? {
  return null
 }

 internal open fun returnExportedType(): jsdoctypemappings.`JsDocTypeMappings$ExportedType`? {
  return null
 }

 internal open fun <MethodTypeParameter> returnMethodTypeParameter(): MethodTypeParameter? {
  return null
 }

 internal open fun returnNativeNumber(): jsdoctypemappings.`JsDocTypeMappings$NativeNumber`? {
  return null
 }

 internal open fun returnNativeBoolean(): jsdoctypemappings.`JsDocTypeMappings$NativeBoolean`? {
  return null
 }

 internal open fun returnNativeString(): jsdoctypemappings.`JsDocTypeMappings$NativeString`? {
  return null
 }

 internal open fun returnNativeNull(): jsdoctypemappings.`JsDocTypeMappings$NativeNull`? {
  return null
 }

 internal open fun returnNativeUndefined(): jsdoctypemappings.`JsDocTypeMappings$NativeUndefined`? {
  return null
 }

 internal open fun returnNativeVoid(): jsdoctypemappings.`JsDocTypeMappings$NativeVoid`? {
  return null
 }

 internal open fun returnStar(): jsdoctypemappings.`JsDocTypeMappings$NativeStar`? {
  return null
 }

 internal open fun returnNativeWildcard(): jsdoctypemappings.`JsDocTypeMappings$NativeWildcard`? {
  return null
 }
}

fun interface `JsDocTypeMappings$NativeFunction` {
 fun f()
}

open class `JsDocTypeMappings$NativeType` {
 internal constructor(): super()
}

open class `JsDocTypeMappings$ExportedType` {
 @kotlin.jvm.JvmField val `this`: jsdoctypemappings.JsDocTypeMappings?

 internal constructor(`$outer_this`: jsdoctypemappings.JsDocTypeMappings?): super() {
  this.`this` = `$outer_this`
 }
}

interface `JsDocTypeMappings$NativeNumber` {}

interface `JsDocTypeMappings$NativeBoolean` {}

interface `JsDocTypeMappings$NativeString` {}

interface `JsDocTypeMappings$NativeNull` {}

interface `JsDocTypeMappings$NativeUndefined` {}

interface `JsDocTypeMappings$NativeVoid` {}

interface `JsDocTypeMappings$NativeStar` {}

interface `JsDocTypeMappings$NativeWildcard` {}
