// Generated from "jsdoctypemappings/JsDocTypeMappings.java"
@file:OptIn(ExperimentalObjCName::class)

package jsdoctypemappings

import javaemul.lang.*
import jsdoctypemappings.JsDocTypeMappings
import kotlin.Any
import kotlin.Boolean
import kotlin.Byte
import kotlin.Char
import kotlin.Comparable
import kotlin.Comparator
import kotlin.Double
import kotlin.Float
import kotlin.Int
import kotlin.Long
import kotlin.OptIn
import kotlin.Short
import kotlin.String
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("JsdoctypemappingsJsDocTypeMappings", exact = true)
open class JsDocTypeMappings {
 open fun returnComparatorWildcard(): Comparator<*>? {
  return null
 }

 open fun returnComparable(): Comparable<Any>? {
  return null as Comparable<Any>?
 }

 open fun returnJavaLangString(): String? {
  return null
 }

 open fun returnJavaLangObject(): Any? {
  return null
 }

 open fun returnJavaLangByte(): Byte? {
  return null
 }

 open fun returnJavaLangShort(): Short? {
  return null
 }

 open fun returnJavaLangInteger(): Int? {
  return null
 }

 open fun returnJavaLangLong(): Long? {
  return null
 }

 open fun returnJavaLangFloat(): Float? {
  return null
 }

 open fun returnJavaLangDouble(): Double? {
  return null
 }

 open fun returnJavaLangCharacter(): Char? {
  return null
 }

 open fun returnJavaLangBoolean(): Boolean? {
  return null
 }

 open fun returnByte(): Byte {
  return (0).toByte()
 }

 open fun returnShort(): Short {
  return (0).toShort()
 }

 open fun returnInt(): Int {
  return 0
 }

 open fun returnLong(): Long {
  return 0L
 }

 open fun returnFloat(): Float {
  return 0.0f
 }

 open fun returnDouble(): Double {
  return 0.0
 }

 open fun returnChar(): Char {
  return '\u0000'
 }

 open fun returnBoolean(): Boolean {
  return false
 }

 open fun returnVoid() {}

 open fun returnNativeFunction(): JsDocTypeMappings.NativeFunction? {
  return null
 }

 open fun returnNativeType(): JsDocTypeMappings.NativeType? {
  return null
 }

 open fun returnExportedType(): JsDocTypeMappings.ExportedType? {
  return null
 }

 open fun <MethodTypeParameter> returnMethodTypeParameter(): MethodTypeParameter {
  return null as MethodTypeParameter
 }

 open fun returnNativeNumber(): JsDocTypeMappings.NativeNumber? {
  return null
 }

 open fun returnNativeBoolean(): JsDocTypeMappings.NativeBoolean? {
  return null
 }

 open fun returnNativeString(): JsDocTypeMappings.NativeString? {
  return null
 }

 open fun returnNativeNull(): JsDocTypeMappings.NativeNull? {
  return null
 }

 open fun returnNativeUndefined(): JsDocTypeMappings.NativeUndefined? {
  return null
 }

 open fun returnNativeVoid(): JsDocTypeMappings.NativeVoid? {
  return null
 }

 open fun returnStar(): JsDocTypeMappings.NativeStar? {
  return null
 }

 open fun returnNativeWildcard(): JsDocTypeMappings.NativeWildcard? {
  return null
 }

 @ObjCName("JsdoctypemappingsJsDocTypeMappings_NativeFunction", exact = true)
 fun interface NativeFunction {
  fun f()
 }

 @ObjCName("JsdoctypemappingsJsDocTypeMappings_NativeType", exact = true)
 open class NativeType {}

 @ObjCName("JsdoctypemappingsJsDocTypeMappings_ExportedType", exact = true)
 open inner class ExportedType {}

 @ObjCName("JsdoctypemappingsJsDocTypeMappings_NativeNumber", exact = true)
 interface NativeNumber {}

 @ObjCName("JsdoctypemappingsJsDocTypeMappings_NativeBoolean", exact = true)
 interface NativeBoolean {}

 @ObjCName("JsdoctypemappingsJsDocTypeMappings_NativeString", exact = true)
 interface NativeString {}

 @ObjCName("JsdoctypemappingsJsDocTypeMappings_NativeNull", exact = true)
 interface NativeNull {}

 @ObjCName("JsdoctypemappingsJsDocTypeMappings_NativeUndefined", exact = true)
 interface NativeUndefined {}

 @ObjCName("JsdoctypemappingsJsDocTypeMappings_NativeVoid", exact = true)
 interface NativeVoid {}

 @ObjCName("JsdoctypemappingsJsDocTypeMappings_NativeStar", exact = true)
 interface NativeStar {}

 @ObjCName("JsdoctypemappingsJsDocTypeMappings_NativeWildcard", exact = true)
 interface NativeWildcard {}
}
