package rawtype

open class RawType {
 @kotlin.jvm.JvmField internal var c: kotlin.Comparable<*>? = null

 internal open fun test() {
  val unbound: rawtype.RawType.Unbound<*>? = rawtype.RawType.Unbound<kotlin.Any?>()
  val bound: rawtype.RawType.Bound<*>? = rawtype.RawType.Bound<rawtype.RawType?>()
  val boundRecursively: rawtype.RawType.BoundRecursively<*>? = BoundRecursively<rawtype.RawType.BoundRecursively<*>?>()
 }

 interface I<T: rawtype.RawType?> {
  fun f(t: T?) {}
 }

 open class Unbound<T> {}

 open class Bound<T: rawtype.RawType?> {}

 open inner class BoundRecursively<T: rawtype.RawType.BoundRecursively<T>?> {}

 open class RawSubclass: rawtype.RawType.I<rawtype.RawType?> {
  open override fun f(t: rawtype.RawType?) {}
 }
}
