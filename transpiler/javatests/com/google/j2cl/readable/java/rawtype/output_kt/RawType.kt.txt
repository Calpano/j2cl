// Generated from "rawtype/RawType.java"
package rawtype

import javaemul.lang.*
import kotlin.jvm.*

open class RawType {
 @kotlin.jvm.JvmField var rawUnbound: rawtype.RawType.Unbound<kotlin.Any?>? = rawtype.RawType.Unbound<kotlin.Any?>()

 @kotlin.jvm.JvmField var rawBound: rawtype.RawType.Bound<rawtype.RawType?>? = rawtype.RawType.Bound<rawtype.RawType?>()

 @kotlin.jvm.JvmField var rawBoundRecursively: rawtype.RawType.BoundRecursively<*>? = rawtype.RawType.BoundRecursively<rawtype.RawType.BoundRecursively<*>?>()

 open class Unbound<T> {}

 open class Bound<T: rawtype.RawType?> {}

 open class BoundRecursively<T: rawtype.RawType.BoundRecursively<T>?> {}

 interface GenericSuperclass<T: rawtype.RawType?> {
  fun f(t: T) {}
 }

 open class RawSubclass: rawtype.RawType.GenericSuperclass<rawtype.RawType?> {
  open override fun f(t: rawtype.RawType?) {}
 }
}
