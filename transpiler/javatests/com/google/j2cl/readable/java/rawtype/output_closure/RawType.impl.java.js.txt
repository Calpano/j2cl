goog.module('rawtype.RawType$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Comparable = goog.forwardDeclare('java.lang.Comparable$impl');
let Bound = goog.forwardDeclare('rawtype.RawType.Bound$impl');
let BoundRecursively = goog.forwardDeclare('rawtype.RawType.BoundRecursively$impl');
let Unbound = goog.forwardDeclare('rawtype.RawType.Unbound$impl');

class RawType extends j_l_Object {
 /** @protected */
 constructor() {
  super();
  /**@type {(Comparable|boolean|number|string)}*/
  this.f_c__rawtype_RawType;
 }
 /** @return {!RawType} */
 static $create__() {
  RawType.$clinit();
  let $instance = new RawType();
  $instance.$ctor__rawtype_RawType__();
  return $instance;
 }
 
 $ctor__rawtype_RawType__() {
  this.$ctor__java_lang_Object__();
 }
 
 m_test___$pp_rawtype() {
  let unbound = /**@type {!Unbound}*/ (Unbound.$create__());
  let bound = /**@type {!Bound}*/ (Bound.$create__());
  let boundRecursively = /**@type {!BoundRecursively}*/ (BoundRecursively.$create__rawtype_RawType(this));
 }
 
 static $clinit() {
  RawType.$clinit = () =>{};
  RawType.$loadModules();
  j_l_Object.$clinit();
 }
 /** @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof RawType;
 }
 
 static $loadModules() {
  Bound = goog.module.get('rawtype.RawType.Bound$impl');
  BoundRecursively = goog.module.get('rawtype.RawType.BoundRecursively$impl');
  Unbound = goog.module.get('rawtype.RawType.Unbound$impl');
 }
}
$Util.$setClassMetadata(RawType, 'rawtype.RawType');

exports = RawType;

//# sourceMappingURL=RawType.js.map
