// Generated from "interfacedevirtualize/InterfaceDevirtualize.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)

package interfacedevirtualize

import javaemul.lang.*
import kotlin.Any
import kotlin.Boolean
import kotlin.Comparable
import kotlin.Double
import kotlin.Int
import kotlin.OptIn
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.native.ObjCName

@ObjCName("InterfacedevirtualizeInterfaceDevirtualize", exact = true)
open class InterfaceDevirtualize {
 open fun <T> compare0(
  @ObjCName("withJavaLangComparable") c: Comparable<T & Any>?,
  @ObjCName("withId") t: T
 ): Int {
  return c!!.compareTo(t!!)
 }

 open fun compare1(
  @ObjCName("withJavaLangComparable") c: Comparable<Any>?,
  @ObjCName("withId") o: Any?
 ): Int {
  return c!!.compareTo(o!!)
 }

 open fun compare2(
  @ObjCName("withJavaLangComparable") c: Comparable<Double>?,
  @ObjCName("withJavaLangDouble") d: Double?
 ): Int {
  return c!!.compareTo(d!!)
 }

 open fun compare3(
  @ObjCName("withJavaLangDouble") d1: Double?,
  @ObjCName("withJavaLangDouble") d2: Double?
 ): Int {
  return d1!!.compareTo(d2!!)
 }

 open fun compare2(
  @ObjCName("withJavaLangComparable") c: Comparable<Boolean>?,
  @ObjCName("withJavaLangBoolean") d: Boolean?
 ): Int {
  return c!!.compareTo(d!!)
 }

 open fun compare3(
  @ObjCName("withJavaLangBoolean") d1: Boolean?,
  @ObjCName("withJavaLangBoolean") d2: Boolean?
 ): Int {
  return d1!!.compareTo(d2!!)
 }

 open fun compare2(
  @ObjCName("withJavaLangComparable") c: Comparable<Int>?,
  @ObjCName("withJavaLangInteger") d: Int?
 ): Int {
  return c!!.compareTo(d!!)
 }

 open fun compare3(
  @ObjCName("withJavaLangInteger") d1: Int?,
  @ObjCName("withJavaLangInteger") d2: Int?
 ): Int {
  return d1!!.compareTo(d2!!)
 }
}
