package nestedlocalclasses

import javaemul.lang.*
import kotlin.jvm.*

open class NestedLocalClasses {
 open fun test(p: kotlin.Int) {
  val localVar: kotlin.Int = 1
  open class `$1InnerClass` {
   open fun `fun`() {
    val localVarInInnerClass: kotlin.Int = 1
    open class `$1InnerInnerClass` {
     @kotlin.jvm.JvmField var fieldInInnerInnerClass: kotlin.Int = localVar + localVarInInnerClass
    }
    `$1InnerInnerClass`()
    open class `$1ClassIndirectlyCapturingLocal` {
     init {
      `$1InnerInnerClass`()
     }
    }
   }
  }
 }

 interface InterfaceWithThisReference {
  fun foo() {
   open class `$1Super`: nestedlocalclasses.NestedLocalClasses.InterfaceWithThisReference {}
   object : `$1Super`() {}
  }
 }
}
