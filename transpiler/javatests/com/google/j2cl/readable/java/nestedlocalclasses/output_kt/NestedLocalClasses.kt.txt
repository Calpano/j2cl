package nestedlocalclasses

open class NestedLocalClasses {
 constructor(): super()

 open fun test(p: Int) {
  var localVar: Int = 1
  if (true) {}
 }
}

open class `NestedLocalClasses$InterfaceWithThisReference$1`: nestedlocalclasses.`NestedLocalClasses$InterfaceWithThisReference$1Super` {
 @JvmField val `this`: nestedlocalclasses.`NestedLocalClasses$InterfaceWithThisReference`?

 internal constructor(`$outer_this`: nestedlocalclasses.`NestedLocalClasses$InterfaceWithThisReference`?): super(this) {
  this.`this` = `$outer_this`
 }
}

open class `NestedLocalClasses$InterfaceWithThisReference$1Super`: nestedlocalclasses.`NestedLocalClasses$InterfaceWithThisReference` {
 @JvmField val `this`: nestedlocalclasses.`NestedLocalClasses$InterfaceWithThisReference`?

 internal constructor(`$outer_this`: nestedlocalclasses.`NestedLocalClasses$InterfaceWithThisReference`?): super() {
  this.`this` = `$outer_this`
 }
}

interface `NestedLocalClasses$InterfaceWithThisReference` {
 fun foo() {
  if (true) {}
  nestedlocalclasses.`NestedLocalClasses$InterfaceWithThisReference$1`(this)
 }
}

open class `NestedLocalClasses$1InnerClass$1InnerInnerClass` {
 @JvmField val `this`: nestedlocalclasses.`NestedLocalClasses$1InnerClass`?

 internal constructor(`$outer_this`: nestedlocalclasses.`NestedLocalClasses$1InnerClass`?, `$captured_localVar`: Int, `$captured_localVarInInnerClass`: Int): super() {
  this.`this` = `$outer_this`
  this.localVar = `$captured_localVar`
  this.localVarInInnerClass = `$captured_localVarInInnerClass`
 }

 @JvmField var fieldInInnerInnerClass: Int = this.localVar + this.localVarInInnerClass

 @JvmField val localVar: Int

 @JvmField val localVarInInnerClass: Int
}

open class `NestedLocalClasses$1InnerClass$1ClassIndirectlyCapturingLocal` {
 @JvmField val `this`: nestedlocalclasses.`NestedLocalClasses$1InnerClass`?

 internal constructor(`$outer_this`: nestedlocalclasses.`NestedLocalClasses$1InnerClass`?, `$captured_localVar`: Int, `$captured_localVarInInnerClass`: Int): super() {
  this.`this` = `$outer_this`
  this.localVar = `$captured_localVar`
  this.localVarInInnerClass = `$captured_localVarInInnerClass`
 }

 init {
  nestedlocalclasses.`NestedLocalClasses$1InnerClass$1InnerInnerClass`(this.`this`, this.localVar, this.localVarInInnerClass)
 }

 @JvmField val localVar: Int

 @JvmField val localVarInInnerClass: Int
}

open class `NestedLocalClasses$1InnerClass` {
 @JvmField val `this`: nestedlocalclasses.NestedLocalClasses?

 internal constructor(`$outer_this`: nestedlocalclasses.NestedLocalClasses?, `$captured_localVar`: Int): super() {
  this.`this` = `$outer_this`
  this.localVar = `$captured_localVar`
 }

 open fun `fun`() {
  var localVarInInnerClass: Int = 1
  if (true) {}
  nestedlocalclasses.`NestedLocalClasses$1InnerClass$1InnerInnerClass`(this, this.localVar, localVarInInnerClass)
  if (true) {}
 }

 @JvmField val localVar: Int
}
