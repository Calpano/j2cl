;;; Code for srcjar.Foo [vtable]
(global $srcjar.Foo.vtable (mut (ref null $srcjar.Foo.vtable)) (ref.null $srcjar.Foo.vtable))

;;; Code for srcjar.Srcjar [vtable]
(global $srcjar.Srcjar.vtable (mut (ref null $srcjar.Srcjar.vtable)) (ref.null $srcjar.Srcjar.vtable))

;;; Code for srcjar.Foo [static fields]
(global $f_$initialized__srcjar_Foo (mut i32) (i32.const 0))

;;; Code for srcjar.Srcjar [static fields]
(global $f_$initialized__srcjar_Srcjar (mut i32) (i32.const 0))

;;; Code for srcjar.Foo [CLASS]
(type $srcjar.Foo (struct
 (field $vtable (ref $srcjar.Foo.vtable)) (field $itable (ref $itable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $srcjar.Foo.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))

;;; Foo()
(func $m_<init>__@srcjar.Foo
 (param $this (ref null $srcjar.Foo))
 (result (ref null $srcjar.Foo))
 (block
  ;; srcjar.Foo.$clinit();
  ;;@ srcjar/Foo.java:21:13
  (call $$clinit__void@srcjar.Foo )
  ;; Object.this.Object.<init>();
  ;;@ srcjar/Foo.java:21:13
  (drop (call $m_<init>__@java.lang.Object (local.get $this)))
  ;; return Foo.this;
  ;;@ srcjar/Foo.java:21:13
  (return (local.get $this))
 )
)

;;; void Foo.$clinit()
(func $$clinit__void@srcjar.Foo
 (block
  ;; if (srcjar.Foo.$initialized) return;
  ;;@ srcjar/Foo.java:21:13
  (if (global.get $f_$initialized__srcjar_Foo)
   (then
    ;; return;
    ;;@ srcjar/Foo.java:21:13
    (return )
   )
  )
  ;; (srcjar.Foo.$initialized = true);
  ;;@ srcjar/Foo.java:21:13
  (global.set $f_$initialized__srcjar_Foo (i32.const 1))
  ;; java.lang.Object.$clinit();
  ;;@ srcjar/Foo.java:21:13
  (call $$clinit__void@java.lang.Object )
 )
)

;;; Class<?> Foo.getClass()
(func $m_getClass__java_lang_Class@srcjar.Foo
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $this (ref null $srcjar.Foo))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $srcjar.Foo.rtt)))
 (block
  ;; return javaemul.internal.ClassLiteralPool.$getSrcjar.Foo();
  (return (call $$getSrcjar.Foo__java_lang_Class@javaemul.internal.ClassLiteralPool ))
 )
)
(elem declare func $m_getClass__java_lang_Class@srcjar.Foo)

;;; Code for srcjar.Srcjar [CLASS]
(type $srcjar.Srcjar (struct
 (field $vtable (ref $srcjar.Srcjar.vtable)) (field $itable (ref $itable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $srcjar.Srcjar.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))

;;; Srcjar()
(func $m_<init>__@srcjar.Srcjar
 (param $this (ref null $srcjar.Srcjar))
 (result (ref null $srcjar.Srcjar))
 (block
  ;; srcjar.Srcjar.$clinit();
  ;;@ srcjar/Srcjar.java:18:13
  (call $$clinit__void@srcjar.Srcjar )
  ;; Object.this.Object.<init>();
  ;;@ srcjar/Srcjar.java:18:13
  (drop (call $m_<init>__@java.lang.Object (local.get $this)))
  ;; return Srcjar.this;
  ;;@ srcjar/Srcjar.java:18:13
  (return (local.get $this))
 )
)

;;; void Srcjar.test()
(func $m_test__void@srcjar.Srcjar
 (local $foo (ref null $srcjar.Foo))
 (block
  ;; srcjar.Srcjar.$clinit();
  ;;@ srcjar/Srcjar.java:20:28
  (call $$clinit__void@srcjar.Srcjar )
  ;; Foo foo = new Foo.<init>();
  ;;@ srcjar/Srcjar.java:21:4
  (local.set $foo (call $m_<init>__@srcjar.Foo (struct.new_with_rtt $srcjar.Foo (ref.as_non_null (global.get $srcjar.Foo.vtable)) (ref.as_non_null (global.get $srcjar.Foo.itable)) (i32.const 0) (global.get $srcjar.Foo.rtt))))
 )
)

;;; void Srcjar.$clinit()
(func $$clinit__void@srcjar.Srcjar
 (block
  ;; if (srcjar.Srcjar.$initialized) return;
  ;;@ srcjar/Srcjar.java:18:13
  (if (global.get $f_$initialized__srcjar_Srcjar)
   (then
    ;; return;
    ;;@ srcjar/Srcjar.java:18:13
    (return )
   )
  )
  ;; (srcjar.Srcjar.$initialized = true);
  ;;@ srcjar/Srcjar.java:18:13
  (global.set $f_$initialized__srcjar_Srcjar (i32.const 1))
  ;; java.lang.Object.$clinit();
  ;;@ srcjar/Srcjar.java:18:13
  (call $$clinit__void@java.lang.Object )
 )
)

;;; Class<?> Srcjar.getClass()
(func $m_getClass__java_lang_Class@srcjar.Srcjar
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $this (ref null $srcjar.Srcjar))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $srcjar.Srcjar.rtt)))
 (block
  ;; return javaemul.internal.ClassLiteralPool.$getSrcjar.Srcjar();
  (return (call $$getSrcjar.Srcjar__java_lang_Class@javaemul.internal.ClassLiteralPool ))
 )
)
(elem declare func $m_getClass__java_lang_Class@srcjar.Srcjar)

 ;;; Code for srcjar.Foo [vtable.init]
 (global.set $srcjar.Foo.vtable
  (struct.new_with_rtt $srcjar.Foo.vtable
   (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object)
   (ref.func $m_hashCode__int@java.lang.Object)
   (ref.func $m_toString__java_lang_String@java.lang.Object)
   (ref.func $m_getClass__java_lang_Class@srcjar.Foo)
   (rtt.canon $srcjar.Foo.vtable)
  )
 )

 ;;; Code for srcjar.Foo [itable.init]
 (global.set $srcjar.Foo.itable (array.new_default_with_rtt $itable (i32.const 0) (rtt.canon $itable)))

 ;;; Code for srcjar.Srcjar [vtable.init]
 (global.set $srcjar.Srcjar.vtable
  (struct.new_with_rtt $srcjar.Srcjar.vtable
   (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object)
   (ref.func $m_hashCode__int@java.lang.Object)
   (ref.func $m_toString__java_lang_String@java.lang.Object)
   (ref.func $m_getClass__java_lang_Class@srcjar.Srcjar)
   (rtt.canon $srcjar.Srcjar.vtable)
  )
 )

 ;;; Code for srcjar.Srcjar [itable.init]
 (global.set $srcjar.Srcjar.itable (array.new_default_with_rtt $itable (i32.const 0) (rtt.canon $itable)))
