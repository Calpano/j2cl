;;; Code for instanceofexpression.InstanceofExpressions [vtable]
(global $instanceofexpression.InstanceofExpressions.vtable (mut (ref null $instanceofexpression.InstanceofExpressions.vtable)) (ref.null $instanceofexpression.InstanceofExpressions.vtable))

;;; Code for instanceofexpression.InstanceofExpressions.1 [vtable]
(global $instanceofexpression.InstanceofExpressions.1.vtable (mut (ref null $instanceofexpression.InstanceofExpressions.1.vtable)) (ref.null $instanceofexpression.InstanceofExpressions.1.vtable))

;;; Code for instanceofexpression.InstanceofExpressions [static fields]
(global $f_$initialized__instanceofexpression_InstanceofExpressions (mut i32) (i32.const 0))

;;; Code for instanceofexpression.InstanceofExpressions.1 [static fields]
(global $f_$initialized__instanceofexpression_InstanceofExpressions_1 (mut i32) (i32.const 0))

;;; Code for instanceofexpression.InstanceofExpressions [CLASS]
(type $instanceofexpression.InstanceofExpressions (struct
 (field $vtable (ref null $instanceofexpression.InstanceofExpressions.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $instanceofexpression.InstanceofExpressions.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_testInstanceofClass__void (mut (ref $function.__$void)))
 (field $m_testInstanceofInterface__void (mut (ref $function.__$void)))
 (field $m_testInstanceofBoxedType__void (mut (ref $function.__$void)))
 (field $m_testInstanceOfArray__void (mut (ref $function.__$void)))
))

;;; InstanceofExpressions()
(func $m_<init>__void@instanceofexpression.InstanceofExpressions
 (param $this (ref null $instanceofexpression.InstanceofExpressions))
 (result (ref null $instanceofexpression.InstanceofExpressions))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void InstanceofExpressions.testInstanceofClass()
(func $m_testInstanceofClass__void@instanceofexpression.InstanceofExpressions
 (param $this.untyped (ref null $java.lang.Object))
 (local $object (ref null $java.lang.Object))
 (local $b i32)
 (local $this (ref null $instanceofexpression.InstanceofExpressions))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $instanceofexpression.InstanceofExpressions.rtt)))
 (block $return.label
  (block
   ;; Object object = new InstanceofExpressions.<init>();
   
   (local.set $object (call $m_<init>__void@instanceofexpression.InstanceofExpressions (struct.new_with_rtt $instanceofexpression.InstanceofExpressions (global.get $instanceofexpression.InstanceofExpressions.vtable) (i32.const 0) (global.get $instanceofexpression.InstanceofExpressions.rtt))))
   ;; boolean b;
   
   ;; (b = object instanceof Object);
   (local.set $b (ref.test (local.get $object) (global.get $java.lang.Object.rtt)))
   ;; (b = object instanceof InstanceofExpressions);
   (local.set $b (ref.test (local.get $object) (global.get $instanceofexpression.InstanceofExpressions.rtt)))
   ;; (b = object instanceof String);
   (local.set $b (ref.test (local.get $object) (global.get $java.lang.String.rtt)))
  )
 )
)
(elem declare func $m_testInstanceofClass__void@instanceofexpression.InstanceofExpressions)

;;; void InstanceofExpressions.testInstanceofInterface()
(func $m_testInstanceofInterface__void@instanceofexpression.InstanceofExpressions
 (param $this.untyped (ref null $java.lang.Object))
 (local $o (ref null $java.lang.Object))
 (local $b i32)
 (local $this (ref null $instanceofexpression.InstanceofExpressions))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $instanceofexpression.InstanceofExpressions.rtt)))
 (block $return.label
  (block
   ;; Object o = new Object.<init>();
   
   (local.set $o (call $m_<init>__void@java.lang.Object (struct.new_with_rtt $java.lang.Object (global.get $java.lang.Object.vtable) (i32.const 0) (global.get $java.lang.Object.rtt))))
   ;; boolean b;
   
   ;; (b = o instanceof Serializable);
   (local.set $b (i32.const 0))
   ;; (b = new $1.<init>(InstanceofExpressions.this) instanceof Serializable);
   (local.set $b (i32.const 0))
  )
 )
)
(elem declare func $m_testInstanceofInterface__void@instanceofexpression.InstanceofExpressions)

;;; void InstanceofExpressions.testInstanceofBoxedType()
(func $m_testInstanceofBoxedType__void@instanceofexpression.InstanceofExpressions
 (param $this.untyped (ref null $java.lang.Object))
 (local $b (ref null $java.lang.Object))
 (local $a i32)
 (local $d (ref null $java.lang.Double))
 (local $this (ref null $instanceofexpression.InstanceofExpressions))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $instanceofexpression.InstanceofExpressions.rtt)))
 (block $return.label
  (block
   ;; Object b = new Integer.<init>(1);
   
   (local.set $b (call $m_<init>__int__void@java.lang.Integer (struct.new_with_rtt $java.lang.Integer (global.get $java.lang.Integer.vtable) (i32.const 0) (i32.const 0) (global.get $java.lang.Integer.rtt))(i32.const 1)))
   ;; boolean a = b instanceof Byte;
   
   (local.set $a (ref.test (local.get $b) (global.get $java.lang.Byte.rtt)))
   ;; (a = b instanceof Double);
   (local.set $a (ref.test (local.get $b) (global.get $java.lang.Double.rtt)))
   ;; (a = b instanceof Float);
   (local.set $a (ref.test (local.get $b) (global.get $java.lang.Float.rtt)))
   ;; (a = b instanceof Integer);
   (local.set $a (ref.test (local.get $b) (global.get $java.lang.Integer.rtt)))
   ;; (a = b instanceof Long);
   (local.set $a (ref.test (local.get $b) (global.get $java.lang.Long.rtt)))
   ;; (a = b instanceof Short);
   (local.set $a (ref.test (local.get $b) (global.get $java.lang.Short.rtt)))
   ;; (a = b instanceof Number);
   (local.set $a (ref.test (local.get $b) (global.get $java.lang.Number.rtt)))
   ;; (a = b instanceof Character);
   (local.set $a (ref.test (local.get $b) (global.get $java.lang.Character.rtt)))
   ;; (a = b instanceof Boolean);
   (local.set $a (ref.test (local.get $b) (global.get $java.lang.Boolean.rtt)))
   ;; Double d = null;
   
   (local.set $d (ref.null $java.lang.Double))
   ;; (a = d instanceof Object);
   (local.set $a (ref.test (local.get $d) (global.get $java.lang.Object.rtt)))
   ;; (a = d instanceof Number);
   (local.set $a (ref.test (local.get $d) (global.get $java.lang.Number.rtt)))
   ;; (a = d instanceof Double);
   (local.set $a (ref.test (local.get $d) (global.get $java.lang.Double.rtt)))
  )
 )
)
(elem declare func $m_testInstanceofBoxedType__void@instanceofexpression.InstanceofExpressions)

;;; void InstanceofExpressions.testInstanceOfArray()
(func $m_testInstanceOfArray__void@instanceofexpression.InstanceofExpressions
 (param $this.untyped (ref null $java.lang.Object))
 (local $object (ref null $java.lang.Object))
 (local $objectArray (ref null $javaemul.internal.WasmArray.OfObject))
 (local $objectDoubleArray (ref null $javaemul.internal.WasmArray.OfObject))
 (local $$array_literal (ref null $javaemul.internal.WasmArray.OfInt))
 (local $stringArray (ref null $javaemul.internal.WasmArray.OfObject))
 (local $a i32)
 (local $this (ref null $instanceofexpression.InstanceofExpressions))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $instanceofexpression.InstanceofExpressions.rtt)))
 (block $return.label
  (block
   ;; Object object = new Object.<init>();
   
   (local.set $object (call $m_<init>__void@java.lang.Object (struct.new_with_rtt $java.lang.Object (global.get $java.lang.Object.vtable) (i32.const 0) (global.get $java.lang.Object.rtt))))
   ;; Object[] objectArray = new OfObject.<init>(0);
   
   (local.set $objectArray (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfObject (struct.new_with_rtt $javaemul.internal.WasmArray.OfObject (global.get $javaemul.internal.WasmArray.OfObject.vtable) (i32.const 0) (i32.const 0) (ref.null $java.lang.Object.array) (global.get $javaemul.internal.WasmArray.OfObject.rtt))(i32.const 0)))
   ;; Object[][] objectDoubleArray = javaemul.internal.WasmArray.createMultiDimensional((int[] $array_literal = new OfInt.<init>(2),($array_literal.elements[0] = 0),($array_literal.elements[1] = -1),$array_literal),-1);
   
   (local.set $objectDoubleArray (call $m_createMultiDimensional__arrayOf_int__int__arrayOf_java_lang_Object@javaemul.internal.WasmArray (block (result (ref null $javaemul.internal.WasmArray.OfInt))
    
    (local.set $$array_literal (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfInt (struct.new_with_rtt $javaemul.internal.WasmArray.OfInt (global.get $javaemul.internal.WasmArray.OfInt.vtable) (i32.const 0) (i32.const 0) (ref.null $int.array) (global.get $javaemul.internal.WasmArray.OfInt.rtt))(i32.const 2)))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal)) (i32.const 0) (i32.const 0))
    (array.set $int.array (struct.get $javaemul.internal.WasmArray.OfInt $f_elements__javaemul_internal_WasmArray_OfInt_(local.get $$array_literal)) (i32.const 1) (i32.const -1))
    (local.get $$array_literal)
   )(i32.const -1)))
   ;; String[] stringArray = new OfObject.<init>(0);
   
   (local.set $stringArray (call $m_<init>__int__void_$pp_javaemul_internal@javaemul.internal.WasmArray.OfObject (struct.new_with_rtt $javaemul.internal.WasmArray.OfObject (global.get $javaemul.internal.WasmArray.OfObject.vtable) (i32.const 0) (i32.const 0) (ref.null $java.lang.Object.array) (global.get $javaemul.internal.WasmArray.OfObject.rtt))(i32.const 0)))
   ;; boolean a;
   
   ;; (a = object instanceof Object[]);
   (local.set $a (ref.test (local.get $object) (global.get $javaemul.internal.WasmArray.OfObject.rtt)))
   ;; (a = object instanceof String[][]);
   (local.set $a (ref.test (local.get $object) (global.get $javaemul.internal.WasmArray.OfObject.rtt)))
   ;; (a = object instanceof Object[]);
   (local.set $a (ref.test (local.get $object) (global.get $javaemul.internal.WasmArray.OfObject.rtt)))
   ;; (a = object instanceof String[][]);
   (local.set $a (ref.test (local.get $object) (global.get $javaemul.internal.WasmArray.OfObject.rtt)))
   ;; (a = objectArray instanceof Object[]);
   (local.set $a (ref.test (local.get $objectArray) (global.get $javaemul.internal.WasmArray.OfObject.rtt)))
   ;; (a = objectArray instanceof String[]);
   (local.set $a (ref.test (local.get $objectArray) (global.get $javaemul.internal.WasmArray.OfObject.rtt)))
   ;; (a = objectArray instanceof Object[][]);
   (local.set $a (ref.test (local.get $objectArray) (global.get $javaemul.internal.WasmArray.OfObject.rtt)))
   ;; (a = objectArray instanceof String[][]);
   (local.set $a (ref.test (local.get $objectArray) (global.get $javaemul.internal.WasmArray.OfObject.rtt)))
   ;; (a = objectDoubleArray instanceof Object[]);
   (local.set $a (ref.test (local.get $objectDoubleArray) (global.get $javaemul.internal.WasmArray.OfObject.rtt)))
   ;; (a = objectDoubleArray instanceof Object[][]);
   (local.set $a (ref.test (local.get $objectDoubleArray) (global.get $javaemul.internal.WasmArray.OfObject.rtt)))
   ;; (a = objectDoubleArray instanceof String[][]);
   (local.set $a (ref.test (local.get $objectDoubleArray) (global.get $javaemul.internal.WasmArray.OfObject.rtt)))
   ;; (a = stringArray instanceof Object[]);
   (local.set $a (ref.test (local.get $stringArray) (global.get $javaemul.internal.WasmArray.OfObject.rtt)))
   ;; (a = stringArray instanceof String[]);
   (local.set $a (ref.test (local.get $stringArray) (global.get $javaemul.internal.WasmArray.OfObject.rtt)))
  )
 )
)
(elem declare func $m_testInstanceOfArray__void@instanceofexpression.InstanceofExpressions)

;;; void InstanceofExpressions.$clinit()
(func $$clinit__void@instanceofexpression.InstanceofExpressions
 (block $return.label
  (block
   ;; if (instanceofexpression.InstanceofExpressions.$initialized) return;
   (if (global.get $f_$initialized__instanceofexpression_InstanceofExpressions)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (instanceofexpression.InstanceofExpressions.$initialized = true);
   (global.set $f_$initialized__instanceofexpression_InstanceofExpressions (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> InstanceofExpressions.getClass()
(func $m_getClass__java_lang_Class@instanceofexpression.InstanceofExpressions
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $instanceofexpression.InstanceofExpressions))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $instanceofexpression.InstanceofExpressions.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getInstanceofexpression.InstanceofExpressions();
   (local.set $return.value (call $$getInstanceofexpression.InstanceofExpressions__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@instanceofexpression.InstanceofExpressions)

;;; Code for instanceofexpression.InstanceofExpressions.1 [CLASS]
(type $instanceofexpression.InstanceofExpressions.1 (struct
 (field $vtable (ref null $instanceofexpression.InstanceofExpressions.1.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $$outer_this__instanceofexpression_InstanceofExpressions_1 (mut (ref null $instanceofexpression.InstanceofExpressions)))
))
(type $instanceofexpression.InstanceofExpressions.1.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))

;;; <anonymous> implements Serializable(InstanceofExpressions $outer_this)
(func $m_<init>__instanceofexpression_InstanceofExpressions__void_$pp_instanceofexpression@instanceofexpression.InstanceofExpressions.1
 (param $this (ref null $instanceofexpression.InstanceofExpressions.1))
 (param $$outer_this (ref null $instanceofexpression.InstanceofExpressions))
 (result (ref null $instanceofexpression.InstanceofExpressions.1))
 (block $return.label
  (block
   ;; ($1.this.this = $outer_this);
   (struct.set $instanceofexpression.InstanceofExpressions.1 $$outer_this__instanceofexpression_InstanceofExpressions_1(local.get $this) (local.get $$outer_this))
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void <anonymous> implements Serializable.$clinit()
(func $$clinit__void@instanceofexpression.InstanceofExpressions.1
 (block $return.label
  (block
   ;; if (instanceofexpression.InstanceofExpressions.1.$initialized) return;
   (if (global.get $f_$initialized__instanceofexpression_InstanceofExpressions_1)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (instanceofexpression.InstanceofExpressions.1.$initialized = true);
   (global.set $f_$initialized__instanceofexpression_InstanceofExpressions_1 (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> <anonymous> implements Serializable.getClass()
(func $m_getClass__java_lang_Class@instanceofexpression.InstanceofExpressions.1
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $instanceofexpression.InstanceofExpressions.1))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $instanceofexpression.InstanceofExpressions.1.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getInstanceofexpression.InstanceofExpressions.1();
   (local.set $return.value (call $$getInstanceofexpression.InstanceofExpressions.1__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@instanceofexpression.InstanceofExpressions.1)

 ;;; Code for instanceofexpression.InstanceofExpressions [vtable.init]
 (global.set $instanceofexpression.InstanceofExpressions.vtable (struct.new_with_rtt $instanceofexpression.InstanceofExpressions.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@instanceofexpression.InstanceofExpressions) (ref.func $m_testInstanceofClass__void@instanceofexpression.InstanceofExpressions) (ref.func $m_testInstanceofInterface__void@instanceofexpression.InstanceofExpressions) (ref.func $m_testInstanceofBoxedType__void@instanceofexpression.InstanceofExpressions) (ref.func $m_testInstanceOfArray__void@instanceofexpression.InstanceofExpressions) (rtt.canon $instanceofexpression.InstanceofExpressions.vtable)))

 ;;; Code for instanceofexpression.InstanceofExpressions.1 [vtable.init]
 (global.set $instanceofexpression.InstanceofExpressions.1.vtable (struct.new_with_rtt $instanceofexpression.InstanceofExpressions.1.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@instanceofexpression.InstanceofExpressions.1) (rtt.canon $instanceofexpression.InstanceofExpressions.1.vtable)))
