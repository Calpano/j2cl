package instanceofexpression

open class InstanceofExpressions {
 open fun testInstanceofClass() {
  val `object`: Any? = instanceofexpression.InstanceofExpressions()
  var b: Boolean
  b = `object` is Any
  b = `object` is instanceofexpression.InstanceofExpressions
  b = `object` is String
 }

 open fun testInstanceofInterface() {
  val o: Any? = Any()
  var b: Boolean
  b = o is java.io.Serializable
  b = TODO("expression.qualify needs rendering: InstanceofExpressions.this)") is java.io.Serializable
 }

 open fun testInstanceofBoxedType() {
  val b: Any? = Int(1)
  var a: Boolean = b is Byte
  a = b is Double
  a = b is Float
  a = b is Int
  a = b is Long
  a = b is Short
  a = b is Number
  a = b is java.lang.Character
  a = b is Boolean
  val d: Double? = null
  a = d is Any
  a = d is Number
  a = d is Double
 }

 open fun testInstanceOfArray() {
  val `object`: Any? = Any()
  val objectArray: Array<Any?>? = arrayOfNulls<Any?>(0)
  val objectDoubleArray: Array<Array<Any?>?>? = arrayOfNulls<Array<Any?>?>(0)
  val stringArray: Array<String?>? = arrayOfNulls<String?>(0)
  var a: Boolean
  a = `object` is Array<Any?>
  a = `object` is Array<Array<String?>?>
  a = `object` is Array<Any?>
  a = `object` is Array<Array<String?>?>
  a = objectArray is Array<Any?>
  a = objectArray is Array<String?>
  a = objectArray is Array<Array<Any?>?>
  a = objectArray is Array<Array<String?>?>
  a = objectDoubleArray is Array<Any?>
  a = objectDoubleArray is Array<Array<Any?>?>
  a = objectDoubleArray is Array<Array<String?>?>
  a = stringArray is Array<Any?>
  a = stringArray is Array<String?>
 }
}

open class `InstanceofExpressions$1`: java.io.Serializable {
 internal constructor(): super() {

 }

 @JvmField val `this`: instanceofexpression.InstanceofExpressions?
}
