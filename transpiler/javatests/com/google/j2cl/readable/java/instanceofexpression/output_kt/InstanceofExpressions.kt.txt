package instanceofexpression

open class InstanceofExpressions {
 fun testInstanceofClass() {
  val `object`: Any? = instanceofexpression.InstanceofExpressions()
  var b: Boolean
  b = TODO("InstanceOfExpression")
  b = TODO("InstanceOfExpression")
  b = TODO("InstanceOfExpression")
 }

 fun testInstanceofInterface() {
  val o: Any? = Any()
  var b: Boolean
  b = TODO("InstanceOfExpression")
  b = TODO("InstanceOfExpression")
 }

 fun testInstanceofBoxedType() {
  val b: Any? = Int(1)
  var a: Boolean = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
  val d: Double? = null
  a = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
 }

 fun testInstanceOfArray() {
  val `object`: Any? = Any()
  val objectArray: Array<Any?>? = arrayOfNulls<Any?>(0)
  val objectDoubleArray: Array<Array<Any?>?>? = arrayOfNulls<Array<Any?>?>(0)
  val stringArray: Array<String?>? = arrayOfNulls<String?>(0)
  var a: Boolean
  a = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
  a = TODO("InstanceOfExpression")
 }
}

open class $1: java.io.Serializable {
 fun <init>(): instanceofexpression.InstanceofExpressions.1 {
  super()
 }
}
