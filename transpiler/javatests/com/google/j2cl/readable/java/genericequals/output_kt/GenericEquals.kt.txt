package genericequals

open class GenericEquals<T> {
 internal val value: T?

 internal val value2: genericequals.GenericEquals<T>?

 constructor(value: T?): super() {
  this.value = value
  this.value2 = null
 }

 open fun foo(other: genericequals.GenericEquals<*>?): Any? {
  return other!!.value2!!.value
 }

 open override fun equals(obj: Any?): Boolean {
  if (obj == this) {
   return true
  }
  if (!(obj is genericequals.GenericEquals<*>)) {
   return false
  }
  val other: genericequals.GenericEquals<*>? = obj as genericequals.GenericEquals<*>?
  return this.value!!.equals(other!!.value)
 }
}
