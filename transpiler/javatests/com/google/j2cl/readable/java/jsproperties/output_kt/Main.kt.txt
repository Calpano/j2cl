// Generated from "jsproperties/Main.java"
@file:OptIn(ExperimentalObjCRefinement::class, ExperimentalObjCName::class)

package jsproperties

import javaemul.lang.*
import kotlin.Any
import kotlin.Double
import kotlin.Int
import kotlin.OptIn
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName

open class Foo {
 companion object {
  @JvmField
  @HiddenFromObjC
  var f_private_2: Int = 0

  @JvmStatic
  @ObjCName("getA")
  fun getA(): Int {
   return Foo.f_private_2 + 1
  }

  @JvmStatic
  @ObjCName("setA")
  fun setA(
   @ObjCName("withInt") x: Int
  ) {
   Foo.f_private_2 = x + 2
  }

  @JvmStatic
  @ObjCName("getB")
  fun getB(): Int {
   return Foo.f_private_2 + 3
  }

  @JvmStatic
  @ObjCName("setB")
  fun setB(
   @ObjCName("withInt") x: Int
  ) {
   Foo.f_private_2 = x + 4
  }
 }
}

open class Bar {
 @JvmField
 @HiddenFromObjC
 var f_private_2: Int = 0

 @ObjCName("getA")
 open fun getA(): Int {
  return this.f_private_2 + 1
 }

 @ObjCName("setA")
 open fun setA(
  @ObjCName("withInt") x: Int
 ) {
  this.f_private_2 = x + 2
 }

 @ObjCName("getB")
 open fun getB(): Int {
  return this.f_private_2 + 3
 }

 @ObjCName("setB")
 open fun setB(
  @ObjCName("withInt") x: Int
 ) {
  this.f_private_2 = x + 4
 }
}

open class NativeFoo {
 @ObjCName("getA")
 external open fun getA(): Any?

 companion object {
  @JvmStatic
  @ObjCName("getB")
  external fun getB(): Double
 }
}

@ObjCName("JspropertiesMain", exact = true)
open class Main {
 @ObjCName("testNativeJsProperty")
 open fun testNativeJsProperty() {
  NativeFoo().getA()
  NativeFoo.getB()
 }

 @ObjCName("testStaticJsProperty")
 open fun testStaticJsProperty() {
  Foo.getA()
  Foo.setA(10)
  Foo.getB()
  Foo.setB(10)
 }

 @ObjCName("testInstanceJsProperty")
 open fun testInstanceJsProperty() {
  val bar: Bar? = Bar()
  bar!!.getA()
  bar!!.setA(10)
  bar!!.getB()
  bar!!.setB(10)
 }
}
