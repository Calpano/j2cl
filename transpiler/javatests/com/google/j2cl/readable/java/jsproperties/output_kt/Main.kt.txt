package jsproperties

open class Foo {
 internal constructor(): super()

 companion object {
  internal var f: Int = 0

  @kotlin.jvm.JvmStatic
  fun getA(): Int {
   return jsproperties.Foo.f + 1
  }

  @kotlin.jvm.JvmStatic
  fun setA(x: Int) {
   jsproperties.Foo.f = x + 2
  }

  @kotlin.jvm.JvmStatic
  fun getB(): Int {
   return jsproperties.Foo.f + 3
  }

  @kotlin.jvm.JvmStatic
  fun setB(x: Int) {
   jsproperties.Foo.f = x + 4
  }
 }
}

open class Bar {
 internal constructor(): super()

 internal var f: Int = 0

 open fun getA(): Int {
  return this.f + 1
 }

 open fun setA(x: Int) {
  this.f = x + 2
 }

 open fun getB(): Int {
  return this.f + 3
 }

 open fun setB(x: Int) {
  this.f = x + 4
 }
}

open class NativeFoo {
 internal constructor(): super()

 external open fun getA(): kotlin.Any?

 companion object {
  @kotlin.jvm.JvmStatic
  external fun getB(): Double
 }
}

open class Main {
 constructor(): super()

 open fun testNativeJsProperty() {
  jsproperties.NativeFoo().getA()
  jsproperties.NativeFoo.getB()
 }

 open fun testStaticJsProperty() {
  jsproperties.Foo.getA()
  jsproperties.Foo.setA(10)
  jsproperties.Foo.getB()
  jsproperties.Foo.setB(10)
 }

 open fun testInstanceJsProperty() {
  val bar: jsproperties.Bar? = jsproperties.Bar()
  bar!!.getA()
  bar!!.setA(10)
  bar!!.getB()
  bar!!.setB(10)
 }
}
