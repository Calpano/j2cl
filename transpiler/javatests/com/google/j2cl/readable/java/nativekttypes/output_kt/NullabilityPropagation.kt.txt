// Generated from "nativekttypes/NullabilityPropagation.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress("REPEATED_BOUND", "UNNECESSARY_NOT_NULL_ASSERTION", "VARIABLE_WITH_REDUNDANT_INITIALIZER", "UNCHECKED_CAST", "PARAMETER_NAME_CHANGED_ON_OVERRIDE", "ALWAYS_NULL", "SENSELESS_COMPARISON", "UNUSED_PARAMETER")

package nativekttypes

import javaemul.lang.*
import kotlin.Any
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("NativekttypesNullabilityPropagation", exact = true)
class NullabilityPropagation {
 interface NullabilityToPropagate<ExtendsNullable, ExtendsNonNull: Any> {
  @ObjCName("nullableString1")
  fun nullableString1(
   @ObjCName("withNSString") s: String?
  ): String?

  @ObjCName("nullableString2")
  fun nullableString2(
   @ObjCName("withNSString") s: String?
  ): String?

  @ObjCName("nonNullString1")
  fun nonNullString1(
   @ObjCName("withNSString") s: String
  ): String

  @ObjCName("nonNullString2")
  fun nonNullString2(
   @ObjCName("withNSString") s: String
  ): String

  @ObjCName("nullableExtendsNullable1")
  fun nullableExtendsNullable1(
   @ObjCName("withId") s: ExtendsNullable?
  ): ExtendsNullable?

  @ObjCName("nullableExtendsNullable2")
  fun nullableExtendsNullable2(
   @ObjCName("withId") s: ExtendsNullable?
  ): ExtendsNullable?

  @ObjCName("nonNullExtendsNullable1")
  fun nonNullExtendsNullable1(
   @ObjCName("withId") s: ExtendsNullable
  ): ExtendsNullable

  @ObjCName("nonNullExtendsNullable2")
  fun nonNullExtendsNullable2(
   @ObjCName("withId") s: ExtendsNullable
  ): ExtendsNullable

  @ObjCName("nullableExtendsNonNull1")
  fun nullableExtendsNonNull1(
   @ObjCName("withId") s: ExtendsNonNull?
  ): ExtendsNonNull?

  @ObjCName("nullableExtendsNonNull2")
  fun nullableExtendsNonNull2(
   @ObjCName("withId") s: ExtendsNonNull?
  ): ExtendsNonNull?

  @ObjCName("nonNullExtendsNonNull1")
  fun nonNullExtendsNonNull1(
   @ObjCName("withId") s: ExtendsNonNull
  ): ExtendsNonNull

  @ObjCName("nonNullExtendsNonNull2")
  fun nonNullExtendsNonNull2(
   @ObjCName("withId") s: ExtendsNonNull
  ): ExtendsNonNull

  @ObjCName("nonNullStringTransitive")
  fun nonNullStringTransitive(
   @ObjCName("withNSString") s: String
  ): String

  @ObjCName("nonNullStringDoubleOverride")
  fun nonNullStringDoubleOverride(
   @ObjCName("withNSString") s: String
  ): String
 }

 fun interface Interface {
  @ObjCName("nonNullStringDoubleOverride")
  fun nonNullStringDoubleOverride(
   @ObjCName("withNSString") s: String
  ): String
 }

 open inner class Subtype: NullabilityPropagation.NullabilityToPropagate<String?, String>, NullabilityPropagation.Interface {
  open override fun nullableString1(s: String?): String? {
   return s
  }

  open override fun nullableString2(s: String?): String {
   return s!!
  }

  open override fun nonNullString1(s: String): String {
   return s
  }

  open override fun nonNullString2(s: String): String {
   return s
  }

  open override fun nullableExtendsNullable1(s: String?): String? {
   return s
  }

  open override fun nullableExtendsNullable2(s: String?): String {
   return s!!
  }

  open override fun nonNullExtendsNullable1(s: String?): String? {
   return s
  }

  open override fun nonNullExtendsNullable2(s: String?): String {
   return s!!
  }

  open override fun nullableExtendsNonNull1(s: String?): String? {
   return s
  }

  open override fun nullableExtendsNonNull2(s: String?): String {
   return s!!
  }

  open override fun nonNullExtendsNonNull1(s: String): String {
   return s
  }

  open override fun nonNullExtendsNonNull2(s: String): String {
   return s
  }

  open override fun nonNullStringTransitive(s: String): String {
   return s
  }

  open override fun nonNullStringDoubleOverride(s: String): String {
   return s
  }
 }

 open inner class SubSubType: NullabilityPropagation.Subtype() {
  open override fun nonNullStringTransitive(s: String): String {
   return s
  }
 }
}
