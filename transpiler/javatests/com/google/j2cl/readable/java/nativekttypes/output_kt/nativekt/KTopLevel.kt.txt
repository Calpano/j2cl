// Generated from "nativekttypes/nativekt/KTopLevel.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress("REPEATED_BOUND", "UNNECESSARY_NOT_NULL_ASSERTION", "VARIABLE_WITH_REDUNDANT_INITIALIZER", "UNCHECKED_CAST", "PARAMETER_NAME_CHANGED_ON_OVERRIDE", "ALWAYS_NULL", "SENSELESS_COMPARISON", "UNUSED_PARAMETER")

package nativekttypes.nativekt

import javaemul.lang.*
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("NativekttypesNativektKTopLevel", exact = true)
open class KTopLevel<O> {
 @JvmField
 @ObjCName("instanceField_")
 var instanceField: O = null as O

 @JvmField
 @ObjCName("renamedField_")
 var renamedField: Int = 0

 @ObjCName("renamedMethod")
 open fun renamedMethod(): Int {
  return 0
 }

 @ObjCName("methodAsProperty")
 open val methodAsProperty: Int get() {
  return 0
 }

 @ObjCName("nonGetMethodAsProperty")
 open val nonGetMethodAsProperty: Int get() {
  return 0
 }

 @ObjCName("renamedMethodAsProperty")
 open val renamedMethodAsProperty: Int get() {
  return 0
 }

 @ObjCName("getRenamedMethodAsProperty")
 open val getRenamedMethodAsProperty: Int get() {
  return 0
 }

 @JvmField
 @ObjCName("isRenamedField_")
 var isRenamedField: Boolean = false

 @ObjCName("isMethodAsProperty")
 open val isMethodAsProperty: Boolean get() {
  return false
 }

 @ObjCName("getstartingmethodAsProperty")
 open val getstartingmethodAsProperty: Int get() {
  return 0
 }

 constructor(
  @ObjCName("Id") o: O
 )

 @ObjCName("instanceMethod")
 open fun instanceMethod(
  @ObjCName("withId") o: O
 ): O {
  return o
 }

 companion object {
  @JvmField
  @ObjCName("staticField_")
  var staticField: Any? = null

  @JvmStatic
  @ObjCName("staticMethod")
  fun <S> staticMethod(
   @ObjCName("withId") s: S
  ): S {
   return s
  }
 }

 @ObjCName("NativekttypesNativektKTopLevel_KNested", exact = true)
 open class KNested<N> {
  @JvmField
  @ObjCName("instanceField_")
  var instanceField: N = null as N

  constructor(
   @ObjCName("Id") n: N
  )

  @ObjCName("instanceMethod")
  open fun instanceMethod(
   @ObjCName("withId") n: N
  ): N {
   return n
  }

  @ObjCName("renamedMethod")
  open fun renamedMethod(): Int {
   return 0
  }

  companion object {
   @JvmField
   @ObjCName("staticField_")
   var staticField: Any? = null

   @JvmStatic
   @ObjCName("staticMethod")
   fun <S> staticMethod(
    @ObjCName("withId") s: S
   ): S {
    return s
   }
  }
 }

 @ObjCName("NativekttypesNativektKTopLevel_KInner", exact = true)
 open inner class KInner<I>(
  @ObjCName("Id") i: I
 ) {}
}
