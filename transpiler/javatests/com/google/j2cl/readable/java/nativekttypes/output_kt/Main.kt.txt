package nativekttypes

import javaemul.lang.*
import kotlin.jvm.*

open class Main {
 @kotlin.jvm.JvmField var topLevelField: nativekttypes.nativekt.KTopLevel<kotlin.String?>? = null

 @kotlin.jvm.JvmField var nestedField: nativekttypes.nativekt.KTopLevel.KNested<kotlin.String?>? = null

 @kotlin.jvm.JvmField var innerField: nativekttypes.nativekt.KTopLevel<kotlin.String?>.KInner<kotlin.String?>? = null

 open fun methodArguments(foo: nativekttypes.nativekt.KTopLevel<kotlin.String?>?, nested: nativekttypes.nativekt.KTopLevel.KNested<kotlin.String?>?, inner: nativekttypes.nativekt.KTopLevel<kotlin.String?>.KInner<kotlin.String?>?) {}

 open fun memberAccess() {
  val topLevel: nativekttypes.nativekt.KTopLevel<kotlin.String?>? = nativekttypes.nativekt.KTopLevel<kotlin.String?>("foo")
  val fooInstanceMethod: kotlin.String? = topLevel!!.instanceMethod("foo")
  val fooStaticMethod: kotlin.String? = nativekttypes.nativekt.KTopLevel.staticMethod("foo")
  val fooInstanceField: kotlin.String? = topLevel!!.instanceField
  topLevel!!.instanceField = "foo"
  val fooStaticField: kotlin.Any? = nativekttypes.nativekt.KTopLevel.staticField
  nativekttypes.nativekt.KTopLevel.staticField = "foo"
  val i1: kotlin.Int = topLevel!!.renamedField
  val i2: kotlin.Int = topLevel!!.renamedMethod()
  val i3: kotlin.Int = topLevel!!.methodAsProperty
  val i4: kotlin.Int = topLevel!!.nonGetMethodAsProperty
  val i5: kotlin.Int = topLevel!!.renamedMethodAsProperty
  val i6: kotlin.Boolean = topLevel!!.isRenamedField
  val i7: kotlin.Boolean = topLevel!!.isMethodAsProperty
  val i8: kotlin.Int = topLevel!!.getstartingmethodAsProperty
  val nested: nativekttypes.nativekt.KTopLevel.KNested<kotlin.String?>? = nativekttypes.nativekt.KTopLevel.KNested<kotlin.String?>("foo")
  val nestedInstanceMethod: kotlin.String? = nested!!.instanceMethod("foo")
  val nestedStaticMethod: kotlin.String? = nativekttypes.nativekt.KTopLevel.KNested.staticMethod("foo")
  val nestedInstanceField: kotlin.String? = nested!!.instanceField
  nested!!.instanceField = "foo"
  val nestedStaticField: kotlin.Any? = nativekttypes.nativekt.KTopLevel.KNested.staticField
  nativekttypes.nativekt.KTopLevel.KNested.staticField = "foo"
  val inner: nativekttypes.nativekt.KTopLevel<kotlin.String?>.KInner<kotlin.String?>? = topLevel!!.KInner<kotlin.String?>("foo")
  val subclass: nativekttypes.Subclass<kotlin.String?>? = nativekttypes.Subclass<kotlin.String?>("foo")
  val i9: kotlin.Int = subclass!!.renamedMethod()
  val i10: kotlin.Int = subclass!!.interfaceMethod()
  val i11: kotlin.Int = subclass!!.renamedInterfaceMethod()
 }

 open fun typeLiterals() {
  val c1: java.lang.Class<*>? = nativekttypes.nativekt.KTopLevel::class.java
  val c2: java.lang.Class<*>? = nativekttypes.nativekt.KTopLevel.KNested::class.java
  val c3: java.lang.Class<*>? = nativekttypes.nativekt.KTopLevel.KInner::class.java
 }

 open fun casts() {
  val o1: nativekttypes.nativekt.KTopLevel<kotlin.String?>? = null as nativekttypes.nativekt.KTopLevel<kotlin.String?>?
  val o2: nativekttypes.nativekt.KTopLevel.KNested<kotlin.String?>? = null as nativekttypes.nativekt.KTopLevel.KNested<kotlin.String?>?
  val o3: nativekttypes.nativekt.KTopLevel<kotlin.String?>.KInner<kotlin.String?>? = null as nativekttypes.nativekt.KTopLevel<kotlin.String?>.KInner<kotlin.String?>?
 }

 open fun disabledVoidMethod() {}

 open fun disabledNonVoidMethod(): kotlin.Boolean {
  return false
 }
}

open class Subclass<V>: nativekttypes.nativekt.KInterface<V>, nativekttypes.nativekt.KTopLevel<V> {
 constructor(v: V?): super(v)

 open override fun renamedMethod(): kotlin.Int {
  return super.renamedMethod()
 }

 open override val methodAsProperty: kotlin.Int get() {
  return super.methodAsProperty
 }

 open override val nonGetMethodAsProperty: kotlin.Int get() {
  return super.nonGetMethodAsProperty
 }

 open override val renamedMethodAsProperty: kotlin.Int get() {
  return super.renamedMethodAsProperty
 }

 open override val getRenamedMethodAsProperty: kotlin.Int get() {
  return super.getRenamedMethodAsProperty
 }

 open override val isMethodAsProperty: kotlin.Boolean get() {
  return super.isMethodAsProperty
 }

 open override val getstartingmethodAsProperty: kotlin.Int get() {
  return super.getstartingmethodAsProperty
 }

 open override fun interfaceMethod(): kotlin.Int {
  return 0
 }

 open override fun renamedInterfaceMethod(): kotlin.Int {
  return 0
 }

 open override val interfaceMethodAsProperty: kotlin.Int get() {
  return 0
 }

 open override val renamedInterfaceMethodAsProperty: kotlin.Int get() {
  return 0
 }
}
