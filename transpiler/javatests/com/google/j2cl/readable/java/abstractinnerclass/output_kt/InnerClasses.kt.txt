// Generated from "abstractinnerclass/InnerClasses.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress("REPEATED_BOUND", "UNNECESSARY_NOT_NULL_ASSERTION", "VARIABLE_WITH_REDUNDANT_INITIALIZER", "UNCHECKED_CAST", "PARAMETER_NAME_CHANGED_ON_OVERRIDE", "ALWAYS_NULL", "SENSELESS_COMPARISON", "UNUSED_PARAMETER")

package abstractinnerclass

import javaemul.lang.*
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName

@ObjCName("AbstractinnerclassInnerClasses", exact = true)
open class InnerClasses {
 fun interface A {
  @ObjCName("foo")
  fun foo()
 }

 abstract class B: InnerClasses.A {
  @HiddenFromObjC
  open fun bar_pp_abstractinnerclass() {
   this.foo()
  }
 }

 abstract inner class C: InnerClasses.A {
  @HiddenFromObjC
  open fun bar_pp_abstractinnerclass() {
   this.foo()
  }
 }
}
