package abstractinnerclass

open class InnerClasses {}

interface `InnerClasses$A` {
 fun foo()
}

abstract class `InnerClasses$B`: abstractinnerclass.`InnerClasses$A` {
 internal open fun bar() {
  this.foo()
 }
}

abstract class `InnerClasses$C`: abstractinnerclass.`InnerClasses$A` {
 @JvmField val `this`: abstractinnerclass.InnerClasses?

 internal open fun bar() {
  this.foo()
 }
}
