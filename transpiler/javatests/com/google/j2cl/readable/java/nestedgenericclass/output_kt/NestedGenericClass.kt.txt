package nestedgenericclass

open class NestedGenericClass<T_2> {
 constructor(): super()

 open fun <S> `fun`(t: S?) {
  if (true) {}
  if (true) {}
  nestedgenericclass.`NestedGenericClass$1E`<kotlin.Number?, S, T_2>(this)
  nestedgenericclass.`NestedGenericClass$1F`<S, T_2>(this)
 }

 open fun <T_1> bar() {
  if (true) {}
  nestedgenericclass.`NestedGenericClass$1G`<java.lang.Error?, T_1, T_2>(this).bar()
 }

 open fun test() {
  val n: nestedgenericclass.NestedGenericClass<kotlin.Number?>? = nestedgenericclass.NestedGenericClass<kotlin.Number?>()
  val a: nestedgenericclass.`NestedGenericClass$A`<java.lang.Error?, kotlin.Number?>? = nestedgenericclass.`NestedGenericClass$A`<java.lang.Error?, kotlin.Number?>(n)
  val b: nestedgenericclass.`NestedGenericClass$A$B`<java.lang.Exception?, java.lang.Error?, kotlin.Number?>? = nestedgenericclass.`NestedGenericClass$A$B`<java.lang.Exception?, java.lang.Error?, kotlin.Number?>(a)
  nestedgenericclass.`NestedGenericClass$C`<kotlin.Number?>(n)
  nestedgenericclass.`NestedGenericClass$C$D`<kotlin.Number?>(nestedgenericclass.`NestedGenericClass$C`<kotlin.Number?>(n))
 }
}

open class `NestedGenericClass$A$B`<T, T, T_2> {
 @JvmField val `this`: nestedgenericclass.`NestedGenericClass$A`<T, T_2>?

 internal constructor(`$outer_this`: nestedgenericclass.`NestedGenericClass$A`<T, T_2>?): super() {
  this.`this` = `$outer_this`
 }

 internal constructor(`$outer_this`: nestedgenericclass.`NestedGenericClass$A`<T, T_2>?, u: U?): super() {
  this.`this` = `$outer_this`
 }
}

open class `NestedGenericClass$A`<T, T_2> {
 @JvmField val `this`: nestedgenericclass.NestedGenericClass<T_2>?

 constructor(`$outer_this`: nestedgenericclass.NestedGenericClass<T_2>?): super() {
  this.`this` = `$outer_this`
 }
}

open class `NestedGenericClass$C$D`<T_2> {
 @JvmField val `this`: nestedgenericclass.`NestedGenericClass$C`<T_2>?

 constructor(`$outer_this`: nestedgenericclass.`NestedGenericClass$C`<T_2>?): super() {
  this.`this` = `$outer_this`
 }

 @JvmField var d: T_2? = null
}

open class `NestedGenericClass$C`<T_2> {
 @JvmField val `this`: nestedgenericclass.NestedGenericClass<T_2>?

 constructor(`$outer_this`: nestedgenericclass.NestedGenericClass<T_2>?): super() {
  this.`this` = `$outer_this`
 }

 @JvmField var c: T_2? = null
}

open class `NestedGenericClass$1E`<S, S, T_2> {
 @JvmField val `this`: nestedgenericclass.NestedGenericClass<T_2>?

 internal constructor(`$outer_this`: nestedgenericclass.NestedGenericClass<T_2>?): super() {
  this.`this` = `$outer_this`
 }
}

open class `NestedGenericClass$1F`<S, T_2> {
 @JvmField val `this`: nestedgenericclass.NestedGenericClass<T_2>?

 internal constructor(`$outer_this`: nestedgenericclass.NestedGenericClass<T_2>?): super() {
  this.`this` = `$outer_this`
 }

 @JvmField var f: S? = null
}

open class `NestedGenericClass$1G$1H`<T, T_3, T, T_1, T_2> {
 @JvmField val `this`: nestedgenericclass.`NestedGenericClass$1G`<T, T_1, T_2>?

 internal constructor(`$outer_this`: nestedgenericclass.`NestedGenericClass$1G`<T, T_1, T_2>?): super() {
  this.`this` = `$outer_this`
 }
}

open class `NestedGenericClass$1G`<T, T_1, T_2> {
 @JvmField val `this`: nestedgenericclass.NestedGenericClass<T_2>?

 internal constructor(`$outer_this`: nestedgenericclass.NestedGenericClass<T_2>?): super() {
  this.`this` = `$outer_this`
 }

 open fun <T_3> bar() {
  if (true) {}
  nestedgenericclass.`NestedGenericClass$1G$1H`<kotlin.Number?, T_3, T, T_1, T_2>(this)
 }
}
