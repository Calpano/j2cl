package nestedgenericclass

open class NestedGenericClass {
 open fun `fun`(t: S) {
  TODO("expression.qualify needs rendering: NestedGenericClass.this)")
  TODO("expression.qualify needs rendering: NestedGenericClass.this)")
 }

 open fun bar() {
  TODO("expression.qualify needs rendering: NestedGenericClass.this)").bar()
 }

 open fun test() {
  val n: nestedgenericclass.NestedGenericClass<Number?>? = nestedgenericclass.NestedGenericClass<Number?>()
  val a: nestedgenericclass.NestedGenericClass.A<Error?, Number?>? = TODO("expression.qualify needs rendering: n)")
  val b: nestedgenericclass.NestedGenericClass.A.B<Exception?, Error?, Number?>? = TODO("expression.qualify needs rendering: a)")
  TODO("expression.qualify needs rendering: n)")
  TODO("expression.qualify needs rendering: n.new C.<init>())")
 }
}

open class A {
 val `this`: nestedgenericclass.NestedGenericClass<T>?
}

open class B {
 val `this`: nestedgenericclass.NestedGenericClass.A<T, T>?

 internal constructor() {}

 internal constructor(u: U) {}
}

open class C {
 val `this`: nestedgenericclass.NestedGenericClass<T>?

 var c: T
}

open class D {
 val `this`: nestedgenericclass.NestedGenericClass.C<T>?

 var d: T
}

open class `1E` {
 val `this`: nestedgenericclass.NestedGenericClass<T>?
}

open class `1F` {
 val `this`: nestedgenericclass.NestedGenericClass<T>?

 var f: S
}

open class `1G` {
 val `this`: nestedgenericclass.NestedGenericClass<T>?

 open fun bar() {
  TODO("expression.qualify needs rendering: \$1G.this)")
 }
}

open class `1H` {
 val `this`: nestedgenericclass.NestedGenericClass.`1G`<T, T, T>?
}
