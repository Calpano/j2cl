// Generated from "nestedgenericclass/NestedGenericClass.java"
package nestedgenericclass

import javaemul.lang.*
import kotlin.jvm.*

open class NestedGenericClass<T> {
 open fun <S> `fun`(t: S) {
  open class ___1E<S> {}
  open class ___1F {
   @kotlin.jvm.JvmField var f: S = null as S
  }
  ___1E<kotlin.Number?>()
  ___1F()
 }

 open fun <T_1> bar() {
  open class ___1G<T> {
   open fun <T_1> bar() {
    open class ___1H<T> {}
    ___1H<kotlin.Number?>()
   }
  }
  ___1G<kotlin.Error?>().bar<kotlin.Any?>()
 }

 open fun test() {
  val n: nestedgenericclass.NestedGenericClass<kotlin.Number?>? = nestedgenericclass.NestedGenericClass<kotlin.Number?>()
  val a: nestedgenericclass.NestedGenericClass<kotlin.Number?>.A<kotlin.Error?>? = n!!.A<kotlin.Error?>()
  val b: nestedgenericclass.NestedGenericClass<kotlin.Number?>.A<kotlin.Error?>.B<kotlin.Exception?>? = a!!.B<kotlin.Exception?>()
  n!!.C()
  n!!.C().D()
 }

 open inner class A<T> {
  open inner class B<T> {
   constructor()
  }
 }

 open inner class C {
  @kotlin.jvm.JvmField var c: T = null as T

  open inner class D {
   @kotlin.jvm.JvmField var d: T = null as T
  }
 }

 open inner class RecursiveTypeVariable<T: nestedgenericclass.NestedGenericClass<T>.RecursiveTypeVariable<T>?> {
  open fun test() {
   val t: T = null as T
   t!!.Inner()
  }

  open inner class Inner {}
 }
}
