;;; Code for packageinfo.package-info
;;; Code for packageinfo.Outer

;;; CLASS  Outer
(type $packageinfo.Outer (struct
 (field $vtable (ref null $packageinfo.Outer.vtable))
))
(type $packageinfo.Outer.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))
(global $packageinfo.Outer.vtable (mut (ref null $packageinfo.Outer.vtable)) (ref.null $packageinfo.Outer.vtable))

;;; Outer()
(func $m_<init>__void@packageinfo.Outer
 (param $this (ref null $packageinfo.Outer))
 (result (ref null $packageinfo.Outer))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; CLASS  Inner
(type $packageinfo.Outer.Inner (struct
 (field $vtable (ref null $packageinfo.Outer.Inner.vtable))
 (field $this@packageinfo.Outer.Inner (mut (ref null $packageinfo.Outer)))
))
(type $packageinfo.Outer.Inner.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))
(global $packageinfo.Outer.Inner.vtable (mut (ref null $packageinfo.Outer.Inner.vtable)) (ref.null $packageinfo.Outer.Inner.vtable))

;;; Inner()
(func $m_<init>__void@packageinfo.Outer.Inner
 (param $this (ref null $packageinfo.Outer.Inner))
 (result (ref null $packageinfo.Outer.Inner))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)
;;; Code for packageinfo.subpackage.Foo

;;; CLASS  Foo
(type $packageinfo.subpackage.Foo (struct
 (field $vtable (ref null $packageinfo.subpackage.Foo.vtable))
 (field $outer@packageinfo.subpackage.Foo (mut (ref null $packageinfo.Outer)))
))
(type $packageinfo.subpackage.Foo.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))
(global $packageinfo.subpackage.Foo.vtable (mut (ref null $packageinfo.subpackage.Foo.vtable)) (ref.null $packageinfo.subpackage.Foo.vtable))

;;; Foo()
(func $m_<init>__void@packageinfo.subpackage.Foo
 (param $this (ref null $packageinfo.subpackage.Foo))
 (result (ref null $packageinfo.subpackage.Foo))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; Code for packageinfo.Outer [vtable]
 (global.set $packageinfo.Outer.vtable (struct.new_with_rtt $packageinfo.Outer.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (rtt.canon $packageinfo.Outer.vtable)))
;;; Code for packageinfo.Outer.Inner [vtable]
 (global.set $packageinfo.Outer.Inner.vtable (struct.new_with_rtt $packageinfo.Outer.Inner.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (rtt.canon $packageinfo.Outer.Inner.vtable)))
;;; Code for packageinfo.subpackage.Foo [vtable]
 (global.set $packageinfo.subpackage.Foo.vtable (struct.new_with_rtt $packageinfo.subpackage.Foo.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (rtt.canon $packageinfo.subpackage.Foo.vtable)))
))
(start $.runtime.init)

