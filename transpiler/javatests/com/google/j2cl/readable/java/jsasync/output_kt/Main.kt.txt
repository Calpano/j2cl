// Generated from "jsasync/Main.java"
package jsasync

import javaemul.lang.*
import kotlin.jvm.*

open class Main {
 @kotlin.jvm.JvmField val x: jsasync.Main.IThenable<kotlin.Int?>? = jsasync.Main.Promise.resolve<kotlin.Int?>(kotlin.Int.valueOf(10))

 open fun emptyAsyncMethod(): jsasync.Main.IThenable<kotlin.Unit?>? {
  return null
 }

 open fun asyncMethod(): jsasync.Main.IThenable<kotlin.Int?>? {
  val result: kotlin.Int = jsasync.Main.await<kotlin.Int?>(jsasync.Main.Promise.resolve<kotlin.Int?>(kotlin.Int.valueOf(7)))!!.toInt()
  return this.parametricAsyncMethod<kotlin.Int?>(kotlin.Int.valueOf(result))
 }

 open fun <T> parametricAsyncMethod(value: T): jsasync.Main.IThenable<T>? {
  return jsasync.Main.Promise.resolve<T>(jsasync.Main.await<T>(jsasync.Main.Promise.resolve<T>(value)))
 }

 open fun testAsyncLambdas() {
  val i: jsasync.Main.AsyncInterface? = jsasync.Main.AsyncInterface {
   return@AsyncInterface jsasync.Main.Promise.resolve<kotlin.Int?>(jsasync.Main.await<kotlin.Int?>(jsasync.Main.Promise.resolve<kotlin.Int?>(kotlin.Int.valueOf(5))))
  }
  val o: jsasync.Main.BaseInterface? = object : jsasync.Main.BaseInterface {
   open override fun asyncCall(): jsasync.Main.IThenable<kotlin.Int?>? {
    return jsasync.Main.Promise.resolve<kotlin.Int?>(jsasync.Main.await<kotlin.Int?>(this@Main.x))
   }
  }
  val j: jsasync.Main.AsyncJsFunctionInterface? = jsasync.Main.AsyncJsFunctionInterface {
   return@AsyncJsFunctionInterface jsasync.Main.Promise.resolve<kotlin.Int?>(jsasync.Main.await<kotlin.Int?>(jsasync.Main.Promise.resolve<kotlin.Int?>(kotlin.Int.valueOf(5))))
  }
  val optimizableJsFunction: jsasync.Main.JsFunctionInterface? = object : jsasync.Main.JsFunctionInterface {
   open override fun doSomething(): jsasync.Main.IThenable<kotlin.Int?>? {
    return jsasync.Main.Promise.resolve<kotlin.Int?>(kotlin.Int.valueOf(5))
   }
  }
  val unoptimizableJsFunction: jsasync.Main.JsFunctionInterface? = object : jsasync.Main.JsFunctionInterface {
   open override fun doSomething(): jsasync.Main.IThenable<kotlin.Int?>? {
    val tmp: jsasync.Main.JsFunctionInterface? = this
    return jsasync.Main.Promise.resolve<kotlin.Int?>(jsasync.Main.await<kotlin.Int?>(this@Main.x))
   }
  }
 }

 companion object {
  @kotlin.jvm.JvmStatic
  fun staticAsyncMethod(): jsasync.Main.IThenable<kotlin.Unit?>? {
   return jsasync.Main.Promise.resolve<kotlin.Unit?>(jsasync.Main.await<kotlin.Unit?>(jsasync.Main.Promise.resolve<kotlin.Unit?>(null as kotlin.Unit?)))
  }

  @kotlin.jvm.JvmStatic
  external fun <T> await(thenable: jsasync.Main.IThenable<T>?): T
 }

 fun interface BaseInterface {
  fun asyncCall(): jsasync.Main.IThenable<kotlin.Int?>?
 }

 fun interface AsyncInterface: jsasync.Main.BaseInterface {
  override fun asyncCall(): jsasync.Main.IThenable<kotlin.Int?>?
 }

 interface InterfaceWithAsyncDefaultMethod {
  fun asyncCall(): jsasync.Main.IThenable<kotlin.Int?>? {
   return jsasync.Main.Promise.resolve<kotlin.Int?>(jsasync.Main.await<kotlin.Int?>(jsasync.Main.Promise.resolve<kotlin.Int?>(kotlin.Int.valueOf(5))))
  }
 }

 fun interface JsFunctionInterface {
  fun doSomething(): jsasync.Main.IThenable<kotlin.Int?>?
 }

 fun interface AsyncJsFunctionInterface {
  fun doSomething(): jsasync.Main.IThenable<kotlin.Int?>?
 }

 interface IThenable<T> {}

 open class Promise<T>: jsasync.Main.IThenable<T> {
  companion object {
   @kotlin.jvm.JvmStatic
   external fun <T> resolve(value: T): jsasync.Main.Promise<T>?
  }
 }
}
