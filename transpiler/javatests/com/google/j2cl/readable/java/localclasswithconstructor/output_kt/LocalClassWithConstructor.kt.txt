package localclasswithconstructor

open class LocalClassWithConstructor {
 constructor(): super()

 open fun test(p: Int) {
  var localVar: Int = 1
  localclasswithconstructor.`LocalClassWithConstructor$1LocalClass`(this, localVar, p, 1)
 }
}

open class `LocalClassWithConstructor$1LocalClass` {
 @JvmField val `this`: localclasswithconstructor.LocalClassWithConstructor?

 @JvmField var field: Int = 0

 constructor(`$outer_this`: localclasswithconstructor.LocalClassWithConstructor?, `$captured_localVar`: Int, `$captured_p`: Int, a: Int, b: Int): super() {
  this.`this` = `$outer_this`
  this.localVar = `$captured_localVar`
  this.p = `$captured_p`
  this.field = `$captured_localVar` + a + b
 }

 constructor(`$outer_this`: localclasswithconstructor.LocalClassWithConstructor?, `$captured_localVar`: Int, `$captured_p`: Int, a: Int): this(`$outer_this`, `$captured_localVar`, `$captured_p`, a, `$captured_p`) {
  this.field = `$captured_localVar`
 }

 @JvmField val localVar: Int

 @JvmField val p: Int
}
