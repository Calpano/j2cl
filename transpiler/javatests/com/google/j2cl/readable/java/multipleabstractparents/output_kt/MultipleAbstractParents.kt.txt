package multipleabstractparents

open class MultipleAbstractParents {
 companion object {
  @JvmStatic
  fun main(vararg args: String?) {
   assert(multipleabstractparents.`MultipleAbstractParents$ArrayList`<String?>().getFoo(null)!!.equals("AbstractCollection"))
   assert(multipleabstractparents.`MultipleAbstractParents$StringList`().getFoo(null)!!.equals("AbstractCollection"))
   assert((multipleabstractparents.`MultipleAbstractParents$StringList`() as multipleabstractparents.`MultipleAbstractParents$IStringList`?)!!.getFoo(null)!!.equals("AbstractCollection"))
  }
 }
}

interface `MultipleAbstractParents$List`<T> {
 fun getFoo(t: T?): String?
}

interface `MultipleAbstractParents$Collection`<T> {
 fun getFoo(t: T?): String?
}

abstract class `MultipleAbstractParents$AbstractListCollection`<T>: multipleabstractparents.`MultipleAbstractParents$List`<T>, multipleabstractparents.`MultipleAbstractParents$Collection`<T> {}

abstract class `MultipleAbstractParents$AbstractCollection`<T> {
 open fun getFoo(t: T?): String? {
  return "AbstractCollection"
 }
}

abstract class `MultipleAbstractParents$AbstractList`<T>: multipleabstractparents.`MultipleAbstractParents$List`<T>, multipleabstractparents.`MultipleAbstractParents$AbstractCollection`<T>() {}

abstract class `MultipleAbstractParents$AbstractList2`<T>: multipleabstractparents.`MultipleAbstractParents$List`<T> {}

open class `MultipleAbstractParents$ArrayList`<T>: multipleabstractparents.`MultipleAbstractParents$AbstractList`<T>() {}

interface `MultipleAbstractParents$IStringList`: multipleabstractparents.`MultipleAbstractParents$List`<String?> {
 override fun getFoo(string: String?): String?
}

abstract class `MultipleAbstractParents$AbstractStringList`: multipleabstractparents.`MultipleAbstractParents$IStringList`, multipleabstractparents.`MultipleAbstractParents$AbstractList`<String?>() {}

abstract class `MultipleAbstractParents$AbstractStringList2`: multipleabstractparents.`MultipleAbstractParents$IStringList`, multipleabstractparents.`MultipleAbstractParents$AbstractList2`<String?>() {}

abstract class `MultipleAbstractParents$AbstractStringList3`: multipleabstractparents.`MultipleAbstractParents$AbstractList2`<String?>() {}

open class `MultipleAbstractParents$StringList`: multipleabstractparents.`MultipleAbstractParents$AbstractStringList`() {}

open class `MultipleAbstractParents$StringListChild`: multipleabstractparents.`MultipleAbstractParents$StringList`() {}
