goog.module('multipleabstractparents.MultipleAbstractParents.AbstractListCollection$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const Collection = goog.require('multipleabstractparents.MultipleAbstractParents.Collection$impl');
const List = goog.require('multipleabstractparents.MultipleAbstractParents.List$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

/**
 * @abstract
 * @template T
 * @implements {List<T>}
 * @implements {Collection<T>}
 */
class AbstractListCollection extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts */
 $ctor__multipleabstractparents_MultipleAbstractParents_AbstractListCollection__() {
  this.$ctor__java_lang_Object__();
 }
 /** @nodts */
 static $clinit() {
  AbstractListCollection.$clinit = () =>{};
  AbstractListCollection.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof AbstractListCollection;
 }
 
 /** @nodts */
 static $loadModules() {}
}
List.$markImplementor(AbstractListCollection);
Collection.$markImplementor(AbstractListCollection);
$Util.$setClassMetadata(AbstractListCollection, 'multipleabstractparents.MultipleAbstractParents$AbstractListCollection');

exports = AbstractListCollection;

//# sourceMappingURL=MultipleAbstractParents$AbstractListCollection.js.map
