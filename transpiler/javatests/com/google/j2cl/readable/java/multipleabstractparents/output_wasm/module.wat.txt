;;; Code for multipleabstractparents.MultipleAbstractParents [vtable]
(global $multipleabstractparents.MultipleAbstractParents.vtable (mut (ref null $multipleabstractparents.MultipleAbstractParents.vtable)) (ref.null $multipleabstractparents.MultipleAbstractParents.vtable))

;;; Code for multipleabstractparents.MultipleAbstractParents.AbstractListCollection [vtable]
(global $multipleabstractparents.MultipleAbstractParents.AbstractListCollection.vtable (mut (ref null $multipleabstractparents.MultipleAbstractParents.AbstractListCollection.vtable)) (ref.null $multipleabstractparents.MultipleAbstractParents.AbstractListCollection.vtable))

;;; Code for multipleabstractparents.MultipleAbstractParents.AbstractCollection [vtable]
(global $multipleabstractparents.MultipleAbstractParents.AbstractCollection.vtable (mut (ref null $multipleabstractparents.MultipleAbstractParents.AbstractCollection.vtable)) (ref.null $multipleabstractparents.MultipleAbstractParents.AbstractCollection.vtable))

;;; Code for multipleabstractparents.MultipleAbstractParents.AbstractList [vtable]
(global $multipleabstractparents.MultipleAbstractParents.AbstractList.vtable (mut (ref null $multipleabstractparents.MultipleAbstractParents.AbstractList.vtable)) (ref.null $multipleabstractparents.MultipleAbstractParents.AbstractList.vtable))

;;; Code for multipleabstractparents.MultipleAbstractParents.AbstractList2 [vtable]
(global $multipleabstractparents.MultipleAbstractParents.AbstractList2.vtable (mut (ref null $multipleabstractparents.MultipleAbstractParents.AbstractList2.vtable)) (ref.null $multipleabstractparents.MultipleAbstractParents.AbstractList2.vtable))

;;; Code for multipleabstractparents.MultipleAbstractParents.ArrayList [vtable]
(global $multipleabstractparents.MultipleAbstractParents.ArrayList.vtable (mut (ref null $multipleabstractparents.MultipleAbstractParents.ArrayList.vtable)) (ref.null $multipleabstractparents.MultipleAbstractParents.ArrayList.vtable))

;;; Code for multipleabstractparents.MultipleAbstractParents.AbstractStringList [vtable]
(global $multipleabstractparents.MultipleAbstractParents.AbstractStringList.vtable (mut (ref null $multipleabstractparents.MultipleAbstractParents.AbstractStringList.vtable)) (ref.null $multipleabstractparents.MultipleAbstractParents.AbstractStringList.vtable))

;;; Code for multipleabstractparents.MultipleAbstractParents.AbstractStringList2 [vtable]
(global $multipleabstractparents.MultipleAbstractParents.AbstractStringList2.vtable (mut (ref null $multipleabstractparents.MultipleAbstractParents.AbstractStringList2.vtable)) (ref.null $multipleabstractparents.MultipleAbstractParents.AbstractStringList2.vtable))

;;; Code for multipleabstractparents.MultipleAbstractParents.AbstractStringList3 [vtable]
(global $multipleabstractparents.MultipleAbstractParents.AbstractStringList3.vtable (mut (ref null $multipleabstractparents.MultipleAbstractParents.AbstractStringList3.vtable)) (ref.null $multipleabstractparents.MultipleAbstractParents.AbstractStringList3.vtable))

;;; Code for multipleabstractparents.MultipleAbstractParents.StringList [vtable]
(global $multipleabstractparents.MultipleAbstractParents.StringList.vtable (mut (ref null $multipleabstractparents.MultipleAbstractParents.StringList.vtable)) (ref.null $multipleabstractparents.MultipleAbstractParents.StringList.vtable))

;;; Code for multipleabstractparents.MultipleAbstractParents.StringListChild [vtable]
(global $multipleabstractparents.MultipleAbstractParents.StringListChild.vtable (mut (ref null $multipleabstractparents.MultipleAbstractParents.StringListChild.vtable)) (ref.null $multipleabstractparents.MultipleAbstractParents.StringListChild.vtable))

;;; Code for multipleabstractparents.MultipleAbstractParents [static fields]
(global $f_$initialized__multipleabstractparents_MultipleAbstractParents (mut i32) (i32.const 0))

;;; Code for multipleabstractparents.MultipleAbstractParents.List [static fields]
(global $f_$initialized__multipleabstractparents_MultipleAbstractParents_List (mut i32) (i32.const 0))

;;; Code for multipleabstractparents.MultipleAbstractParents.Collection [static fields]
(global $f_$initialized__multipleabstractparents_MultipleAbstractParents_Collection (mut i32) (i32.const 0))

;;; Code for multipleabstractparents.MultipleAbstractParents.AbstractListCollection [static fields]
(global $f_$initialized__multipleabstractparents_MultipleAbstractParents_AbstractListCollection (mut i32) (i32.const 0))

;;; Code for multipleabstractparents.MultipleAbstractParents.AbstractCollection [static fields]
(global $f_$initialized__multipleabstractparents_MultipleAbstractParents_AbstractCollection (mut i32) (i32.const 0))

;;; Code for multipleabstractparents.MultipleAbstractParents.AbstractList [static fields]
(global $f_$initialized__multipleabstractparents_MultipleAbstractParents_AbstractList (mut i32) (i32.const 0))

;;; Code for multipleabstractparents.MultipleAbstractParents.AbstractList2 [static fields]
(global $f_$initialized__multipleabstractparents_MultipleAbstractParents_AbstractList2 (mut i32) (i32.const 0))

;;; Code for multipleabstractparents.MultipleAbstractParents.ArrayList [static fields]
(global $f_$initialized__multipleabstractparents_MultipleAbstractParents_ArrayList (mut i32) (i32.const 0))

;;; Code for multipleabstractparents.MultipleAbstractParents.IStringList [static fields]
(global $f_$initialized__multipleabstractparents_MultipleAbstractParents_IStringList (mut i32) (i32.const 0))

;;; Code for multipleabstractparents.MultipleAbstractParents.AbstractStringList [static fields]
(global $f_$initialized__multipleabstractparents_MultipleAbstractParents_AbstractStringList (mut i32) (i32.const 0))

;;; Code for multipleabstractparents.MultipleAbstractParents.AbstractStringList2 [static fields]
(global $f_$initialized__multipleabstractparents_MultipleAbstractParents_AbstractStringList2 (mut i32) (i32.const 0))

;;; Code for multipleabstractparents.MultipleAbstractParents.AbstractStringList3 [static fields]
(global $f_$initialized__multipleabstractparents_MultipleAbstractParents_AbstractStringList3 (mut i32) (i32.const 0))

;;; Code for multipleabstractparents.MultipleAbstractParents.StringList [static fields]
(global $f_$initialized__multipleabstractparents_MultipleAbstractParents_StringList (mut i32) (i32.const 0))

;;; Code for multipleabstractparents.MultipleAbstractParents.StringListChild [static fields]
(global $f_$initialized__multipleabstractparents_MultipleAbstractParents_StringListChild (mut i32) (i32.const 0))

;;; Code for multipleabstractparents.MultipleAbstractParents [CLASS]
(type $multipleabstractparents.MultipleAbstractParents (struct
 (field $vtable (ref null $multipleabstractparents.MultipleAbstractParents.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $multipleabstractparents.MultipleAbstractParents.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))

;;; MultipleAbstractParents()
(func $m_<init>__void@multipleabstractparents.MultipleAbstractParents
 (param $this (ref null $multipleabstractparents.MultipleAbstractParents))
 (result (ref null $multipleabstractparents.MultipleAbstractParents))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void MultipleAbstractParents.main(String... args)
(func $m_main__arrayOf_java_lang_String__void@multipleabstractparents.MultipleAbstractParents
 (param $args (ref null $Object.array))
 (local $$qualifier (ref null $java.lang.String))
 (local $$qualifier_1 (ref null $multipleabstractparents.MultipleAbstractParents.ArrayList))
 (local $$array_literal (ref null $char.array))
 (local $$qualifier_2 (ref null $java.lang.String))
 (local $$qualifier_3 (ref null $multipleabstractparents.MultipleAbstractParents.StringList))
 (local $$array_literal_1 (ref null $char.array))
 (local $$qualifier_4 (ref null $java.lang.String))
 (local $$qualifier_5 (ref null $java.lang.Object))
 (local $$array_literal_2 (ref null $char.array))
 (block $return.label
  (block
   ;; multipleabstractparents.MultipleAbstractParents.$clinit();
   (call $$clinit__void@multipleabstractparents.MultipleAbstractParents )
   ;; assert (String $qualifier = (ArrayList<String> $qualifier = new ArrayList.<init>(),$qualifier.getFoo(null)),$qualifier.equals(java.lang.String.fromInternalArray((char[] $array_literal = new char[18],($array_literal[0] = 65),($array_literal[1] = 98),($array_literal[2] = 115),($array_literal[3] = 116),($array_literal[4] = 114),($array_literal[5] = 97),($array_literal[6] = 99),($array_literal[7] = 116),($array_literal[8] = 67),($array_literal[9] = 111),($array_literal[10] = 108),($array_literal[11] = 108),($array_literal[12] = 101),($array_literal[13] = 99),($array_literal[14] = 116),($array_literal[15] = 105),($array_literal[16] = 111),($array_literal[17] = 110),$array_literal))));
   ;; unimplemented statement AssertStatement
   ;; assert (String $qualifier = (StringList $qualifier = new StringList.<init>(),$qualifier.getFoo(null)),$qualifier.equals(java.lang.String.fromInternalArray((char[] $array_literal = new char[18],($array_literal[0] = 65),($array_literal[1] = 98),($array_literal[2] = 115),($array_literal[3] = 116),($array_literal[4] = 114),($array_literal[5] = 97),($array_literal[6] = 99),($array_literal[7] = 116),($array_literal[8] = 67),($array_literal[9] = 111),($array_literal[10] = 108),($array_literal[11] = 108),($array_literal[12] = 101),($array_literal[13] = 99),($array_literal[14] = 116),($array_literal[15] = 105),($array_literal[16] = 111),($array_literal[17] = 110),$array_literal))));
   ;; unimplemented statement AssertStatement
   ;; assert (String $qualifier = (IStringList $qualifier = ((IStringList) new StringList.<init>()),$qualifier.getFoo(null)),$qualifier.equals(java.lang.String.fromInternalArray((char[] $array_literal = new char[18],($array_literal[0] = 65),($array_literal[1] = 98),($array_literal[2] = 115),($array_literal[3] = 116),($array_literal[4] = 114),($array_literal[5] = 97),($array_literal[6] = 99),($array_literal[7] = 116),($array_literal[8] = 67),($array_literal[9] = 111),($array_literal[10] = 108),($array_literal[11] = 108),($array_literal[12] = 101),($array_literal[13] = 99),($array_literal[14] = 116),($array_literal[15] = 105),($array_literal[16] = 111),($array_literal[17] = 110),$array_literal))));
   ;; unimplemented statement AssertStatement
  )
 )
)

;;; void MultipleAbstractParents.$clinit()
(func $$clinit__void@multipleabstractparents.MultipleAbstractParents
 (block $return.label
  (block
   ;; if (multipleabstractparents.MultipleAbstractParents.$initialized) return;
   (if (global.get $f_$initialized__multipleabstractparents_MultipleAbstractParents)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (multipleabstractparents.MultipleAbstractParents.$initialized = true);
   (global.set $f_$initialized__multipleabstractparents_MultipleAbstractParents (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Code for multipleabstractparents.MultipleAbstractParents.List [INTERFACE]

;;; void List.$clinit()
(func $$clinit__void@multipleabstractparents.MultipleAbstractParents.List
 (block $return.label
  (block
   ;; if (multipleabstractparents.MultipleAbstractParents.List.$initialized) return;
   (if (global.get $f_$initialized__multipleabstractparents_MultipleAbstractParents_List)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (multipleabstractparents.MultipleAbstractParents.List.$initialized = true);
   (global.set $f_$initialized__multipleabstractparents_MultipleAbstractParents_List (i32.const 1))
  )
 )
)

;;; Code for multipleabstractparents.MultipleAbstractParents.Collection [INTERFACE]

;;; void Collection.$clinit()
(func $$clinit__void@multipleabstractparents.MultipleAbstractParents.Collection
 (block $return.label
  (block
   ;; if (multipleabstractparents.MultipleAbstractParents.Collection.$initialized) return;
   (if (global.get $f_$initialized__multipleabstractparents_MultipleAbstractParents_Collection)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (multipleabstractparents.MultipleAbstractParents.Collection.$initialized = true);
   (global.set $f_$initialized__multipleabstractparents_MultipleAbstractParents_Collection (i32.const 1))
  )
 )
)

;;; Code for multipleabstractparents.MultipleAbstractParents.AbstractListCollection [CLASS]
(type $multipleabstractparents.MultipleAbstractParents.AbstractListCollection (struct
 (field $vtable (ref null $multipleabstractparents.MultipleAbstractParents.AbstractListCollection.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $multipleabstractparents.MultipleAbstractParents.AbstractListCollection.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))

;;; AbstractListCollection()
(func $m_<init>__void@multipleabstractparents.MultipleAbstractParents.AbstractListCollection
 (param $this (ref null $multipleabstractparents.MultipleAbstractParents.AbstractListCollection))
 (result (ref null $multipleabstractparents.MultipleAbstractParents.AbstractListCollection))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void AbstractListCollection.$clinit()
(func $$clinit__void@multipleabstractparents.MultipleAbstractParents.AbstractListCollection
 (block $return.label
  (block
   ;; if (multipleabstractparents.MultipleAbstractParents.AbstractListCollection.$initialized) return;
   (if (global.get $f_$initialized__multipleabstractparents_MultipleAbstractParents_AbstractListCollection)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (multipleabstractparents.MultipleAbstractParents.AbstractListCollection.$initialized = true);
   (global.set $f_$initialized__multipleabstractparents_MultipleAbstractParents_AbstractListCollection (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Code for multipleabstractparents.MultipleAbstractParents.AbstractCollection [CLASS]
(type $multipleabstractparents.MultipleAbstractParents.AbstractCollection (struct
 (field $vtable (ref null $multipleabstractparents.MultipleAbstractParents.AbstractCollection.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $multipleabstractparents.MultipleAbstractParents.AbstractCollection.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_getFoo__java_lang_Object__java_lang_String (mut (ref $function.$java.lang.Object__$java.lang.String)))
))

;;; AbstractCollection()
(func $m_<init>__void@multipleabstractparents.MultipleAbstractParents.AbstractCollection
 (param $this (ref null $multipleabstractparents.MultipleAbstractParents.AbstractCollection))
 (result (ref null $multipleabstractparents.MultipleAbstractParents.AbstractCollection))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; String AbstractCollection.getFoo(T t)
(func $m_getFoo__java_lang_Object__java_lang_String@multipleabstractparents.MultipleAbstractParents.AbstractCollection
 (param $this.untyped (ref null $java.lang.Object))
 (param $t (ref null $java.lang.Object))
 (result (ref null $java.lang.String))
 (local $return.value (ref null $java.lang.String))
 (local $$array_literal (ref null $char.array))
 (local $this (ref null $multipleabstractparents.MultipleAbstractParents.AbstractCollection))
 (local.set $this (ref.cast $java.lang.Object $multipleabstractparents.MultipleAbstractParents.AbstractCollection (local.get $this.untyped) (global.get $multipleabstractparents.MultipleAbstractParents.AbstractCollection.rtt)))
 (block $return.label
  (block
   ;; return java.lang.String.fromInternalArray((char[] $array_literal = new char[18],($array_literal[0] = 65),($array_literal[1] = 98),($array_literal[2] = 115),($array_literal[3] = 116),($array_literal[4] = 114),($array_literal[5] = 97),($array_literal[6] = 99),($array_literal[7] = 116),($array_literal[8] = 67),($array_literal[9] = 111),($array_literal[10] = 108),($array_literal[11] = 108),($array_literal[12] = 101),($array_literal[13] = 99),($array_literal[14] = 116),($array_literal[15] = 105),($array_literal[16] = 111),($array_literal[17] = 110),$array_literal));
   (local.set $return.value (call $m_fromInternalArray__arrayOf_char__java_lang_String@java.lang.String (block (result (ref null $char.array))
    
    (local.set $$array_literal (struct.new_with_rtt $char.array (global.get $java.lang.Object.vtable) (i32.const 0) (array.new_default_with_rtt $char.array.elements (i32.const 18) (global.get $char.array.elements.rtt)) (global.get $char.array.rtt)))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 0) (i32.const 65))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 1) (i32.const 98))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 2) (i32.const 115))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 3) (i32.const 116))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 4) (i32.const 114))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 5) (i32.const 97))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 6) (i32.const 99))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 7) (i32.const 116))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 8) (i32.const 67))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 9) (i32.const 111))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 10) (i32.const 108))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 11) (i32.const 108))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 12) (i32.const 101))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 13) (i32.const 99))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 14) (i32.const 116))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 15) (i32.const 105))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 16) (i32.const 111))
    (array.set $char.array.elements (struct.get $char.array $elements (local.get $$array_literal)) (i32.const 17) (i32.const 110))
    (local.get $$array_literal)
   )))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getFoo__java_lang_Object__java_lang_String@multipleabstractparents.MultipleAbstractParents.AbstractCollection)

;;; void AbstractCollection.$clinit()
(func $$clinit__void@multipleabstractparents.MultipleAbstractParents.AbstractCollection
 (block $return.label
  (block
   ;; if (multipleabstractparents.MultipleAbstractParents.AbstractCollection.$initialized) return;
   (if (global.get $f_$initialized__multipleabstractparents_MultipleAbstractParents_AbstractCollection)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (multipleabstractparents.MultipleAbstractParents.AbstractCollection.$initialized = true);
   (global.set $f_$initialized__multipleabstractparents_MultipleAbstractParents_AbstractCollection (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Code for multipleabstractparents.MultipleAbstractParents.AbstractList [CLASS]
(type $multipleabstractparents.MultipleAbstractParents.AbstractList (struct
 (field $vtable (ref null $multipleabstractparents.MultipleAbstractParents.AbstractList.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $multipleabstractparents.MultipleAbstractParents.AbstractList.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_getFoo__java_lang_Object__java_lang_String (mut (ref $function.$java.lang.Object__$java.lang.String)))
))

;;; AbstractList()
(func $m_<init>__void@multipleabstractparents.MultipleAbstractParents.AbstractList
 (param $this (ref null $multipleabstractparents.MultipleAbstractParents.AbstractList))
 (result (ref null $multipleabstractparents.MultipleAbstractParents.AbstractList))
 (block $return.label
  (block
   ;; AbstractCollection.this.AbstractCollection.<init>();
   (drop (call $m_<init>__void@multipleabstractparents.MultipleAbstractParents.AbstractCollection (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void AbstractList.$clinit()
(func $$clinit__void@multipleabstractparents.MultipleAbstractParents.AbstractList
 (block $return.label
  (block
   ;; if (multipleabstractparents.MultipleAbstractParents.AbstractList.$initialized) return;
   (if (global.get $f_$initialized__multipleabstractparents_MultipleAbstractParents_AbstractList)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (multipleabstractparents.MultipleAbstractParents.AbstractList.$initialized = true);
   (global.set $f_$initialized__multipleabstractparents_MultipleAbstractParents_AbstractList (i32.const 1))
   ;; multipleabstractparents.MultipleAbstractParents.AbstractCollection.$clinit();
   (call $$clinit__void@multipleabstractparents.MultipleAbstractParents.AbstractCollection )
  )
 )
)

;;; Code for multipleabstractparents.MultipleAbstractParents.AbstractList2 [CLASS]
(type $multipleabstractparents.MultipleAbstractParents.AbstractList2 (struct
 (field $vtable (ref null $multipleabstractparents.MultipleAbstractParents.AbstractList2.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $multipleabstractparents.MultipleAbstractParents.AbstractList2.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))

;;; AbstractList2()
(func $m_<init>__void@multipleabstractparents.MultipleAbstractParents.AbstractList2
 (param $this (ref null $multipleabstractparents.MultipleAbstractParents.AbstractList2))
 (result (ref null $multipleabstractparents.MultipleAbstractParents.AbstractList2))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void AbstractList2.$clinit()
(func $$clinit__void@multipleabstractparents.MultipleAbstractParents.AbstractList2
 (block $return.label
  (block
   ;; if (multipleabstractparents.MultipleAbstractParents.AbstractList2.$initialized) return;
   (if (global.get $f_$initialized__multipleabstractparents_MultipleAbstractParents_AbstractList2)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (multipleabstractparents.MultipleAbstractParents.AbstractList2.$initialized = true);
   (global.set $f_$initialized__multipleabstractparents_MultipleAbstractParents_AbstractList2 (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Code for multipleabstractparents.MultipleAbstractParents.ArrayList [CLASS]
(type $multipleabstractparents.MultipleAbstractParents.ArrayList (struct
 (field $vtable (ref null $multipleabstractparents.MultipleAbstractParents.ArrayList.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $multipleabstractparents.MultipleAbstractParents.ArrayList.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_getFoo__java_lang_Object__java_lang_String (mut (ref $function.$java.lang.Object__$java.lang.String)))
))

;;; ArrayList()
(func $m_<init>__void@multipleabstractparents.MultipleAbstractParents.ArrayList
 (param $this (ref null $multipleabstractparents.MultipleAbstractParents.ArrayList))
 (result (ref null $multipleabstractparents.MultipleAbstractParents.ArrayList))
 (block $return.label
  (block
   ;; AbstractList.this.AbstractList.<init>();
   (drop (call $m_<init>__void@multipleabstractparents.MultipleAbstractParents.AbstractList (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void ArrayList.$clinit()
(func $$clinit__void@multipleabstractparents.MultipleAbstractParents.ArrayList
 (block $return.label
  (block
   ;; if (multipleabstractparents.MultipleAbstractParents.ArrayList.$initialized) return;
   (if (global.get $f_$initialized__multipleabstractparents_MultipleAbstractParents_ArrayList)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (multipleabstractparents.MultipleAbstractParents.ArrayList.$initialized = true);
   (global.set $f_$initialized__multipleabstractparents_MultipleAbstractParents_ArrayList (i32.const 1))
   ;; multipleabstractparents.MultipleAbstractParents.AbstractList.$clinit();
   (call $$clinit__void@multipleabstractparents.MultipleAbstractParents.AbstractList )
  )
 )
)

;;; Code for multipleabstractparents.MultipleAbstractParents.IStringList [INTERFACE]

;;; void IStringList.$clinit()
(func $$clinit__void@multipleabstractparents.MultipleAbstractParents.IStringList
 (block $return.label
  (block
   ;; if (multipleabstractparents.MultipleAbstractParents.IStringList.$initialized) return;
   (if (global.get $f_$initialized__multipleabstractparents_MultipleAbstractParents_IStringList)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (multipleabstractparents.MultipleAbstractParents.IStringList.$initialized = true);
   (global.set $f_$initialized__multipleabstractparents_MultipleAbstractParents_IStringList (i32.const 1))
  )
 )
)

;;; Code for multipleabstractparents.MultipleAbstractParents.AbstractStringList [CLASS]
(type $multipleabstractparents.MultipleAbstractParents.AbstractStringList (struct
 (field $vtable (ref null $multipleabstractparents.MultipleAbstractParents.AbstractStringList.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $multipleabstractparents.MultipleAbstractParents.AbstractStringList.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_getFoo__java_lang_Object__java_lang_String (mut (ref $function.$java.lang.Object__$java.lang.String)))
 (field $m_getFoo__java_lang_String__java_lang_String (mut (ref $function.$java.lang.String__$java.lang.String)))
))

;;; AbstractStringList()
(func $m_<init>__void@multipleabstractparents.MultipleAbstractParents.AbstractStringList
 (param $this (ref null $multipleabstractparents.MultipleAbstractParents.AbstractStringList))
 (result (ref null $multipleabstractparents.MultipleAbstractParents.AbstractStringList))
 (block $return.label
  (block
   ;; AbstractList.this.AbstractList.<init>();
   (drop (call $m_<init>__void@multipleabstractparents.MultipleAbstractParents.AbstractList (local.get $this)))
  )
 )
 (local.get $this)
)

;;; String AbstractStringList.getFoo(Object arg0)
(func $m_getFoo__java_lang_Object__java_lang_String@multipleabstractparents.MultipleAbstractParents.AbstractStringList
 (param $this.untyped (ref null $java.lang.Object))
 (param $arg0 (ref null $java.lang.Object))
 (result (ref null $java.lang.String))
 (local $return.value (ref null $java.lang.String))
 (local $this (ref null $multipleabstractparents.MultipleAbstractParents.AbstractStringList))
 (local.set $this (ref.cast $java.lang.Object $multipleabstractparents.MultipleAbstractParents.AbstractStringList (local.get $this.untyped) (global.get $multipleabstractparents.MultipleAbstractParents.AbstractStringList.rtt)))
 (block $return.label
  (block
   ;; return AbstractStringList.this.getFoo(((String) arg0));
   (local.set $return.value (call_ref (local.get $this)(ref.cast $java.lang.Object $java.lang.String (local.get $arg0) (global.get $java.lang.String.rtt))(struct.get $multipleabstractparents.MultipleAbstractParents.AbstractStringList.vtable $m_getFoo__java_lang_String__java_lang_String (struct.get $multipleabstractparents.MultipleAbstractParents.AbstractStringList $vtable(local.get $this)))))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getFoo__java_lang_Object__java_lang_String@multipleabstractparents.MultipleAbstractParents.AbstractStringList)

;;; String AbstractStringList.getFoo(String arg0)
(func $m_getFoo__java_lang_String__java_lang_String@multipleabstractparents.MultipleAbstractParents.AbstractStringList
 (param $this.untyped (ref null $java.lang.Object))
 (param $arg0 (ref null $java.lang.String))
 (result (ref null $java.lang.String))
 (local $return.value (ref null $java.lang.String))
 (local $this (ref null $multipleabstractparents.MultipleAbstractParents.AbstractStringList))
 (local.set $this (ref.cast $java.lang.Object $multipleabstractparents.MultipleAbstractParents.AbstractStringList (local.get $this.untyped) (global.get $multipleabstractparents.MultipleAbstractParents.AbstractStringList.rtt)))
 (block $return.label
  (block
   ;; return super.getFoo(arg0);
   (local.set $return.value (call $m_getFoo__java_lang_Object__java_lang_String@multipleabstractparents.MultipleAbstractParents.AbstractCollection (local.get $this)(local.get $arg0)))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getFoo__java_lang_String__java_lang_String@multipleabstractparents.MultipleAbstractParents.AbstractStringList)

;;; void AbstractStringList.$clinit()
(func $$clinit__void@multipleabstractparents.MultipleAbstractParents.AbstractStringList
 (block $return.label
  (block
   ;; if (multipleabstractparents.MultipleAbstractParents.AbstractStringList.$initialized) return;
   (if (global.get $f_$initialized__multipleabstractparents_MultipleAbstractParents_AbstractStringList)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (multipleabstractparents.MultipleAbstractParents.AbstractStringList.$initialized = true);
   (global.set $f_$initialized__multipleabstractparents_MultipleAbstractParents_AbstractStringList (i32.const 1))
   ;; multipleabstractparents.MultipleAbstractParents.AbstractList.$clinit();
   (call $$clinit__void@multipleabstractparents.MultipleAbstractParents.AbstractList )
  )
 )
)

;;; Code for multipleabstractparents.MultipleAbstractParents.AbstractStringList2 [CLASS]
(type $multipleabstractparents.MultipleAbstractParents.AbstractStringList2 (struct
 (field $vtable (ref null $multipleabstractparents.MultipleAbstractParents.AbstractStringList2.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $multipleabstractparents.MultipleAbstractParents.AbstractStringList2.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_getFoo__java_lang_String__java_lang_String (mut (ref $function.$java.lang.String__$java.lang.String)))
))

;;; AbstractStringList2()
(func $m_<init>__void@multipleabstractparents.MultipleAbstractParents.AbstractStringList2
 (param $this (ref null $multipleabstractparents.MultipleAbstractParents.AbstractStringList2))
 (result (ref null $multipleabstractparents.MultipleAbstractParents.AbstractStringList2))
 (block $return.label
  (block
   ;; AbstractList2.this.AbstractList2.<init>();
   (drop (call $m_<init>__void@multipleabstractparents.MultipleAbstractParents.AbstractList2 (local.get $this)))
  )
 )
 (local.get $this)
)

;;; String AbstractStringList2.getFoo(String arg0)
(func $m_getFoo__java_lang_String__java_lang_String@multipleabstractparents.MultipleAbstractParents.AbstractStringList2
 (param $this.untyped (ref null $java.lang.Object))
 (param $arg0 (ref null $java.lang.String))
 (result (ref null $java.lang.String))
 (local $return.value (ref null $java.lang.String))
 (local $this (ref null $multipleabstractparents.MultipleAbstractParents.AbstractStringList2))
 (local.set $this (ref.cast $java.lang.Object $multipleabstractparents.MultipleAbstractParents.AbstractStringList2 (local.get $this.untyped) (global.get $multipleabstractparents.MultipleAbstractParents.AbstractStringList2.rtt)))
 (block $return.label
  (block
   ;; return List.this.getFoo(arg0);
   (local.set $return.value (ref.null $java.lang.String))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getFoo__java_lang_String__java_lang_String@multipleabstractparents.MultipleAbstractParents.AbstractStringList2)

;;; void AbstractStringList2.$clinit()
(func $$clinit__void@multipleabstractparents.MultipleAbstractParents.AbstractStringList2
 (block $return.label
  (block
   ;; if (multipleabstractparents.MultipleAbstractParents.AbstractStringList2.$initialized) return;
   (if (global.get $f_$initialized__multipleabstractparents_MultipleAbstractParents_AbstractStringList2)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (multipleabstractparents.MultipleAbstractParents.AbstractStringList2.$initialized = true);
   (global.set $f_$initialized__multipleabstractparents_MultipleAbstractParents_AbstractStringList2 (i32.const 1))
   ;; multipleabstractparents.MultipleAbstractParents.AbstractList2.$clinit();
   (call $$clinit__void@multipleabstractparents.MultipleAbstractParents.AbstractList2 )
  )
 )
)

;;; Code for multipleabstractparents.MultipleAbstractParents.AbstractStringList3 [CLASS]
(type $multipleabstractparents.MultipleAbstractParents.AbstractStringList3 (struct
 (field $vtable (ref null $multipleabstractparents.MultipleAbstractParents.AbstractStringList3.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $multipleabstractparents.MultipleAbstractParents.AbstractStringList3.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))

;;; AbstractStringList3()
(func $m_<init>__void@multipleabstractparents.MultipleAbstractParents.AbstractStringList3
 (param $this (ref null $multipleabstractparents.MultipleAbstractParents.AbstractStringList3))
 (result (ref null $multipleabstractparents.MultipleAbstractParents.AbstractStringList3))
 (block $return.label
  (block
   ;; AbstractList2.this.AbstractList2.<init>();
   (drop (call $m_<init>__void@multipleabstractparents.MultipleAbstractParents.AbstractList2 (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void AbstractStringList3.$clinit()
(func $$clinit__void@multipleabstractparents.MultipleAbstractParents.AbstractStringList3
 (block $return.label
  (block
   ;; if (multipleabstractparents.MultipleAbstractParents.AbstractStringList3.$initialized) return;
   (if (global.get $f_$initialized__multipleabstractparents_MultipleAbstractParents_AbstractStringList3)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (multipleabstractparents.MultipleAbstractParents.AbstractStringList3.$initialized = true);
   (global.set $f_$initialized__multipleabstractparents_MultipleAbstractParents_AbstractStringList3 (i32.const 1))
   ;; multipleabstractparents.MultipleAbstractParents.AbstractList2.$clinit();
   (call $$clinit__void@multipleabstractparents.MultipleAbstractParents.AbstractList2 )
  )
 )
)

;;; Code for multipleabstractparents.MultipleAbstractParents.StringList [CLASS]
(type $multipleabstractparents.MultipleAbstractParents.StringList (struct
 (field $vtable (ref null $multipleabstractparents.MultipleAbstractParents.StringList.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $multipleabstractparents.MultipleAbstractParents.StringList.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_getFoo__java_lang_Object__java_lang_String (mut (ref $function.$java.lang.Object__$java.lang.String)))
 (field $m_getFoo__java_lang_String__java_lang_String (mut (ref $function.$java.lang.String__$java.lang.String)))
))

;;; StringList()
(func $m_<init>__void@multipleabstractparents.MultipleAbstractParents.StringList
 (param $this (ref null $multipleabstractparents.MultipleAbstractParents.StringList))
 (result (ref null $multipleabstractparents.MultipleAbstractParents.StringList))
 (block $return.label
  (block
   ;; AbstractStringList.this.AbstractStringList.<init>();
   (drop (call $m_<init>__void@multipleabstractparents.MultipleAbstractParents.AbstractStringList (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void StringList.$clinit()
(func $$clinit__void@multipleabstractparents.MultipleAbstractParents.StringList
 (block $return.label
  (block
   ;; if (multipleabstractparents.MultipleAbstractParents.StringList.$initialized) return;
   (if (global.get $f_$initialized__multipleabstractparents_MultipleAbstractParents_StringList)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (multipleabstractparents.MultipleAbstractParents.StringList.$initialized = true);
   (global.set $f_$initialized__multipleabstractparents_MultipleAbstractParents_StringList (i32.const 1))
   ;; multipleabstractparents.MultipleAbstractParents.AbstractStringList.$clinit();
   (call $$clinit__void@multipleabstractparents.MultipleAbstractParents.AbstractStringList )
  )
 )
)

;;; Code for multipleabstractparents.MultipleAbstractParents.StringListChild [CLASS]
(type $multipleabstractparents.MultipleAbstractParents.StringListChild (struct
 (field $vtable (ref null $multipleabstractparents.MultipleAbstractParents.StringListChild.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $multipleabstractparents.MultipleAbstractParents.StringListChild.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_getFoo__java_lang_Object__java_lang_String (mut (ref $function.$java.lang.Object__$java.lang.String)))
 (field $m_getFoo__java_lang_String__java_lang_String (mut (ref $function.$java.lang.String__$java.lang.String)))
))

;;; StringListChild()
(func $m_<init>__void@multipleabstractparents.MultipleAbstractParents.StringListChild
 (param $this (ref null $multipleabstractparents.MultipleAbstractParents.StringListChild))
 (result (ref null $multipleabstractparents.MultipleAbstractParents.StringListChild))
 (block $return.label
  (block
   ;; StringList.this.StringList.<init>();
   (drop (call $m_<init>__void@multipleabstractparents.MultipleAbstractParents.StringList (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void StringListChild.$clinit()
(func $$clinit__void@multipleabstractparents.MultipleAbstractParents.StringListChild
 (block $return.label
  (block
   ;; if (multipleabstractparents.MultipleAbstractParents.StringListChild.$initialized) return;
   (if (global.get $f_$initialized__multipleabstractparents_MultipleAbstractParents_StringListChild)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (multipleabstractparents.MultipleAbstractParents.StringListChild.$initialized = true);
   (global.set $f_$initialized__multipleabstractparents_MultipleAbstractParents_StringListChild (i32.const 1))
   ;; multipleabstractparents.MultipleAbstractParents.StringList.$clinit();
   (call $$clinit__void@multipleabstractparents.MultipleAbstractParents.StringList )
  )
 )
)

 ;;; Code for multipleabstractparents.MultipleAbstractParents [vtable.init]
 (global.set $multipleabstractparents.MultipleAbstractParents.vtable (struct.new_with_rtt $multipleabstractparents.MultipleAbstractParents.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (rtt.canon $multipleabstractparents.MultipleAbstractParents.vtable)))

 ;;; Code for multipleabstractparents.MultipleAbstractParents.ArrayList [vtable.init]
 (global.set $multipleabstractparents.MultipleAbstractParents.ArrayList.vtable (struct.new_with_rtt $multipleabstractparents.MultipleAbstractParents.ArrayList.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_getFoo__java_lang_Object__java_lang_String@multipleabstractparents.MultipleAbstractParents.AbstractCollection) (rtt.canon $multipleabstractparents.MultipleAbstractParents.ArrayList.vtable)))

 ;;; Code for multipleabstractparents.MultipleAbstractParents.StringList [vtable.init]
 (global.set $multipleabstractparents.MultipleAbstractParents.StringList.vtable (struct.new_with_rtt $multipleabstractparents.MultipleAbstractParents.StringList.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_getFoo__java_lang_Object__java_lang_String@multipleabstractparents.MultipleAbstractParents.AbstractStringList) (ref.func $m_getFoo__java_lang_String__java_lang_String@multipleabstractparents.MultipleAbstractParents.AbstractStringList) (rtt.canon $multipleabstractparents.MultipleAbstractParents.StringList.vtable)))

 ;;; Code for multipleabstractparents.MultipleAbstractParents.StringListChild [vtable.init]
 (global.set $multipleabstractparents.MultipleAbstractParents.StringListChild.vtable (struct.new_with_rtt $multipleabstractparents.MultipleAbstractParents.StringListChild.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_getFoo__java_lang_Object__java_lang_String@multipleabstractparents.MultipleAbstractParents.AbstractStringList) (ref.func $m_getFoo__java_lang_String__java_lang_String@multipleabstractparents.MultipleAbstractParents.AbstractStringList) (rtt.canon $multipleabstractparents.MultipleAbstractParents.StringListChild.vtable)))
