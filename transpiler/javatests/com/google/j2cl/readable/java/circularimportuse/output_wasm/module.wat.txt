;;; Code for circularimportuse.Left

;;; CLASS  Left
(type $circularimportuse.Left (struct
 (field $vtable (ref null $circularimportuse.Left.vtable))
))
(type $circularimportuse.Left.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_createRight__circularimportuse_Right_$pp_circularimportuse (mut (ref $function.__$circularimportuse.Right)))
))
(global $circularimportuse.Left.vtable (mut (ref null $circularimportuse.Left.vtable)) (ref.null $circularimportuse.Left.vtable))

;;; Left()
(func $m_<init>__void@circularimportuse.Left
 (param $this (ref null $circularimportuse.Left))
 (result (ref null $circularimportuse.Left))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; Right Left.createRight()
(func $m_createRight__circularimportuse_Right_$pp_circularimportuse@circularimportuse.Left
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $circularimportuse.Right))
 (local $return.value (ref null $circularimportuse.Right))
 (local $this (ref null $circularimportuse.Left))
 (local.set $this (ref.cast $java.lang.Object $circularimportuse.Left (local.get $this.untyped) (global.get $circularimportuse.Left.rtt)))
 (block $return.label
  (block
   ;; return new Right.<init>();
   (local.set $return.value (call $m_<init>__void@circularimportuse.Right (struct.new_with_rtt $circularimportuse.Right (global.get $circularimportuse.Right.vtable) (global.get $circularimportuse.Right.rtt))))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_createRight__circularimportuse_Right_$pp_circularimportuse@circularimportuse.Left)
;;; Code for circularimportuse.Main

;;; CLASS  Main
(type $circularimportuse.Main (struct
 (field $vtable (ref null $circularimportuse.Main.vtable))
))
(type $circularimportuse.Main.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))
(global $circularimportuse.Main.vtable (mut (ref null $circularimportuse.Main.vtable)) (ref.null $circularimportuse.Main.vtable))

;;; Main()
(func $m_<init>__void@circularimportuse.Main
 (param $this (ref null $circularimportuse.Main))
 (result (ref null $circularimportuse.Main))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void Main.main(String... args)
(func $m_main__arrayOf_java_lang_String__void@circularimportuse.Main
 (param $args (ref null $Object.array))
 (local $left (ref null $circularimportuse.Left))
 (local $right (ref null $circularimportuse.Right))
 (block $return.label
  (block
   ;; Left left = new Left.<init>();
   
   (local.set $left (call $m_<init>__void@circularimportuse.Left (struct.new_with_rtt $circularimportuse.Left (global.get $circularimportuse.Left.vtable) (global.get $circularimportuse.Left.rtt))))
   ;; Right right = new Right.<init>();
   
   (local.set $right (call $m_<init>__void@circularimportuse.Right (struct.new_with_rtt $circularimportuse.Right (global.get $circularimportuse.Right.vtable) (global.get $circularimportuse.Right.rtt))))
  )
 )
)
;;; Code for circularimportuse.Right

;;; CLASS  Right
(type $circularimportuse.Right (struct
 (field $vtable (ref null $circularimportuse.Right.vtable))
))
(type $circularimportuse.Right.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_createLeft__circularimportuse_Left_$pp_circularimportuse (mut (ref $function.__$circularimportuse.Left)))
))
(global $circularimportuse.Right.vtable (mut (ref null $circularimportuse.Right.vtable)) (ref.null $circularimportuse.Right.vtable))

;;; Right()
(func $m_<init>__void@circularimportuse.Right
 (param $this (ref null $circularimportuse.Right))
 (result (ref null $circularimportuse.Right))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; Left Right.createLeft()
(func $m_createLeft__circularimportuse_Left_$pp_circularimportuse@circularimportuse.Right
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $circularimportuse.Left))
 (local $return.value (ref null $circularimportuse.Left))
 (local $this (ref null $circularimportuse.Right))
 (local.set $this (ref.cast $java.lang.Object $circularimportuse.Right (local.get $this.untyped) (global.get $circularimportuse.Right.rtt)))
 (block $return.label
  (block
   ;; return new Left.<init>();
   (local.set $return.value (call $m_<init>__void@circularimportuse.Left (struct.new_with_rtt $circularimportuse.Left (global.get $circularimportuse.Left.vtable) (global.get $circularimportuse.Left.rtt))))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_createLeft__circularimportuse_Left_$pp_circularimportuse@circularimportuse.Right)

;;; Code for circularimportuse.Left [vtable]
 (global.set $circularimportuse.Left.vtable (struct.new_with_rtt $circularimportuse.Left.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_createRight__circularimportuse_Right_$pp_circularimportuse@circularimportuse.Left) (rtt.canon $circularimportuse.Left.vtable)))
;;; Code for circularimportuse.Main [vtable]
 (global.set $circularimportuse.Main.vtable (struct.new_with_rtt $circularimportuse.Main.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (rtt.canon $circularimportuse.Main.vtable)))
;;; Code for circularimportuse.Right [vtable]
 (global.set $circularimportuse.Right.vtable (struct.new_with_rtt $circularimportuse.Right.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_createLeft__circularimportuse_Left_$pp_circularimportuse@circularimportuse.Right) (rtt.canon $circularimportuse.Right.vtable)))
))
(start $.runtime.init)

