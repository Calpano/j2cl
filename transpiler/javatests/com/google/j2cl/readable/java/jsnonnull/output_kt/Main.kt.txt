// Generated from "jsnonnull/Main.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)

package jsnonnull

import javaemul.lang.*
import java.util.Comparator
import kotlin.Any
import kotlin.Array
import kotlin.Double
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.arrayOf
import kotlin.collections.ArrayList
import kotlin.collections.MutableList
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.jvm.JvmField
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName

@ObjCName("JsnonnullMain", exact = true)
open class Main {
 @JvmField
 @HiddenFromObjC
 var f1_private_2: String = "Hello"

 @JvmField
 @HiddenFromObjC
 var f2_private_2: String? = null

 @JvmField
 @HiddenFromObjC
 var f4_private_2: MutableList<String> = ArrayList<String>()

 @JvmField
 @HiddenFromObjC
 var f5_private_2: MutableList<String>? = ArrayList<String>()

 @JvmField
 @HiddenFromObjC
 var f6_private_2: MutableList<String?> = ArrayList<String>() as MutableList<String?>

 @JvmField
 @HiddenFromObjC
 var f7_private_2: MutableList<String?>? = null

 @JvmField
 @HiddenFromObjC
 var f8_private_2: Array<String> = arrayOf<String>()

 @JvmField
 @HiddenFromObjC
 var f9_private_2: Array<String?> = arrayOf<String?>()

 @JvmField
 @HiddenFromObjC
 var f10_private_2: Array<String>? = arrayOf<String>()

 @JvmField
 @HiddenFromObjC
 var f12_private_2: MutableList<String?>? = ArrayList<String>() as MutableList<String?>?

 constructor(
  @ObjCName("NSString") a: String
 )

 @ObjCName("m1")
 open fun m1(
  @ObjCName("withNSString") a: String,
  @ObjCName("withJavaUtilList") b: MutableList<Double>,
  @ObjCName("withNSString") c: String?
 ): String {
  return ""
 }

 @ObjCName("m2")
 open fun m2(
  @ObjCName("withNSString") a: String?,
  @ObjCName("withJavaUtilList") b: MutableList<Double>
 ): String? {
  return ""
 }

 @ObjCName("m3")
 open fun m3(
  @ObjCName("withNSString") a: String,
  vararg @ObjCName("withNSStringArray") args: String
 ): String? {
  val args_1: Array<String>? = args as Array<String>?
  return null
 }

 @ObjCName("m4")
 open fun m4(
  @ObjCName("withJsnonnullMain_MyFunction") f: Main.MyFunction
 ) {}

 fun interface MyFunction {
  @ObjCName("x")
  fun x(
   @ObjCName("withNSString") a: String
  ): String
 }

 @ObjCName("JsnonnullMain_StringComparator", exact = true)
 open class StringComparator: Comparator<String> {
  open override fun compare(a: String, b: String): Int {
   return 0
  }
 }

 @ObjCName("JsnonnullMain_NullableStringComparator", exact = true)
 open class NullableStringComparator: Comparator<String?> {
  open override fun compare(a: String?, b: String?): Int {
   return 0
  }
 }

 @ObjCName("JsnonnullMain_NonNullableStringSubNullableComparator", exact = true)
 open class NonNullableStringSubNullableComparator: Main.NullableStringComparator() {
  open override fun compare(a: String, b: String): Int {
   return 0
  }
 }

 interface NonNullableTemplatedReturn<T> {
  @ObjCName("get")
  fun get(): T

  @ObjCName("getArray")
  fun getArray(): Array<T>?
 }

 interface NonNullableTemplate<T: Any> {
  @ObjCName("get")
  fun get(): T

  @ObjCName("getArray")
  fun getArray(): Array<T>?
 }
}
