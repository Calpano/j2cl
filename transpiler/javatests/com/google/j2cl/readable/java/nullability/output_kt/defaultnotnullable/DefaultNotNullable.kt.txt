// Generated from "nullability/defaultnotnullable/DefaultNotNullable.java"
package nullability.defaultnotnullable

import javaemul.lang.*
import kotlin.jvm.*

open class DefaultNotNullable {
 @kotlin.jvm.JvmField var f1: kotlin.String = "Hello"

 @kotlin.jvm.JvmField var f2: kotlin.String? = null

 @kotlin.jvm.JvmField var f3: kotlin.String? = null

 @kotlin.jvm.JvmField var f4: kotlin.collections.MutableList<kotlin.String> = kotlin.collections.ArrayList<kotlin.String?>()

 @kotlin.jvm.JvmField var f5: kotlin.collections.MutableList<kotlin.String>? = kotlin.collections.ArrayList<kotlin.String?>()

 @kotlin.jvm.JvmField var f6: kotlin.collections.MutableList<kotlin.String?> = kotlin.collections.ArrayList<kotlin.String?>()

 @kotlin.jvm.JvmField var f7: kotlin.collections.MutableList<kotlin.String?>? = null

 @kotlin.jvm.JvmField var f8: kotlin.Array<kotlin.String> = kotlin.arrayOf<kotlin.String?>() as kotlin.Array<kotlin.String>

 @kotlin.jvm.JvmField var f9: kotlin.Array<kotlin.String?> = kotlin.arrayOf<kotlin.String?>()

 @kotlin.jvm.JvmField var f10: kotlin.Array<kotlin.String>? = kotlin.arrayOf<kotlin.String?>() as kotlin.Array<kotlin.String>?

 @kotlin.jvm.JvmField var f11: kotlin.Unit? = null

 @kotlin.jvm.JvmField var f12: kotlin.Any = kotlin.Any()

 @kotlin.jvm.JvmField var f13: kotlin.Any

 @kotlin.jvm.JvmField var f14: kotlin.Any? = null

 constructor() {
  this.f13 = kotlin.Any()
 }

 open fun m1(a: kotlin.String, b: kotlin.collections.MutableList<kotlin.Double>): kotlin.String {
  return ""
 }

 open fun m2(a: kotlin.String?, b: kotlin.collections.MutableList<kotlin.Double?>): kotlin.String? {
  return null
 }

 open fun m3(vararg args: kotlin.String) {}

 open fun <T: nullability.defaultnotnullable.DefaultNotNullable.NullableBound<T>?> methodWithNullableBound() {}

 open fun <T: nullability.defaultnotnullable.DefaultNotNullable.NonNullableBound<T>> methodWithNonNullableBound() {}

 interface ParameterizedInterface<T> {
  fun add(t: T): T

  fun nullableAdd(t: T?): T?
 }

 open inner class ImplementsParameterizedInterface: nullability.defaultnotnullable.DefaultNotNullable.ParameterizedInterface<kotlin.String> {
  open override fun add(s: kotlin.String): kotlin.String {
   return "Hey"
  }

  open override fun nullableAdd(s: kotlin.String?): kotlin.String? {
   return "Hey"
  }
 }

 interface NullableBound<T: nullability.defaultnotnullable.DefaultNotNullable.NullableBound<T>?> {}

 interface NonNullableBound<T: nullability.defaultnotnullable.DefaultNotNullable.NonNullableBound<T>> {}

 interface NullableBoundWithNonNullArgument: nullability.defaultnotnullable.DefaultNotNullable.NullableBound<nullability.defaultnotnullable.DefaultNotNullable.NullableBoundWithNonNullArgument> {}

 interface NullableBoundWithNullableArgument: nullability.defaultnotnullable.DefaultNotNullable.NullableBound<nullability.defaultnotnullable.DefaultNotNullable.NullableBoundWithNullableArgument?> {}

 interface NonNullBoundWithNonNullArgument: nullability.defaultnotnullable.DefaultNotNullable.NonNullableBound<nullability.defaultnotnullable.DefaultNotNullable.NonNullBoundWithNonNullArgument> {}

 interface NonNullBoundWithNullableArgument: nullability.defaultnotnullable.DefaultNotNullable.NonNullableBound<nullability.defaultnotnullable.DefaultNotNullable.NonNullBoundWithNullableArgument> {}

 open class ParameterizedDefaultNullability<N> {
  @kotlin.jvm.JvmField var nullable: N? = null

  @kotlin.jvm.JvmField var nonNullable: N

  @kotlin.jvm.JvmField var defaultNullability: N

  constructor(n: N) {
   this.nonNullable = n!!
   this.defaultNullability = n!!
  }

  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw kotlin.RuntimeException()
  }

  open fun getDefaultNullability(): N {
   return null!!
  }

  open fun setNullable(n: N?) {}

  open fun setNonNull(n: N) {}

  open fun setDefaultNullability(n: N) {}
 }

 open class ParameterizedNullable<N> {
  @kotlin.jvm.JvmField var nullable: N? = null

  @kotlin.jvm.JvmField var nonNullable: N

  @kotlin.jvm.JvmField var defaultNullability: N

  constructor(n: N) {
   this.nonNullable = n!!
   this.defaultNullability = n!!
  }

  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw kotlin.RuntimeException()
  }

  open fun getDefaultNullability(): N {
   return null!!
  }

  open fun setNullable(n: N?) {}

  open fun setNonNull(n: N) {}

  open fun setDefaultNullability(n: N) {}
 }

 open class ParameterizedNonNullable<N: kotlin.Any> {
  @kotlin.jvm.JvmField var nullable: N? = null

  @kotlin.jvm.JvmField var nonNullable: N

  @kotlin.jvm.JvmField var defaultNullability: N

  constructor(n: N) {
   this.nonNullable = n
   this.defaultNullability = n
  }

  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw kotlin.RuntimeException()
  }

  open fun getDefaultNullability(): N {
   return null!!
  }

  open fun setNullable(n: N?) {}

  open fun setNonNull(n: N) {}

  open fun setDefaultNullability(n: N) {}
 }
}
