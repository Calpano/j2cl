package nullability.defaultnotnullable

open class DefaultNotNullable {
 constructor(): super()

 internal var f1: String = "Hello"

 internal var f2: String? = null

 internal var f3: String? = null

 internal var f4: java.util.List<String> = java.util.ArrayList<String?>()

 internal var f5: java.util.List<String>? = java.util.ArrayList<String?>()

 internal var f6: java.util.List<String?> = java.util.ArrayList<String?>()

 internal var f7: java.util.List<String?>? = null

 internal var f8: Array<String> = arrayOf<String?>()

 internal var f9: Array<String?> = arrayOf<String?>()

 internal var f10: Array<String>? = arrayOf<String?>()

 internal var f11: java.lang.Void? = null

 internal var f12: Any = Any()

 open fun m1(a: String?, b: java.util.List<Double?>?): String {
  return ""
 }

 open fun m2(a: String?, b: java.util.List<Double?>?): String? {
  return null
 }

 open fun m3(vararg args: String?) {}
}

interface `DefaultNotNullable$ParameterizedInterface`<T> {
 fun add(t: T?)
}

open class `DefaultNotNullable$ImplementsParameterizedInterface`: nullability.defaultnotnullable.`DefaultNotNullable$ParameterizedInterface`<String> {
 internal constructor(`$outer_this`: nullability.defaultnotnullable.DefaultNotNullable?): super() {
  this.`this` = `$outer_this`
 }

 @JvmField val `this`: nullability.defaultnotnullable.DefaultNotNullable?

 open override fun add(s: String?) {}
}
