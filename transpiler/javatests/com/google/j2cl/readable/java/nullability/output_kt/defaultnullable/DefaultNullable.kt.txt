// Generated from "nullability/defaultnullable/DefaultNullable.java"
package nullability.defaultnullable

import javaemul.lang.*
import kotlin.jvm.*

open class DefaultNullable {
 @kotlin.jvm.JvmField var f1: kotlin.String? = "Hello"

 @kotlin.jvm.JvmField var f2: kotlin.String? = null

 @kotlin.jvm.JvmField var f3: kotlin.String? = null

 @kotlin.jvm.JvmField var f4: kotlin.collections.MutableList<kotlin.String?>? = kotlin.collections.ArrayList<kotlin.String?>()

 @kotlin.jvm.JvmField var f5: kotlin.collections.MutableList<kotlin.String?>? = kotlin.collections.ArrayList<kotlin.String?>()

 @kotlin.jvm.JvmField var f6: kotlin.collections.MutableList<kotlin.String?>? = kotlin.collections.ArrayList<kotlin.String?>()

 @kotlin.jvm.JvmField var f7: kotlin.collections.MutableList<kotlin.String?>? = null

 @kotlin.jvm.JvmField var f8: kotlin.Array<kotlin.String?>? = kotlin.arrayOf<kotlin.String?>()

 @kotlin.jvm.JvmField var f9: kotlin.Array<kotlin.String?>? = kotlin.arrayOf<kotlin.String?>()

 @kotlin.jvm.JvmField var f10: kotlin.Array<kotlin.String?>? = kotlin.arrayOf<kotlin.String?>()

 @kotlin.jvm.JvmField var f11: kotlin.Unit? = null

 @kotlin.jvm.JvmField var f12: kotlin.Any = kotlin.Any()

 open fun m1(a: kotlin.String?, b: kotlin.collections.MutableList<kotlin.Double?>?): kotlin.String? {
  return ""
 }

 @kotlin.jvm.JvmField var f13: kotlin.Any

 @kotlin.jvm.JvmField var f14: kotlin.Any? = null

 constructor() {
  this.f13 = kotlin.Any()
 }

 open fun m2(a: kotlin.String?, b: kotlin.collections.MutableList<kotlin.Double?>?): kotlin.String? {
  return null
 }

 open fun m3(vararg args: kotlin.String?) {}

 open fun <T: nullability.defaultnullable.DefaultNullable.NullableBound<T>?> methodWithNullableBound() {}

 open fun <T: nullability.defaultnullable.DefaultNullable.NonNullableBound<T>> methodWithNonNullableBound() {}

 companion object {
  @kotlin.jvm.JvmStatic
  fun <N> genericNullableMethod(o: nullability.defaultnullable.DefaultNullable.ParameterizedNullable<N>?, n: N?) {
   o!!.setNullable(n)
   o!!.setNonNull(n as N)
   o!!.setDefaultNullability(n)
   o!!.getNullable()!!.hashCode()
   o!!.getNonNullable()!!.hashCode()
   o!!.getDefaultNullability()!!.hashCode()
   o!!.nullable = n
   o!!.nonNullable = n as N
   o!!.defaultNullability = n
   o!!.nullable!!.hashCode()
   o!!.nonNullable!!.hashCode()
   o!!.defaultNullability!!.hashCode()
  }

  @kotlin.jvm.JvmStatic
  fun <N: kotlin.Any> genericNonNullMethod(o: nullability.defaultnullable.DefaultNullable.ParameterizedNonNullable<N>?, n: N) {
   o!!.setNullable(n)
   o!!.setNonNull(n)
   o!!.setDefaultNullability(n)
   o!!.getNullable()!!.hashCode()
   o!!.getNonNullable()!!.hashCode()
   o!!.getDefaultNullability()!!.hashCode()
   o!!.nullable = n
   o!!.nonNullable = n
   o!!.defaultNullability = n
   o!!.nullable!!.hashCode()
   o!!.nonNullable!!.hashCode()
   o!!.defaultNullability!!.hashCode()
  }

  @kotlin.jvm.JvmStatic
  fun <N> genericDefaultNullabilityMethod(o: nullability.defaultnullable.DefaultNullable.ParameterizedDefaultNullability<N>?, n: N?) {
   o!!.setNullable(n)
   o!!.setNonNull(n as N)
   o!!.setDefaultNullability(n)
   o!!.getNullable()!!.hashCode()
   o!!.getNonNullable()!!.hashCode()
   o!!.getDefaultNullability()!!.hashCode()
   o!!.nullable = n
   o!!.nonNullable = n as N
   o!!.defaultNullability = n
   o!!.nullable!!.hashCode()
   o!!.nonNullable!!.hashCode()
   o!!.defaultNullability!!.hashCode()
  }

  @kotlin.jvm.JvmStatic
  fun parametrizedNullableMethod(o: nullability.defaultnullable.DefaultNullable.ParameterizedNullable<kotlin.String?>?, s: kotlin.String?) {
   o!!.setNullable(s)
   o!!.setNonNull(s as kotlin.String)
   o!!.setDefaultNullability(s)
   o!!.getNullable()!!.length
   o!!.getNonNullable()!!.length
   o!!.getDefaultNullability()!!.length
   o!!.nullable = s
   o!!.nonNullable = s as kotlin.String
   o!!.defaultNullability = s
   o!!.nullable!!.length
   o!!.nonNullable!!.length
   o!!.defaultNullability!!.length
  }

  @kotlin.jvm.JvmStatic
  fun parametrizedNonNullMethod(o: nullability.defaultnullable.DefaultNullable.ParameterizedNonNullable<kotlin.String>?, s: kotlin.String) {
   o!!.setNullable(s)
   o!!.setNonNull(s)
   o!!.setDefaultNullability(s)
   o!!.getNullable()!!.length
   o!!.getNonNullable()!!.length
   o!!.getDefaultNullability()!!.length
   o!!.nullable = s
   o!!.nonNullable = s
   o!!.defaultNullability = s
   o!!.nullable!!.length
   o!!.nonNullable!!.length
   o!!.defaultNullability!!.length
  }

  @kotlin.jvm.JvmStatic
  fun parametrizedDefaultNullabilityMethod(o: nullability.defaultnullable.DefaultNullable.ParameterizedDefaultNullability<kotlin.String?>?, s: kotlin.String?) {
   o!!.setNullable(s)
   o!!.setNonNull(s as kotlin.String)
   o!!.setDefaultNullability(s)
   o!!.getNullable()!!.length
   o!!.getNonNullable()!!.length
   o!!.getDefaultNullability()!!.length
   o!!.nullable = s
   o!!.nonNullable = s as kotlin.String
   o!!.defaultNullability = s
   o!!.nullable!!.length
   o!!.nonNullable!!.length
   o!!.defaultNullability!!.length
  }
 }

 interface NullableBound<T: nullability.defaultnullable.DefaultNullable.NullableBound<T>?> {}

 interface NonNullableBound<T: nullability.defaultnullable.DefaultNullable.NonNullableBound<T>> {}

 interface NullableBoundWithNonNullArgument: nullability.defaultnullable.DefaultNullable.NullableBound<nullability.defaultnullable.DefaultNullable.NullableBoundWithNonNullArgument> {}

 interface NullableBoundWithNullableArgument: nullability.defaultnullable.DefaultNullable.NullableBound<nullability.defaultnullable.DefaultNullable.NullableBoundWithNullableArgument?> {}

 interface NonNullBoundWithNonNullArgument: nullability.defaultnullable.DefaultNullable.NonNullableBound<nullability.defaultnullable.DefaultNullable.NonNullBoundWithNonNullArgument> {}

 interface NonNullBoundWithNullableArgument: nullability.defaultnullable.DefaultNullable.NonNullableBound<nullability.defaultnullable.DefaultNullable.NonNullBoundWithNullableArgument> {}

 open class ParameterizedDefaultNullability<N> {
  @kotlin.jvm.JvmField var nullable: N? = null

  @kotlin.jvm.JvmField var nonNullable: N

  @kotlin.jvm.JvmField var defaultNullability: N? = null

  constructor(n: N) {
   this.nonNullable = n
  }

  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw kotlin.RuntimeException()
  }

  open fun getDefaultNullability(): N? {
   return null
  }

  open fun setNullable(n: N?) {}

  open fun setNonNull(n: N) {}

  open fun setDefaultNullability(n: N?) {}
 }

 open class ParameterizedNullable<N> {
  @kotlin.jvm.JvmField var nullable: N? = null

  @kotlin.jvm.JvmField var nonNullable: N

  @kotlin.jvm.JvmField var defaultNullability: N? = null

  constructor(n: N) {
   this.nonNullable = n
  }

  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw kotlin.RuntimeException()
  }

  open fun getDefaultNullability(): N? {
   return null
  }

  open fun setNullable(n: N?) {}

  open fun setNonNull(n: N) {}

  open fun setDefaultNullability(n: N?) {}
 }

 open class ParameterizedNonNullable<N: kotlin.Any> {
  @kotlin.jvm.JvmField var nullable: N? = null

  @kotlin.jvm.JvmField var nonNullable: N

  @kotlin.jvm.JvmField var defaultNullability: N? = null

  constructor(n: N) {
   this.nonNullable = n
  }

  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw kotlin.RuntimeException()
  }

  open fun getDefaultNullability(): N? {
   return null
  }

  open fun setNullable(n: N?) {}

  open fun setNonNull(n: N) {}

  open fun setDefaultNullability(n: N?) {}
 }
}
