// Generated from "nullability/explicitnotnullable/ExplicitNotNullable.java"
@file:OptIn(ExperimentalObjCName::class)

package nullability.explicitnotnullable

import javaemul.lang.*
import java.lang.RuntimeException
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.CharArray
import kotlin.Double
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Unit
import kotlin.arrayOf
import kotlin.arrayOfNulls
import kotlin.collections.ArrayList
import kotlin.collections.MutableList
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName
import nullability.explicitnotnullable.DefaultNullable
import nullability.explicitnotnullable.ExplicitNotNullable

@ObjCName("NullabilityExplicitnotnullableExplicitNotNullable", exact = true)
open class ExplicitNotNullable {
 @JvmField var f1_private_2: String = "Hello"

 @JvmField var f2_private_2: String? = null

 @JvmField var f3_private_2: String? = null

 @JvmField var f4_private_2: MutableList<String> = ArrayList<String>()

 @JvmField var f5_private_2: MutableList<String>? = ArrayList<String>()

 @JvmField var f6_private_2: MutableList<String?> = ArrayList<String?>()

 @JvmField var f7_private_2: MutableList<String?>? = null

 @JvmField var f8_private_2: Array<String> = arrayOf<String?>() as Array<String>

 @JvmField var f9_private_2: Array<String?> = arrayOf<String?>()

 @JvmField var f10_private_2: Array<String>? = arrayOf<String?>() as Array<String>?

 @JvmField var f11_private_2: Unit? = null

 @JvmField var f12_private_2: Any = Any()

 @JvmField var f13_private_2: Any

 @JvmField var f14_private_2: Any? = null

 @JvmField var f15_private_2: Array<Array<String>> = arrayOf<Array<String?>?>() as Array<Array<String>>

 @JvmField var f16_private_2: Array<Array<String>?> = arrayOf<Array<String?>?>() as Array<Array<String>?>

 @JvmField var f17_private_2: Array<Array<String>>? = arrayOf<Array<String?>?>() as Array<Array<String>>?

 @JvmField var f18_private_2: Array<Array<String>?>? = arrayOf<Array<String?>?>() as Array<Array<String>?>?

 @JvmField var f19_private_2: Array<Array<String?>> = arrayOf<Array<String?>?>() as Array<Array<String?>>

 @JvmField var f20_private_2: Array<Array<String?>?> = arrayOf<Array<String?>?>()

 @JvmField var f21_private_2: Array<Array<String?>>? = arrayOf<Array<String?>?>() as Array<Array<String?>>?

 @JvmField var f22_private_2: Array<Array<String?>?>? = arrayOf<Array<String?>?>()

 @JvmField var f23_private_2: Array<CharArray> = arrayOf<CharArray?>() as Array<CharArray>

 @JvmField var f24_private_2: Array<CharArray?> = arrayOf<CharArray?>()

 @JvmField var f25_private_2: Array<CharArray>? = arrayOf<CharArray?>() as Array<CharArray>?

 @JvmField var f26_private_2: Array<CharArray?>? = arrayOf<CharArray?>()

 constructor() {
  this.f13_private_2 = Any()
 }

 open fun m1(
  @ObjCName("withJavaLangString", exact = false) a: String,
  @ObjCName("withId", exact = false) b: MutableList<Double>
 ): String {
  return ""
 }

 open fun m2(
  @ObjCName("withJavaLangString", exact = false) a: String?,
  @ObjCName("withId", exact = false) b: MutableList<Double?>
 ): String? {
  return null
 }

 open fun m3(vararg @ObjCName("withJavaLangStringArray", exact = false) args: String) {
  val args_1: Array<String> = args as Array<String>
 }

 open fun <T: ExplicitNotNullable.NullableBound<T>?> methodWithNullableBound() {}

 open fun <T: ExplicitNotNullable.NonNullableBound<T>> methodWithNonNullableBound() {}

 open fun casts() {
  val listOfString: MutableList<String>? = null as MutableList<String>?
  val nullableListOfString: MutableList<String>? = null as MutableList<String>?
  val listOfNullableString: MutableList<String?>? = null as MutableList<String?>?
  val nullableListOfNullableString: MutableList<String?>? = null as MutableList<String?>?
  val nonNullListOfString: MutableList<String>? = null as MutableList<String>?
  val listOfNonNullString: MutableList<String>? = null as MutableList<String>?
  val nonNullListOfNonNullString: MutableList<String>? = null as MutableList<String>?
 }

 @JvmField var collection: ExplicitNotNullable.Consumer<*>? = null

 @JvmField var nonNullableCollection: ExplicitNotNullable.Consumer<*>? = null

 open fun unboundedWildCard(
  @ObjCName("withId", exact = false) c: ExplicitNotNullable.Consumer<*>,
  @ObjCName("withId", exact = false) nc: ExplicitNotNullable.Consumer<*>
 ) {
  this.collection = c
  this.nonNullableCollection = nc
 }

 @JvmField var i: ExplicitNotNullable.Function<String, String> = object : ExplicitNotNullable.Function<String, String> {
  open override fun apply(s: String): String {
   return s
  }
 }

 open fun testDependentWildcards(@ObjCName("withId", exact = false) x: ExplicitNotNullable.DependentTypeParameters<*, *>): ExplicitNotNullable.DependentTypeParameters<*, *> {
  return x
 }

 companion object {
  @JvmStatic
  fun <N> genericNullableMethod(
   @ObjCName("withId", exact = false) o: ExplicitNotNullable.ParameterizedNullable<N>,
   @ObjCName("withId", exact = false) n: N?
  ) {
   o!!.setNullable(n)
   o!!.setNonNull(n as N)
   o!!.setDefaultNullability(n as N)
   o!!.getNullable()!!.hashCode()
   o!!.getNonNullable()!!.hashCode()
   o!!.getDefaultNullability()!!.hashCode()
   o!!.nullable = n
   o!!.nonNullable = n as N
   o!!.defaultNullability = n as N
   o!!.nullable!!.hashCode()
   o!!.nonNullable!!.hashCode()
   o!!.defaultNullability!!.hashCode()
  }

  @JvmStatic
  fun <N: Any> genericNonNullMethod(
   @ObjCName("withId", exact = false) o: ExplicitNotNullable.ParameterizedNonNullable<N>,
   @ObjCName("withId", exact = false) n: N
  ) {
   o!!.setNullable(n)
   o!!.setNonNull(n)
   o!!.setDefaultNullability(n)
   o!!.getNullable()!!.hashCode()
   o!!.getNonNullable()!!.hashCode()
   o!!.getDefaultNullability()!!.hashCode()
   o!!.nullable = n
   o!!.nonNullable = n
   o!!.defaultNullability = n
   o!!.nullable!!.hashCode()
   o!!.nonNullable!!.hashCode()
   o!!.defaultNullability!!.hashCode()
  }

  @JvmStatic
  fun <N: Any> genericDefaultNullabilityMethod(
   @ObjCName("withId", exact = false) o: ExplicitNotNullable.ParameterizedDefaultNullability<N>,
   @ObjCName("withId", exact = false) n: N
  ) {
   o!!.setNullable(n)
   o!!.setNonNull(n)
   o!!.setDefaultNullability(n)
   o!!.getNullable()!!.hashCode()
   o!!.getNonNullable()!!.hashCode()
   o!!.getDefaultNullability()!!.hashCode()
   o!!.nullable = n
   o!!.nonNullable = n
   o!!.defaultNullability = n
   o!!.nullable!!.hashCode()
   o!!.nonNullable!!.hashCode()
   o!!.defaultNullability!!.hashCode()
  }

  @JvmStatic
  fun parametrizedNullableMethod(
   @ObjCName("withId", exact = false) o: ExplicitNotNullable.ParameterizedNullable<String?>,
   @ObjCName("withJavaLangString", exact = false) s: String?
  ) {
   o!!.setNullable(s)
   o!!.setNonNull(s!!)
   o!!.setDefaultNullability(s)
   o!!.getNullable()!!.length
   o!!.getNonNullable()!!.length
   o!!.getDefaultNullability()!!.length
   o!!.nullable = s
   o!!.nonNullable = s!!
   o!!.defaultNullability = s
   o!!.nullable!!.length
   o!!.nonNullable!!.length
   o!!.defaultNullability!!.length
  }

  @JvmStatic
  fun parametrizedNonNullMethod(
   @ObjCName("withId", exact = false) o: ExplicitNotNullable.ParameterizedNonNullable<String>,
   @ObjCName("withJavaLangString", exact = false) s: String
  ) {
   o!!.setNullable(s)
   o!!.setNonNull(s)
   o!!.setDefaultNullability(s)
   o!!.getNullable()!!.length
   o!!.getNonNullable()!!.length
   o!!.getDefaultNullability()!!.length
   o!!.nullable = s
   o!!.nonNullable = s
   o!!.defaultNullability = s
   o!!.nullable!!.length
   o!!.nonNullable!!.length
   o!!.defaultNullability!!.length
  }

  @JvmStatic
  fun parametrizedDefaultNullabilityMethod(
   @ObjCName("withId", exact = false) o: ExplicitNotNullable.ParameterizedDefaultNullability<String>,
   @ObjCName("withJavaLangString", exact = false) s: String
  ) {
   o!!.setNullable(s)
   o!!.setNonNull(s)
   o!!.setDefaultNullability(s)
   o!!.getNullable()!!.length
   o!!.getNonNullable()!!.length
   o!!.getDefaultNullability()!!.length
   o!!.nullable = s
   o!!.nonNullable = s
   o!!.defaultNullability = s
   o!!.nullable!!.length
   o!!.nonNullable!!.length
   o!!.defaultNullability!!.length
  }

  @JvmStatic
  fun testListOfWildcard(@ObjCName("withId", exact = false) l: MutableList<*>) {}

  @JvmStatic
  fun testListOfWildcardExtendsDefaultNullabilityObject(@ObjCName("withId", exact = false) l: MutableList<*>) {}

  @JvmStatic
  fun testListOfWildcardExtendsNullableObject(@ObjCName("withId", exact = false) l: MutableList<*>) {}

  @JvmStatic
  fun testListOfWildcardExtendsNonNullObject(@ObjCName("withId", exact = false) l: MutableList<*>) {}

  @JvmStatic
  fun testListOfWildcardExtendsDefaultNullabilityString(@ObjCName("withId", exact = false) l: MutableList<out String>) {}

  @JvmStatic
  fun testListOfWildcardExtendsNullableString(@ObjCName("withId", exact = false) l: MutableList<out String?>) {}

  @JvmStatic
  fun testListOfWildcardExtendsNonNullString(@ObjCName("withId", exact = false) l: MutableList<out String>) {}

  @JvmStatic
  fun <T: Any> testListOfWildcardExtendsDefaultNullabilityVariable(@ObjCName("withId", exact = false) l: MutableList<out T>) {}

  @JvmStatic
  fun <T: Any> testListOfWildcardExtendsNullableVariable(@ObjCName("withId", exact = false) l: MutableList<out T?>) {}

  @JvmStatic
  fun testListOfWildcardSuperDefaultNullabilityObject(@ObjCName("withId", exact = false) l: MutableList<in Any>) {}

  @JvmStatic
  fun testListOfWildcardSuperNullableObject(@ObjCName("withId", exact = false) l: MutableList<in Any?>) {}

  @JvmStatic
  fun testListOfWildcardSuperNonNullObject(@ObjCName("withId", exact = false) l: MutableList<in Any>) {}

  @JvmStatic
  fun testListOfWildcardSuperDefaultNullabilityString(@ObjCName("withId", exact = false) l: MutableList<in String>) {}

  @JvmStatic
  fun testListOfWildcardSuperNullableString(@ObjCName("withId", exact = false) l: MutableList<in String?>) {}

  @JvmStatic
  fun testListOfWildcardSuperNonNullString(@ObjCName("withId", exact = false) l: MutableList<in String>) {}

  @JvmStatic
  fun <T: Any> testListOfWildcardSuperDefaultNullabilityVariable(@ObjCName("withId", exact = false) l: MutableList<in T>) {}

  @JvmStatic
  fun <T: Any> testListOfWildcardSuperNullableVariable(@ObjCName("withId", exact = false) l: MutableList<in T?>) {}

  @JvmStatic
  fun testLambdaNullability() {
   val lambda: ExplicitNotNullable.Consumer<String>? = ExplicitNotNullable.Consumer<String> { s: String ->
   }
   val nullable: ExplicitNotNullable.Consumer<String>? = ExplicitNotNullable.Consumer<String> { arg0: String ->
    DefaultNullable.nullableAccept(arg0)
   }
   val nonNullable: ExplicitNotNullable.Consumer<String>? = ExplicitNotNullable.Consumer<String> { arg0_1: String ->
    ExplicitNotNullable.nonNullableAccept(arg0_1)
   }
   val newObject: ExplicitNotNullable.Supplier<Any>? = ExplicitNotNullable.Supplier<Any> {
    return@Supplier Any()
   }
   val newArray: ExplicitNotNullable.IntFunction<Array<Any>>? = ExplicitNotNullable.IntFunction<Array<Any>> { arg0_2: Int ->
    return@IntFunction arrayOfNulls<Any>(arg0_2) as Array<Any>
   }
  }

  @JvmStatic
  fun nonNullableAccept(@ObjCName("withJavaLangString", exact = false) s: String) {}

  @JvmStatic
  fun <T: Any> consume(@ObjCName("withId", exact = false) t: T) {}

  @JvmStatic
  fun testUnboundWildcardTypeArgumentInference(@ObjCName("withId", exact = false) c: ExplicitNotNullable.Consumer<*>) {
   ExplicitNotNullable.consume<ExplicitNotNullable.Consumer<*>>(c)
  }

  @JvmStatic
  fun testLocalNullability() {
   val stringConsumer: ExplicitNotNullable.Consumer<String>? = null as ExplicitNotNullable.Consumer<String>?
   val nullableStringConsumer: ExplicitNotNullable.Consumer<String?>? = null as ExplicitNotNullable.Consumer<String?>?
   val nonNullStringConsumer: ExplicitNotNullable.Consumer<String>? = null as ExplicitNotNullable.Consumer<String>?
   val b: Boolean = null is ExplicitNotNullable.Consumer<*>
  }

  @JvmStatic
  fun testParametrizedMethod(
   @ObjCName("withId", exact = false) f: ExplicitNotNullable.Function<in String, out String>,
   @ObjCName("withJavaLangString", exact = false) string: String
  ): String {
   val localString: String? = string
   return f!!.apply(localString as String)
  }
 }

 interface NullableBound<T: ExplicitNotNullable.NullableBound<T>?> {}

 interface NonNullableBound<T: ExplicitNotNullable.NonNullableBound<T>> {}

 interface NullableBoundWithNonNullArgument: ExplicitNotNullable.NullableBound<ExplicitNotNullable.NullableBoundWithNonNullArgument> {}

 interface NullableBoundWithNullableArgument: ExplicitNotNullable.NullableBound<ExplicitNotNullable.NullableBoundWithNullableArgument?> {}

 interface NonNullBoundWithNonNullArgument: ExplicitNotNullable.NonNullableBound<ExplicitNotNullable.NonNullBoundWithNonNullArgument> {}

 interface NonNullBoundWithNullableArgument: ExplicitNotNullable.NonNullableBound<ExplicitNotNullable.NonNullBoundWithNullableArgument> {}

 open class ParameterizedDefaultNullability<N: Any> {
  @JvmField var nullable: N? = null

  @JvmField var nonNullable: N

  @JvmField var defaultNullability: N

  constructor(@ObjCName("withId", exact = false) n: N) {
   this.nonNullable = n
   this.defaultNullability = n
  }

  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw RuntimeException()
  }

  open fun getDefaultNullability(): N {
   return null!!
  }

  open fun setNullable(@ObjCName("withId", exact = false) n: N?) {}

  open fun setNonNull(@ObjCName("withId", exact = false) n: N) {}

  open fun setDefaultNullability(@ObjCName("withId", exact = false) n: N) {}
 }

 open class ParameterizedNullable<N> {
  @JvmField var nullable: N? = null

  @JvmField var nonNullable: N = null as N

  @JvmField var defaultNullability: N = null as N

  constructor(@ObjCName("withId", exact = false) n: N) {
   this.nonNullable = n
   this.defaultNullability = n
  }

  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw RuntimeException()
  }

  open fun getDefaultNullability(): N {
   return null as N
  }

  open fun setNullable(@ObjCName("withId", exact = false) n: N?) {}

  open fun setNonNull(@ObjCName("withId", exact = false) n: N) {}

  open fun setDefaultNullability(@ObjCName("withId", exact = false) n: N) {}
 }

 open class ParameterizedNonNullable<N: Any> {
  @JvmField var nullable: N? = null

  @JvmField var nonNullable: N

  @JvmField var defaultNullability: N

  constructor(@ObjCName("withId", exact = false) n: N) {
   this.nonNullable = n
   this.defaultNullability = n
  }

  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw RuntimeException()
  }

  open fun getDefaultNullability(): N {
   return null!!
  }

  open fun setNullable(@ObjCName("withId", exact = false) n: N?) {}

  open fun setNonNull(@ObjCName("withId", exact = false) n: N) {}

  open fun setDefaultNullability(@ObjCName("withId", exact = false) n: N) {}
 }

 fun interface Consumer<T> {
  fun accept(@ObjCName("withId", exact = false) t: T)
 }

 fun interface Supplier<T> {
  fun get(): T
 }

 fun interface IntFunction<T> {
  fun accept(@ObjCName("withInt", exact = false) i: Int): T
 }

 fun interface Function<I, O> {
  fun apply(@ObjCName("withId", exact = false) i: I): O
 }

 open class DependentTypeParameters<E: Any, T: E?> {
  open fun getThis(): ExplicitNotNullable.DependentTypeParameters<E, T> {
   return this
  }
 }
}

@ObjCName("NullabilityExplicitnotnullableDefaultNullable", exact = true)
open class DefaultNullable {
 companion object {
  @JvmStatic
  fun nullableAccept(@ObjCName("withJavaLangString", exact = false) s: String?) {}
 }
}

@ObjCName("NullabilityExplicitnotnullableOuterClass", exact = true)
open class OuterClass<E: Any> {
 init {
  object : InnerClass<E>() {}
  object : InnerClass<String>() {}
 }

 open inner class InnerClass<E: Any> {}
}
