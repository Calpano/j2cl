// Generated from "nullability/Nullability.java"
@file:OptIn(ExperimentalObjCName::class)

package nullability

import javaemul.lang.*
import java.lang.RuntimeException
import java.util.Comparator
import kotlin.Any
import kotlin.Array
import kotlin.Double
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.arrayOf
import kotlin.collections.ArrayList
import kotlin.collections.MutableList
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName
import nullability.Marker
import nullability.Nullability

@ObjCName("NullabilityNullability", exact = true)
open class Nullability {
 @JvmField var f1_private_2: String = "Hello"

 @JvmField var f2_private_2: String? = null

 @JvmField var f3_private_2: String? = null

 @JvmField var f4_private_2: MutableList<String> = ArrayList<String>()

 @JvmField var f5_private_2: MutableList<String>? = ArrayList<String>()

 @JvmField var f6_private_2: MutableList<String?> = ArrayList<String>() as MutableList<String?>

 @JvmField var f7_private_2: MutableList<String?>? = null

 @JvmField var f8_private_2: Array<String> = arrayOf<String>()

 @JvmField var f9_private_2: Array<String?> = arrayOf<String?>()

 @JvmField var f10_private_2: Array<String>? = arrayOf<String>()

 @JvmField var f12_private_2: MutableList<String?>? = ArrayList<String>() as MutableList<String?>?

 @JvmField var f13_private_2: Any

 @JvmField var f14_private_2: Any? = null

 constructor(
  @ObjCName("withNSString", exact = false) a: String
 ) {
  this.f13_private_2 = Any()
 }

 open fun m1(
  @ObjCName("withNSString", exact = false) a: String,
  @ObjCName("withJavaUtilList", exact = false) b: MutableList<Double>,
  @ObjCName("withNSString", exact = false) c: String?
 ): String {
  return ""
 }

 open fun m2(
  @ObjCName("withNSString", exact = false) a: String?,
  @ObjCName("withJavaUtilList", exact = false) b: MutableList<Double?>
 ): String? {
  return ""
 }

 open fun m3(
  @ObjCName("withNSString", exact = false) a: String,
  vararg @ObjCName("withNSStringArray", exact = false) args: String
 ): String? {
  val args_1: Array<String>? = args as Array<String>?
  return null
 }

 open fun m4(
  @ObjCName("withNullabilityNullability_MyFunction", exact = false) f: Nullability.MyFunction
 ) {}

 companion object {
  @JvmStatic
  fun <T: String?> testDefaultNullabilityBounds(
   @ObjCName("withNullabilityNullability_ParameterizedDefaultNullability", exact = false) defaultNullability: Nullability.ParameterizedDefaultNullability<T>?
  ) {
   defaultNullability!!.getNonNullable()!!.length
   defaultNullability!!.getNullable()!!.length
   defaultNullability!!.getDefaultNullability()!!.length
  }

  @JvmStatic
  fun <T: String?> testDefaultNullabilityBounds(
   @ObjCName("withNullabilityNullability_ParameterizedNullable", exact = false) nullable: Nullability.ParameterizedNullable<T>?
  ) {
   nullable!!.getNonNullable()!!.length
   nullable!!.getNullable()!!.length
   nullable!!.getDefaultNullability()!!.length
  }

  @JvmStatic
  fun <T: String?> testNullableBounds(
   @ObjCName("withNullabilityNullability_ParameterizedDefaultNullability", exact = false) defaultNullability: Nullability.ParameterizedDefaultNullability<T>?
  ) {
   defaultNullability!!.getNonNullable()!!.length
   defaultNullability!!.getNullable()!!.length
   defaultNullability!!.getDefaultNullability()!!.length
  }

  @JvmStatic
  fun <T: String?> testNullableBounds(
   @ObjCName("withNullabilityNullability_ParameterizedNullable", exact = false) nullable: Nullability.ParameterizedNullable<T>?
  ) {
   nullable!!.getNonNullable()!!.length
   nullable!!.getNullable()!!.length
   nullable!!.getDefaultNullability()!!.length
  }

  @JvmStatic
  fun <T: String> testNonNullableBounds(
   @ObjCName("withNullabilityNullability_ParameterizedDefaultNullability", exact = false) defaultNullability: Nullability.ParameterizedDefaultNullability<T>?
  ) {
   defaultNullability!!.getNonNullable()!!.length
   defaultNullability!!.getNullable()!!.length
   defaultNullability!!.getDefaultNullability()!!.length
  }

  @JvmStatic
  fun <T: String> testNonNullableBounds(
   @ObjCName("withNullabilityNullability_ParameterizedNullable", exact = false) nullable: Nullability.ParameterizedNullable<T>?
  ) {
   nullable!!.getNonNullable()!!.length
   nullable!!.getNullable()!!.length
   nullable!!.getDefaultNullability()!!.length
  }

  @JvmStatic
  fun <T: String> testNonNullableBounds(
   @ObjCName("withNullabilityNullability_ParameterizedNonNullable", exact = false) nonNullable: Nullability.ParameterizedNonNullable<T>?
  ) {
   nonNullable!!.getNonNullable()!!.length
   nonNullable!!.getNullable()!!.length
   nonNullable!!.getDefaultNullability()!!.length
  }

  @JvmStatic
  fun testDefaultNullabilityWildcards(
   @ObjCName("withNullabilityNullability_ParameterizedDefaultNullability", exact = false) nonNullable: Nullability.ParameterizedDefaultNullability<out String?>?
  ) {
   nonNullable!!.getNonNullable()!!.length
   nonNullable!!.getNullable()!!.length
   nonNullable!!.getDefaultNullability()!!.length
  }

  @JvmStatic
  fun testDefaultNullabilityWildcards(
   @ObjCName("withNullabilityNullability_ParameterizedNullable", exact = false) nonNullable: Nullability.ParameterizedNullable<out String?>?
  ) {
   nonNullable!!.getNonNullable()!!.length
   nonNullable!!.getNullable()!!.length
   nonNullable!!.getDefaultNullability()!!.length
  }

  @JvmStatic
  fun testDefaultNullabilityWildcards(
   @ObjCName("withNullabilityNullability_ParameterizedNonNullable", exact = false) nonNullable: Nullability.ParameterizedNonNullable<out String>?
  ) {
   nonNullable!!.getNonNullable()!!.length
   nonNullable!!.getNullable()!!.length
   nonNullable!!.getDefaultNullability()!!.length
  }

  @JvmStatic
  fun <T> testRecursive() where T: Nullability.Recursive<T>, T: Marker? {
   val generic: Nullability.RecursiveParam<T>? = Nullability.RecursiveParam<T>()
   val parametrized: Nullability.RecursiveParam<Nullability.RecursiveChild>? = Nullability.RecursiveParam<Nullability.RecursiveChild>()
  }

  @JvmStatic
  fun <T> testRecursiveNullable() where T: Nullability.RecursiveNullable<T>?, T: Marker? {
   val generic: Nullability.RecursiveNullableParam<T>? = Nullability.RecursiveNullableParam<T>()
   val parametrized: Nullability.RecursiveNullableParam<Nullability.RecursiveNullableChild?>? = Nullability.RecursiveNullableParam<Nullability.RecursiveNullableChild?>()
  }
 }

 @ObjCName("NullabilityNullability_Foo", exact = true)
 open class Foo<T> {
  open fun bar(
   @ObjCName("withNSObject", exact = false) t: T
  ) {}

  open fun baz(): T? {
   return null
  }

  open override fun toString(): String {
   return "Foo"
  }
 }

 @ObjCName("NullabilityNullability_MyFunction", exact = true)
 fun interface MyFunction {
  fun x(
   @ObjCName("withNSString", exact = false) a: String
  ): String
 }

 @ObjCName("NullabilityNullability_StringList", exact = true)
 open class StringList: ArrayList<String?>() {}

 @ObjCName("NullabilityNullability_StringComparator", exact = true)
 open class StringComparator: Comparator<String> {
  open override fun compare(a: String, b: String): Int {
   return 0
  }
 }

 @ObjCName("NullabilityNullability_NullableStringComparator", exact = true)
 open class NullableStringComparator: Comparator<String?> {
  open override fun compare(a: String?, b: String?): Int {
   return 0
  }
 }

 @ObjCName("NullabilityNullability_NullableTemplatedReturn", exact = true)
 fun interface NullableTemplatedReturn<T> {
  fun foo(): T?
 }

 @ObjCName("NullabilityNullability_NullableTemplatedReturnOverride", exact = true)
 open class NullableTemplatedReturnOverride: Nullability.NullableTemplatedReturn<String?> {
  open override fun foo(): String? {
   return "foo"
  }
 }

 @ObjCName("NullabilityNullability_ParameterizedDefaultNullability", exact = true)
 open class ParameterizedDefaultNullability<N> {
  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw RuntimeException()
  }

  open fun getDefaultNullability(): N {
   return null as N
  }
 }

 @ObjCName("NullabilityNullability_ParameterizedNullable", exact = true)
 open class ParameterizedNullable<N> {
  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw RuntimeException()
  }

  open fun getDefaultNullability(): N {
   return null as N
  }
 }

 @ObjCName("NullabilityNullability_ParameterizedNonNullable", exact = true)
 open class ParameterizedNonNullable<N: Any> {
  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw RuntimeException()
  }

  open fun getDefaultNullability(): N {
   return null!!
  }
 }

 @ObjCName("NullabilityNullability_NonNullableInsideNullable", exact = true)
 open class NonNullableInsideNullable<T> {
  open fun nonNullableTest(
   @ObjCName("withNullabilityNullability_ParameterizedNonNullable", exact = false) nonNullable: Nullability.ParameterizedNonNullable<T & Any>?
  ) {}
 }

 @ObjCName("NullabilityNullability_Recursive", exact = true)
 open class Recursive<T> where T: Nullability.Recursive<T>, T: Marker? {}

 @ObjCName("NullabilityNullability_RecursiveNullable", exact = true)
 open class RecursiveNullable<T> where T: Nullability.RecursiveNullable<T>?, T: Marker? {}

 @ObjCName("NullabilityNullability_RecursiveChild", exact = true)
 open class RecursiveChild: Marker, Nullability.Recursive<Nullability.RecursiveChild>() {}

 @ObjCName("NullabilityNullability_RecursiveNullableChild", exact = true)
 open class RecursiveNullableChild: Marker, Nullability.RecursiveNullable<Nullability.RecursiveNullableChild?>() {}

 @ObjCName("NullabilityNullability_RecursiveParam", exact = true)
 open class RecursiveParam<T> where T: Nullability.Recursive<T>, T: Marker? {}

 @ObjCName("NullabilityNullability_RecursiveNullableParam", exact = true)
 open class RecursiveNullableParam<T> where T: Nullability.RecursiveNullable<T>?, T: Marker? {}
}

@ObjCName("NullabilityMarker", exact = true)
interface Marker {}
