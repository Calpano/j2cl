// Generated from "nullability/Nullability.java"
package nullability

import javaemul.lang.*
import kotlin.jvm.*

open class Nullability {
 @kotlin.jvm.JvmField var f1: kotlin.String = "Hello"

 @kotlin.jvm.JvmField var f2: kotlin.String? = null

 @kotlin.jvm.JvmField var f3: kotlin.String? = null

 @kotlin.jvm.JvmField var f4: kotlin.collections.MutableList<kotlin.String> = kotlin.collections.ArrayList<kotlin.String>()

 @kotlin.jvm.JvmField var f5: kotlin.collections.MutableList<kotlin.String>? = kotlin.collections.ArrayList<kotlin.String>()

 @kotlin.jvm.JvmField var f6: kotlin.collections.MutableList<kotlin.String?> = kotlin.collections.ArrayList<kotlin.String?>()

 @kotlin.jvm.JvmField var f7: kotlin.collections.MutableList<kotlin.String?>? = null

 @kotlin.jvm.JvmField var f8: kotlin.Array<kotlin.String> = kotlin.arrayOf<kotlin.String>()

 @kotlin.jvm.JvmField var f9: kotlin.Array<kotlin.String?> = kotlin.arrayOf<kotlin.String?>()

 @kotlin.jvm.JvmField var f10: kotlin.Array<kotlin.String>? = kotlin.arrayOf<kotlin.String>()

 @kotlin.jvm.JvmField var f12: kotlin.collections.MutableList<kotlin.String?>? = kotlin.collections.ArrayList<kotlin.String?>()

 @kotlin.jvm.JvmField var f13: kotlin.Any

 @kotlin.jvm.JvmField var f14: kotlin.Any? = null

 constructor(a: kotlin.String) {
  this.f13 = kotlin.Any()
 }

 open fun m1(a: kotlin.String, b: kotlin.collections.MutableList<kotlin.Double>, c: kotlin.String?): kotlin.String {
  return ""
 }

 open fun m2(a: kotlin.String?, b: kotlin.collections.MutableList<kotlin.Double?>): kotlin.String? {
  return ""
 }

 open fun m3(a: kotlin.String, vararg args: kotlin.String): kotlin.String? {
  return null
 }

 open fun m4(f: nullability.Nullability.MyFunction) {}

 companion object {
  @kotlin.jvm.JvmStatic
  fun <T: kotlin.String?> testDefaultNullabilityBounds(defaultNullability: nullability.Nullability.ParameterizedDefaultNullability<T>?) {
   defaultNullability!!.getNonNullable()!!.length
   defaultNullability!!.getNullable()!!.length
   defaultNullability!!.getDefaultNullability()!!.length
  }

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.String?> testDefaultNullabilityBounds(nullable: nullability.Nullability.ParameterizedNullable<T>?) {
   nullable!!.getNonNullable()!!.length
   nullable!!.getNullable()!!.length
   nullable!!.getDefaultNullability()!!.length
  }

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.String?> testNullableBounds(defaultNullability: nullability.Nullability.ParameterizedDefaultNullability<T>?) {
   defaultNullability!!.getNonNullable()!!.length
   defaultNullability!!.getNullable()!!.length
   defaultNullability!!.getDefaultNullability()!!.length
  }

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.String?> testNullableBounds(nullable: nullability.Nullability.ParameterizedNullable<T>?) {
   nullable!!.getNonNullable()!!.length
   nullable!!.getNullable()!!.length
   nullable!!.getDefaultNullability()!!.length
  }

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.String> testNonNullableBounds(defaultNullability: nullability.Nullability.ParameterizedDefaultNullability<T>?) {
   defaultNullability!!.getNonNullable()!!.length
   defaultNullability!!.getNullable()!!.length
   defaultNullability!!.getDefaultNullability()!!.length
  }

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.String> testNonNullableBounds(nullable: nullability.Nullability.ParameterizedNullable<T>?) {
   nullable!!.getNonNullable()!!.length
   nullable!!.getNullable()!!.length
   nullable!!.getDefaultNullability()!!.length
  }

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.String> testNonNullableBounds(nonNullable: nullability.Nullability.ParameterizedNonNullable<T>?) {
   nonNullable!!.getNonNullable()!!.length
   nonNullable!!.getNullable()!!.length
   nonNullable!!.getDefaultNullability()!!.length
  }

  @kotlin.jvm.JvmStatic
  fun testDefaultNullabilityWildcards(nonNullable: nullability.Nullability.ParameterizedDefaultNullability<out kotlin.String?>?) {
   nonNullable!!.getNonNullable()!!.length
   nonNullable!!.getNullable()!!.length
   nonNullable!!.getDefaultNullability()!!.length
  }

  @kotlin.jvm.JvmStatic
  fun testDefaultNullabilityWildcards(nonNullable: nullability.Nullability.ParameterizedNullable<out kotlin.String?>?) {
   nonNullable!!.getNonNullable()!!.length
   nonNullable!!.getNullable()!!.length
   nonNullable!!.getDefaultNullability()!!.length
  }

  @kotlin.jvm.JvmStatic
  fun testDefaultNullabilityWildcards(nonNullable: nullability.Nullability.ParameterizedNonNullable<out kotlin.String>?) {
   nonNullable!!.getNonNullable()!!.length
   nonNullable!!.getNullable()!!.length
   nonNullable!!.getDefaultNullability()!!.length
  }

  @kotlin.jvm.JvmStatic
  fun <T> testRecursive() where T: nullability.Nullability.Recursive<T>, T: nullability.Marker? {
   val generic: nullability.Nullability.RecursiveParam<T>? = nullability.Nullability.RecursiveParam<T>()
   val parametrized: nullability.Nullability.RecursiveParam<nullability.Nullability.RecursiveChild>? = nullability.Nullability.RecursiveParam<nullability.Nullability.RecursiveChild>()
  }

  @kotlin.jvm.JvmStatic
  fun <T> testRecursiveNullable() where T: nullability.Nullability.RecursiveNullable<T>?, T: nullability.Marker? {
   val generic: nullability.Nullability.RecursiveNullableParam<T>? = nullability.Nullability.RecursiveNullableParam<T>()
   val parametrized: nullability.Nullability.RecursiveNullableParam<nullability.Nullability.RecursiveNullableChild?>? = nullability.Nullability.RecursiveNullableParam<nullability.Nullability.RecursiveNullableChild?>()
  }
 }

 open class Foo<T> {
  open fun bar(t: T) {}

  open fun baz(): T? {
   return null
  }

  open override fun toString(): kotlin.String {
   return "Foo"
  }
 }

 fun interface MyFunction {
  fun x(a: kotlin.String): kotlin.String
 }

 open class StringList: kotlin.collections.ArrayList<kotlin.String?>() {}

 open class StringComparator: javaemul.lang.JavaComparator<kotlin.String> {
  open override fun compare(a: kotlin.String, b: kotlin.String): kotlin.Int {
   return 0
  }
 }

 open class NullableStringComparator: javaemul.lang.JavaComparator<kotlin.String?> {
  open override fun compare(a: kotlin.String?, b: kotlin.String?): kotlin.Int {
   return 0
  }
 }

 fun interface NullableTemplatedReturn<T> {
  fun foo(): T?
 }

 open class NullableTemplatedReturnOverride: nullability.Nullability.NullableTemplatedReturn<kotlin.String?> {
  open override fun foo(): kotlin.String? {
   return "foo"
  }
 }

 open class ParameterizedDefaultNullability<N> {
  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw kotlin.RuntimeException()
  }

  open fun getDefaultNullability(): N {
   return null as N
  }
 }

 open class ParameterizedNullable<N> {
  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw kotlin.RuntimeException()
  }

  open fun getDefaultNullability(): N {
   return null as N
  }
 }

 open class ParameterizedNonNullable<N: kotlin.Any> {
  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw kotlin.RuntimeException()
  }

  open fun getDefaultNullability(): N {
   return null!!
  }
 }

 open class Recursive<T> where T: nullability.Nullability.Recursive<T>, T: nullability.Marker? {}

 open class RecursiveNullable<T> where T: nullability.Nullability.RecursiveNullable<T>?, T: nullability.Marker? {}

 open class RecursiveChild: nullability.Marker, nullability.Nullability.Recursive<nullability.Nullability.RecursiveChild>() {}

 open class RecursiveNullableChild: nullability.Marker, nullability.Nullability.RecursiveNullable<nullability.Nullability.RecursiveNullableChild?>() {}

 open class RecursiveParam<T> where T: nullability.Nullability.Recursive<T>, T: nullability.Marker? {}

 open class RecursiveNullableParam<T> where T: nullability.Nullability.RecursiveNullable<T>?, T: nullability.Marker? {}
}

interface Marker {}
