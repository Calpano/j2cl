package nullability

open class Nullability {
 internal var f1: kotlin.String = "Hello"

 internal var f2: kotlin.String? = null

 internal var f3: kotlin.String? = null

 internal var f4: java.util.List<kotlin.String> = java.util.ArrayList<kotlin.String>()

 internal var f5: java.util.List<kotlin.String>? = java.util.ArrayList<kotlin.String>()

 internal var f6: java.util.List<kotlin.String?> = java.util.ArrayList<kotlin.String?>()

 internal var f7: java.util.List<kotlin.String?>? = null

 internal var f8: Array<kotlin.String> = arrayOf<kotlin.String>()

 internal var f9: Array<kotlin.String?> = arrayOf<kotlin.String?>()

 internal var f10: Array<kotlin.String>? = arrayOf<kotlin.String>()

 internal var f12: java.util.List<kotlin.String?>? = java.util.ArrayList<kotlin.String?>()

 constructor(a: kotlin.String): super()

 open fun m1(a: kotlin.String, b: java.util.List<kotlin.Double>, c: kotlin.String?): kotlin.String {
  return ""
 }

 open fun m2(a: kotlin.String?, b: java.util.List<kotlin.Double?>): kotlin.String? {
  return ""
 }

 open fun m3(a: kotlin.String, vararg args: kotlin.String): kotlin.String? {
  return null
 }

 open fun m4(f: nullability.`Nullability$MyFunction`) {}
}

open class `Nullability$Foo`<T> {
 internal constructor(): super()

 internal open fun bar(t: T?) {}

 internal open fun baz(): T? {
  return null
 }

 open override fun toString(): kotlin.String? {
  return "Foo"
 }
}

fun interface `Nullability$MyFunction` {
 fun x(a: kotlin.String): kotlin.String
}

open class `Nullability$StringList`: java.util.ArrayList<kotlin.String?> {
 constructor(): super()
}

open class `Nullability$StringComparator`: java.util.Comparator<kotlin.String> {
 constructor(): super()

 open override fun compare(a: kotlin.String, b: kotlin.String): Int {
  return 0
 }
}

open class `Nullability$NullableStringComparator`: java.util.Comparator<kotlin.String?> {
 constructor(): super()

 open override fun compare(a: kotlin.String?, b: kotlin.String?): Int {
  return 0
 }
}

fun interface `Nullability$NullableTemplatedReturn`<T> {
 fun foo(): T?
}

open class `Nullability$NullableTemplatedReturnOverride`: nullability.`Nullability$NullableTemplatedReturn`<kotlin.String?> {
 constructor(): super()

 open override fun foo(): kotlin.String? {
  return "foo"
 }
}
