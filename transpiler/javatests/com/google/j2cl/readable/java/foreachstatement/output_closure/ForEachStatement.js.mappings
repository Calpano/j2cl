[ForEachStatement] => [ForEachStatement]
[ForEachStatement] => [constructor]
[ForEachStatement] => [super();] "foreachstatement.ForEachStatement.<synthetic: ctor_js>"
[ForEachStatement] => [$create__]
[ForEachStatement] => [ForEachStatement.$clinit();] "foreachstatement.ForEachStatement.<synthetic: ctor_create>"
[ForEachStatement] => [let $instance = new ForEachStatement();] "foreachstatement.ForEachStatement.<synthetic: ctor_create>"
[ForEachStatement] => [$instance.$ctor__foreachstatement_ForEachStatement__();] "foreachstatement.ForEachStatement.<synthetic: ctor_create>"
[ForEachStatement] => [return $instance;] "foreachstatement.ForEachStatement.<synthetic: ctor_create>"
[ForEachStatement] => [$ctor__foreachstatement_ForEachStatement__]
[ForEachStatement] => [this.$ctor__java_lang_Object__();] "foreachstatement.ForEachStatement.<init>"
[test] => [m_test__java_lang_Iterable]
[iterable] => [iterable] "iterable"
[for (Throwable t : iterable) {
      t.toString();
    }] => [for (let $iterator = iterable.m_iterator__(); $iterator.m_hasNext__(); ) {
   let t = /**@type {Throwable}*/ ($Casts.$to($iterator.m_next__(), Throwable));
...   }
  }] "foreachstatement.ForEachStatement.test"
[for (Throwable t : iterable) {
      t.toString();
    }] => [let t = /**@type {Throwable}*/ ($Casts.$to($iterator.m_next__(), Throwable));] "foreachstatement.ForEachStatement.test"
[t] => [t] "t"
[t.toString();] => [t.toString();] "foreachstatement.ForEachStatement.test"
[for (Throwable t : new Throwable[10]) {
      t.toString();
    }] => [for (let $array = /**@type {!Array<Throwable>}*/ ($Arrays.$create([10], Throwable)), $index = 0; $index < $array.length; $index++) {
   let t_1 = $array[$index];
...   }
  }] "foreachstatement.ForEachStatement.test"
[for (Throwable t : new Throwable[10]) {
      t.toString();
    }] => [let t_1 = $array[$index];] "foreachstatement.ForEachStatement.test"
[t] => [t_1] "t"
[t.toString();] => [t_1.toString();] "foreachstatement.ForEachStatement.test"
[testMulticatch] => [m_testMulticatch___$p_foreachstatement_ForEachStatement]
[try {
      throw new Exception();
...      for (Object o : e) {}
    }] => [try {
   throw $Exceptions.toJs(Exception.$create__());
...   }
  }] "foreachstatement.ForEachStatement.testMulticatch"
[throw new Exception();] => [throw $Exceptions.toJs(Exception.$create__());] "foreachstatement.ForEachStatement.testMulticatch"
[{
      for (Object o : e) {}
    }] => [__$exc = $Exceptions.toJava(__$exc);] "foreachstatement.ForEachStatement.testMulticatch"
[{
      for (Object o : e) {}
    }] => [if (Exception1.$isInstance(__$exc) || Exception2.$isInstance(__$exc)) {
    let e = /**@type {(Exception1|Exception2)}*/ (__$exc);
...    throw $Exceptions.toJs(__$exc);
   }] "foreachstatement.ForEachStatement.testMulticatch"
[{
      for (Object o : e) {}
    }] => [let e = /**@type {(Exception1|Exception2)}*/ (__$exc);] "foreachstatement.ForEachStatement.testMulticatch"
[e] => [e] "e"
[for (Object o : e) {}] => [for (let $iterator = e.m_iterator__(); $iterator.m_hasNext__(); ) {
     let o = $iterator.m_next__();
    }] "foreachstatement.ForEachStatement.testMulticatch"
[for (Object o : e) {}] => [let o = $iterator.m_next__();] "foreachstatement.ForEachStatement.testMulticatch"
[o] => [o] "o"
[{
      for (Object o : e) {}
    }] => [throw $Exceptions.toJs(__$exc);] "foreachstatement.ForEachStatement.testMulticatch"
[testTypeVariable] => [m_testTypeVariable___$p_foreachstatement_ForEachStatement]
[U iterable = null;] => [let iterable = null;] "foreachstatement.ForEachStatement.testTypeVariable"
[iterable] => [iterable] "iterable"
[for (String s : iterable) {}] => [for (let $iterator = /**@type {Iterable<?string>}*/ ($Casts.$to(iterable, Iterable)).m_iterator__(); $iterator.m_hasNext__(); ) {
   let s = /**@type {?string}*/ ($Casts.$to($iterator.m_next__(), j_l_String));
  }] "foreachstatement.ForEachStatement.testTypeVariable"
[for (String s : iterable) {}] => [let s = /**@type {?string}*/ ($Casts.$to($iterator.m_next__(), j_l_String));] "foreachstatement.ForEachStatement.testTypeVariable"
[s] => [s] "s"
[ForEachStatement] => [$clinit]
[ForEachStatement] => [ForEachStatement.$clinit = () =>{};] "foreachstatement.ForEachStatement.<clinit>"
[ForEachStatement] => [ForEachStatement.$loadModules();] "foreachstatement.ForEachStatement.<clinit>"
[ForEachStatement] => [j_l_Object.$clinit();] "foreachstatement.ForEachStatement.<clinit>"

