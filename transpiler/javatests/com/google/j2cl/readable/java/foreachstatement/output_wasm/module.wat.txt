;;; Code for foreachstatement.ForEachStatement

;;; CLASS  ForEachStatement
(type $foreachstatement.ForEachStatement (struct
))

;;; ForEachStatement()
(func $m_<init>__void@foreachstatement.ForEachStatement
 (param $this (ref null $foreachstatement.ForEachStatement))
 (result (ref null $foreachstatement.ForEachStatement))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; void ForEachStatement.test(Iterable<Throwable> iterable)
(func $m_test__java_lang_Iterable__void@foreachstatement.ForEachStatement
 (param $this (ref null $java.lang.Object))
 (param $iterable (ref null $java.lang.Object))
 (local $$iterator (ref null $java.lang.Object))
 (local $t (ref null $java.lang.Throwable))
 (local $$array (ref null $java.lang.Object))
 (local $$index f64)
 (local $t_1 (ref null $java.lang.Throwable))
 (block $return.label
  (block
   ;; LOOP: for (Iterator<Throwable> $iterator = iterable.iterator();$iterator.hasNext();) {
   
   
   (local.set $$iterator (ref.null $java.lang.Object))
   (block $LOOP.BREAK
    (loop
     (br_if 1 (i32.eqz (i32.const 0)))
     (block $LOOP.CONTINUE
      (block
       ;; Throwable t = ((Throwable) $iterator.next());
       
       (local.set $t (ref.cast $java.lang.Object $java.lang.Throwable (ref.null $java.lang.Throwable) (global.get $java.lang.Throwable.rtt)))
       (block
        ;; t.toString();
        (drop (ref.null $java.lang.String))
       )
      )
     )
     (br 0)
     
    )
   )
   ;; LOOP: for (Throwable[] $array = new Throwable[10],double $index = 0;($index < <expr>);($index = ($index + 1.0))) {
   
   
   (local.set $$array (ref.null $java.lang.Object))
   (local.set $$index (f64.const 0.0))
   (block $LOOP_1.BREAK
    (loop
     (br_if 1 (i32.eqz (f64.lt (local.get $$index) (f64.const 0.0))))
     (block $LOOP_1.CONTINUE
      (block
       ;; Throwable t = $array[$index];
       
       (local.set $t_1 (ref.null $java.lang.Throwable))
       (block
        ;; t.toString();
        (drop (ref.null $java.lang.String))
       )
      )
     )
     (local.set $$index (f64.add (local.get $$index) (f64.const 1.0)))
     (br 0)
     
    )
   )
  )
 )
)

