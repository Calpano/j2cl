;;; Code for foreachstatement.ForEachStatement [vtable]
(global $foreachstatement.ForEachStatement.vtable (mut (ref null $foreachstatement.ForEachStatement.vtable)) (ref.null $foreachstatement.ForEachStatement.vtable))

;;; Code for foreachstatement.ForEachStatement [static fields]
(global $f_$initialized__foreachstatement_ForEachStatement (mut i32) (i32.const 0))

;;; Code for foreachstatement.ForEachStatement [CLASS]
(type $foreachstatement.ForEachStatement (struct
 (field $vtable (ref null $foreachstatement.ForEachStatement.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $foreachstatement.ForEachStatement.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_test__java_lang_Iterable__void (mut (ref $function.$java.lang.Object__$void)))
))

;;; ForEachStatement()
(func $m_<init>__void@foreachstatement.ForEachStatement
 (param $this (ref null $foreachstatement.ForEachStatement))
 (result (ref null $foreachstatement.ForEachStatement))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void ForEachStatement.test(Iterable<Throwable> iterable)
(func $m_test__java_lang_Iterable__void@foreachstatement.ForEachStatement
 (param $this.untyped (ref null $java.lang.Object))
 (param $iterable (ref null $java.lang.Object))
 (local $$iterator (ref null $java.lang.Object))
 (local $t (ref null $java.lang.Throwable))
 (local $$array (ref null $Object.array))
 (local $$index f64)
 (local $t_1 (ref null $java.lang.Throwable))
 (local $this (ref null $foreachstatement.ForEachStatement))
 (local.set $this (ref.cast $java.lang.Object $foreachstatement.ForEachStatement (local.get $this.untyped) (global.get $foreachstatement.ForEachStatement.rtt)))
 (block $return.label
  (block
   ;; LOOP: for (Iterator<Throwable> $iterator = iterable.iterator();$iterator.hasNext();) {
   
   
   (local.set $$iterator (ref.null $java.lang.Object))
   (block $LOOP.BREAK
    (loop
     (br_if 1 (i32.eqz (i32.const 0)))
     (block $LOOP.CONTINUE
      (block
       ;; Throwable t = ((Throwable) $iterator.next());
       
       (local.set $t (ref.cast $java.lang.Object $java.lang.Throwable (ref.null $java.lang.Throwable) (global.get $java.lang.Throwable.rtt)))
       (block
        ;; t.toString();
        (drop (call_ref (local.get $t)(struct.get $java.lang.Throwable.vtable $m_toString__java_lang_String (struct.get $java.lang.Throwable $vtable(local.get $t)))))
       )
      )
     )
     (br 0)
     
    )
   )
   ;; LOOP: for (Throwable[] $array = new Throwable[10],double $index = 0;($index < <expr>);($index = ($index + 1.0))) {
   
   
   (local.set $$array (struct.new_with_rtt $Object.array (global.get $java.lang.Object.vtable) (i32.const 0) (array.new_default_with_rtt $Object.array.elements (i32.const 10) (global.get $Object.array.elements.rtt)) (global.get $Object.array.rtt)))
   (local.set $$index (f64.const 0.0))
   (block $LOOP_1.BREAK
    (loop
     (br_if 1 (i32.eqz (f64.lt (local.get $$index) (f64.const 0.0))))
     (block $LOOP_1.CONTINUE
      (block
       ;; Throwable t = ((Throwable) $array[$index]);
       
       (local.set $t_1 (ref.cast $java.lang.Object $java.lang.Throwable (array.get $Object.array.elements (struct.get $Object.array $elements (local.get $$array)) (i32.const 0)) (global.get $java.lang.Throwable.rtt)))
       (block
        ;; t.toString();
        (drop (call_ref (local.get $t_1)(struct.get $java.lang.Throwable.vtable $m_toString__java_lang_String (struct.get $java.lang.Throwable $vtable(local.get $t_1)))))
       )
      )
     )
     (local.set $$index (f64.add (local.get $$index) (f64.const 1.0)))
     (br 0)
     
    )
   )
  )
 )
)
(elem declare func $m_test__java_lang_Iterable__void@foreachstatement.ForEachStatement)

;;; void ForEachStatement.$clinit()
(func $$clinit__void@foreachstatement.ForEachStatement
 (block $return.label
  (block
   ;; if (foreachstatement.ForEachStatement.$initialized) return;
   (if (global.get $f_$initialized__foreachstatement_ForEachStatement)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (foreachstatement.ForEachStatement.$initialized = true);
   (global.set $f_$initialized__foreachstatement_ForEachStatement (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

 ;;; Code for foreachstatement.ForEachStatement [vtable.init]
 (global.set $foreachstatement.ForEachStatement.vtable (struct.new_with_rtt $foreachstatement.ForEachStatement.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_test__java_lang_Iterable__void@foreachstatement.ForEachStatement) (rtt.canon $foreachstatement.ForEachStatement.vtable)))
