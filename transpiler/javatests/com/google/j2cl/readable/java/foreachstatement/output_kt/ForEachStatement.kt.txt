package foreachstatement

open class ForEachStatement {
 constructor(): super()

 open fun test(iterable: java.lang.Iterable<kotlin.Throwable?>?) {
  FOR_EACH@ for (t in iterable!!) {
   (t!! as java.lang.Throwable).toString()
  }
  FOR_EACH_1@ for (t_1 in arrayOfNulls<kotlin.Throwable?>(10)!!) {
   (t_1!! as java.lang.Throwable).toString()
  }
 }

 internal fun testMulticatch() {
  try {
   throw java.lang.Exception()
  } catch (e: foreachstatement.`ForEachStatement$Exception1`) {
   FOR_EACH@ for (o in e) {}
  } catch (e: foreachstatement.`ForEachStatement$Exception2`) {
   FOR_EACH@ for (o in e) {}
  }
 }

 internal fun <T, U: T> testTypeVariable() where T: kotlin.Any?, T: java.lang.Iterable<kotlin.String?>? {
  val iterable: U? = null
  FOR_EACH@ for (s in iterable) {}
  val anotherIterable: foreachstatement.`ForEachStatement$IterableReturningTypeVariable`<*>? = null
  FOR_EACH_1@ for (s_1 in anotherIterable!!) {}
 }
}

open class `ForEachStatement$Exception1`: java.lang.Iterable<kotlin.String?>, java.lang.Exception {
 internal constructor(): super()

 open override fun iterator(): java.util.Iterator<kotlin.String?>? {
  return null
 }
}

open class `ForEachStatement$Exception2`: java.lang.Iterable<kotlin.Any?>, java.lang.Exception {
 internal constructor(): super()

 open override fun iterator(): java.util.Iterator<kotlin.Any?>? {
  return null
 }
}

open class `ForEachStatement$IterableReturningTypeVariable`<T: java.util.Iterator<kotlin.Int?>?>: java.lang.Iterable<kotlin.Int?> {
 internal constructor(): super()

 open override fun iterator(): T? {
  return null
 }
}
