// Generated from "foreachstatement/ForEachStatement.java"
package foreachstatement

import javaemul.lang.*
import kotlin.jvm.*

open class ForEachStatement {
 open fun test(iterable: kotlin.collections.MutableIterable<kotlin.Throwable?>?) {
  FOR_EACH@ for (t in iterable!!) {
   t!!.toString()
  }
  FOR_EACH_1@ for (t_1 in kotlin.arrayOfNulls<kotlin.Throwable>(10)) {
   t_1!!.toString()
  }
 }

 fun testMulticatch() {
  try {
   throw kotlin.Exception()
  } catch (e: foreachstatement.ForEachStatement.Exception1) {
   FOR_EACH@ for (o in e!!) {}
  } catch (e: foreachstatement.ForEachStatement.Exception2) {
   FOR_EACH@ for (o in e!!) {}
  }
 }

 fun <T: kotlin.collections.MutableIterable<kotlin.String?>?, U: T> testTypeVariable() {
  val iterable: U = null as U
  FOR_EACH@ for (s in iterable!!) {}
  val anotherIterable: foreachstatement.ForEachStatement.IterableReturningTypeVariable<*>? = null
  FOR_EACH_1@ for (s_1 in anotherIterable!!) {}
 }

 open class Exception1: javaemul.lang.JavaIterable<kotlin.String?>, kotlin.Exception() {
  open override fun iterator(): kotlin.collections.MutableIterator<kotlin.String?> {
   return null!!
  }
 }

 open class Exception2: javaemul.lang.JavaIterable<kotlin.Any?>, kotlin.Exception() {
  open override fun iterator(): kotlin.collections.MutableIterator<kotlin.Any?> {
   return null!!
  }
 }

 open class IterableReturningTypeVariable<T: kotlin.collections.MutableIterator<kotlin.Int?>>: javaemul.lang.JavaIterable<kotlin.Int?> {
  open override fun iterator(): T {
   return null!!
  }
 }
}
