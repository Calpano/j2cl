package foreachstatement

open class ForEachStatement {
 constructor(): super()

 open fun test(iterable: Iterable<Throwable?>?) {
  FOR_EACH@ for (t in iterable!!) {
   t!!.toString()
  }
  FOR_EACH_1@ for (t_1 in arrayOfNulls<Throwable?>(10)!!) {
   t_1!!.toString()
  }
 }

 internal fun testMulticatch() {
  try {
   throw Exception()
  } catch (e: foreachstatement.`ForEachStatement$Exception1`) {
   FOR_EACH@ for (o in e) {}
  } catch (e: foreachstatement.`ForEachStatement$Exception2`) {
   FOR_EACH@ for (o in e) {}
  }
 }

 internal fun <T, U: T> testTypeVariable() where T: Any?, T: Iterable<String?>? {
  val iterable: U? = null
  FOR_EACH@ for (s in iterable) {}
  val anotherIterable: foreachstatement.`ForEachStatement$IterableReturningTypeVariable`<*>? = null
  FOR_EACH_1@ for (s_1 in anotherIterable!!) {}
 }
}

open class `ForEachStatement$Exception1`: Iterable<String?>, Exception {
 internal constructor(): super()

 open override fun iterator(): java.util.Iterator<String?>? {
  return null
 }
}

open class `ForEachStatement$Exception2`: Iterable<Any?>, Exception {
 internal constructor(): super()

 open override fun iterator(): java.util.Iterator<Any?>? {
  return null
 }
}

open class `ForEachStatement$IterableReturningTypeVariable`<T: java.util.Iterator<Int?>?>: Iterable<Int?> {
 internal constructor(): super()

 open override fun iterator(): T? {
  return null
 }
}
