goog.module('typeannotations.AbstractType$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');
const ParametricType = goog.require('typeannotations.ParametricType$impl');

let List = goog.forwardDeclare('java.util.List$impl');
let Map = goog.forwardDeclare('java.util.Map$impl');

/**
 * @abstract
 * @implements {ParametricType<AbstractType>}
 */
class AbstractType extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts */
 $ctor__typeannotations_AbstractType__() {
  this.$ctor__java_lang_Object__();
 }
 //Default method forwarding stub.
 /** @override @nodts @return {!List<AbstractType>} */
 m_m__java_util_List(/** !List<!Map<!Array<string>, Map<Array<!List<string>>, !Array<?string>>>> */ arg0) {
  return /**@type {!List<AbstractType>}*/ (ParametricType.m_m__$default__typeannotations_ParametricType__java_util_List(this, arg0));
 }
 /** @nodts */
 static $clinit() {
  AbstractType.$clinit = () =>{};
  AbstractType.$loadModules();
  j_l_Object.$clinit();
  ParametricType.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof AbstractType;
 }
 
 /** @nodts */
 static $loadModules() {}
}
ParametricType.$markImplementor(AbstractType);
$Util.$setClassMetadata(AbstractType, 'typeannotations.AbstractType');

exports = AbstractType;

//# sourceMappingURL=AbstractType.js.map
