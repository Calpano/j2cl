// Generated from "typeannotations/TypeAnnotations.java"
package typeannotations

import javaemul.lang.*
import kotlin.jvm.*

abstract class AbstractType: typeannotations.ParametricType<typeannotations.AbstractType?> {}

abstract class AbstractTypeNonNull: typeannotations.ParametricType<typeannotations.AbstractType> {}

open class Parent {
 open fun m(s: kotlin.String, c: typeannotations.Parent?): typeannotations.Parent? {
  return c
 }

 open fun m(l: java.util.List<kotlin.String>?, c: typeannotations.Parent?): java.util.List<typeannotations.Parent>? {
  return java.util.ArrayList<typeannotations.Parent>()
 }
}

open class ChildWithNullableParent: typeannotations.ParametricType<typeannotations.Parent?>, typeannotations.Parent() {}

open class ChildWithNonNullableParent: typeannotations.ParametricType<typeannotations.Parent>, typeannotations.Parent() {}

open class TypeAnnotations {
 companion object {
  @kotlin.jvm.JvmStatic
  fun main() {
   val list: java.util.List<kotlin.String>? = java.util.ArrayList<kotlin.String>()
  }
 }
}
