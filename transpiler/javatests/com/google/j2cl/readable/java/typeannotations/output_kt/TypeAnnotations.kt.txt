package typeannotations

abstract class AbstractType: typeannotations.ParametricType<typeannotations.AbstractType?> {
 internal constructor(): super()
}

abstract class AbstractTypeNonNull: typeannotations.ParametricType<typeannotations.AbstractType> {
 internal constructor(): super()
}

open class Parent {
 internal constructor(): super()

 open fun m(s: kotlin.String, c: typeannotations.Parent?): typeannotations.Parent? {
  return c
 }

 open fun m(l: java.util.List<kotlin.String>?, c: typeannotations.Parent?): java.util.List<typeannotations.Parent>? {
  return java.util.ArrayList<typeannotations.Parent>()
 }
}

open class ChildWithNullableParent: typeannotations.ParametricType<typeannotations.Parent?>, typeannotations.Parent {
 internal constructor(): super()
}

open class ChildWithNonNullableParent: typeannotations.ParametricType<typeannotations.Parent>, typeannotations.Parent {
 internal constructor(): super()
}

open class TypeAnnotations {
 constructor(): super()

 companion object {
  @JvmStatic
  fun main() {
   val list: java.util.List<kotlin.String>? = java.util.ArrayList<kotlin.String>()
  }
 }
}
