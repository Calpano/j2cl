// Generated from "deprecated/DeprecatedExample.java"
@file:OptIn(ExperimentalObjCName::class)

package deprecated

import javaemul.lang.*
import kotlin.Any
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("DeprecatedDeprecatedExample", exact = true)
open class DeprecatedExample {
 @JvmField
 @ObjCName("deprecatedInstanceField_")
 var deprecatedInstanceField: String? = "deprecated field"

 @ObjCName("deprecatedInstanceMethod")
 open fun deprecatedInstanceMethod(
  @ObjCName("withNSString") someArg: String?
 ) {}

 constructor()

 companion object {
  @ObjCName("DEPRECATED_STATIC_FIELD_")
  const val DEPRECATED_STATIC_FIELD: String = "deprecated field"

  @JvmStatic
  @ObjCName("deprecatedStaticMethod")
  fun deprecatedStaticMethod(
   @ObjCName("withId") someObject: Any?
  ) {}
 }

 fun interface DeprecatedInterface {
  @ObjCName("doAThing")
  fun doAThing(
   @ObjCName("withInt") anInt: Int
  )
 }

 fun interface DeprecatedJsFunction {
  @ObjCName("doAThing")
  fun doAThing(
   @ObjCName("withId") aThing: Any?
  )
 }

 enum class DeprecatedEnum {
  A_VALUE;
 }

 enum class DeprecatedJsEnum {
  A_VALUE;
 }
}
