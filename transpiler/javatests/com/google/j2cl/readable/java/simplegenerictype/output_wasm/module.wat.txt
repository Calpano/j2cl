;;; Code for simplegenerictype.SimpleGenericType

;;; CLASS  SimpleGenericType
(type $simplegenerictype.SimpleGenericType (struct
 (field $vtable (ref null $simplegenerictype.SimpleGenericType.vtable))
 (field $$systemIdentityHashCode@java.lang.Object (mut i32))
 (field $first@simplegenerictype.SimpleGenericType (mut (ref null $java.lang.Object)))
 (field $second@simplegenerictype.SimpleGenericType (mut (ref null $java.lang.Object)))
))
(type $simplegenerictype.SimpleGenericType.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_test__void (mut (ref $function.__$void)))
))
(global $simplegenerictype.SimpleGenericType.vtable (mut (ref null $simplegenerictype.SimpleGenericType.vtable)) (ref.null $simplegenerictype.SimpleGenericType.vtable))
(global $$initialized@simplegenerictype.SimpleGenericType (mut i32) (i32.const 0))

;;; SimpleGenericType(T t, S s)
(func $m_<init>__java_lang_Object__java_lang_Object__void@simplegenerictype.SimpleGenericType
 (param $this (ref null $simplegenerictype.SimpleGenericType))
 (param $t (ref null $java.lang.Object))
 (param $s (ref null $java.lang.Object))
 (result (ref null $simplegenerictype.SimpleGenericType))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
   ;; (SimpleGenericType.this.first = t);
   (struct.set $simplegenerictype.SimpleGenericType $first@simplegenerictype.SimpleGenericType(local.get $this) (local.get $t))
   ;; (SimpleGenericType.this.second = s);
   (struct.set $simplegenerictype.SimpleGenericType $second@simplegenerictype.SimpleGenericType(local.get $this) (local.get $s))
  )
 )
 (local.get $this)
)

;;; void SimpleGenericType.test()
(func $m_test__void@simplegenerictype.SimpleGenericType
 (param $this.untyped (ref null $java.lang.Object))
 (local $g (ref null $simplegenerictype.SimpleGenericType))
 (local $this (ref null $simplegenerictype.SimpleGenericType))
 (local.set $this (ref.cast $java.lang.Object $simplegenerictype.SimpleGenericType (local.get $this.untyped) (global.get $simplegenerictype.SimpleGenericType.rtt)))
 (block $return.label
  (block
   ;; SimpleGenericType<Object, Error> g = new SimpleGenericType.<init>(new Object.<init>(),new Error.<init>());
   
   (local.set $g (call $m_<init>__java_lang_Object__java_lang_Object__void@simplegenerictype.SimpleGenericType (struct.new_with_rtt $simplegenerictype.SimpleGenericType (global.get $simplegenerictype.SimpleGenericType.vtable) (i32.const 0) (ref.null $java.lang.Object) (ref.null $java.lang.Object) (global.get $simplegenerictype.SimpleGenericType.rtt))(call $m_<init>__void@java.lang.Object (struct.new_with_rtt $java.lang.Object (global.get $java.lang.Object.vtable) (i32.const 0) (global.get $java.lang.Object.rtt)))(call $m_<init>__void@java.lang.Error (struct.new_with_rtt $java.lang.Error (global.get $java.lang.Error.vtable) (i32.const 0) (ref.null $java.lang.String) (ref.null $java.lang.Throwable) (ref.null $Object.array) (ref.null $Object.array) (i32.const 0) (i32.const 0) (ref.null $java.lang.Object) (global.get $java.lang.Error.rtt)))))
  )
 )
)
(elem declare func $m_test__void@simplegenerictype.SimpleGenericType)

;;; void SimpleGenericType.$clinit()
(func $$clinit__void@simplegenerictype.SimpleGenericType
 (block $return.label
  (block
   ;; if (simplegenerictype.SimpleGenericType.$initialized) return;
   (if (global.get $$initialized@simplegenerictype.SimpleGenericType)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (simplegenerictype.SimpleGenericType.$initialized = true);
   (global.set $$initialized@simplegenerictype.SimpleGenericType (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Code for simplegenerictype.SimpleGenericType [vtable]
 (global.set $simplegenerictype.SimpleGenericType.vtable (struct.new_with_rtt $simplegenerictype.SimpleGenericType.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_test__void@simplegenerictype.SimpleGenericType) (rtt.canon $simplegenerictype.SimpleGenericType.vtable)))
))
(start $.runtime.init)

