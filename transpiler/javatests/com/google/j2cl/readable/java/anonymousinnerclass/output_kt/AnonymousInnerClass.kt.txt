package anonymousinnerclass

open class A {}

open class B {}

open class AnonymousInnerClass {
 fun test(arg: Int) {
  val ic: anonymousinnerclass.AnonymousInnerClass.InnerClass? = TODO("expression.qualify needs rendering: AnonymousInnerClass.this)")
  val a: anonymousinnerclass.A? = anonymousinnerclass.A()
  val b: anonymousinnerclass.A.B? = TODO("expression.qualify needs rendering: AnonymousInnerClass.this)")
  val c: anonymousinnerclass.AnonymousInnerClass.`1C`? = TODO("expression.qualify needs rendering: AnonymousInnerClass.this)")
 }
}

open class InnerClass {}

open class `1`: anonymousinnerclass.AnonymousInnerClass.InnerClass {
 fun <init>(): anonymousinnerclass.AnonymousInnerClass.`1` {
  super()
 }
}

open class `2`: anonymousinnerclass.A.B {
 fun <init>(`$super_outer_this`: anonymousinnerclass.A?): anonymousinnerclass.AnonymousInnerClass.`2` {
  super()
 }
}

open class `1C` {}

open class `3`: anonymousinnerclass.AnonymousInnerClass.`1C` {
 fun <init>(): anonymousinnerclass.AnonymousInnerClass.`3` {
  super()
 }
}
