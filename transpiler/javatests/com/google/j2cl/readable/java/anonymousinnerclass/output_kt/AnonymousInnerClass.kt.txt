package anonymousinnerclass

open class A {}

open class B {
 val `this`: anonymousinnerclass.A?
}

open class AnonymousInnerClass {
 open fun test(arg: Int) {
  val ic: anonymousinnerclass.AnonymousInnerClass.InnerClass? = TODO("expression.qualify needs rendering: AnonymousInnerClass.this)")
  val a: anonymousinnerclass.A? = anonymousinnerclass.A()
  val b: anonymousinnerclass.A.B? = TODO("expression.qualify needs rendering: AnonymousInnerClass.this)")
  val c: anonymousinnerclass.AnonymousInnerClass.`1C`? = TODO("expression.qualify needs rendering: AnonymousInnerClass.this)")
 }
}

open class InnerClass {
 val `this`: anonymousinnerclass.AnonymousInnerClass?
}

open class `1`: anonymousinnerclass.AnonymousInnerClass.InnerClass {
 internal constructor() {
  super()
 }

 val `this`: anonymousinnerclass.AnonymousInnerClass?
}

open class `2`: anonymousinnerclass.A.B {
 internal constructor(`$super_outer_this`: anonymousinnerclass.A?) {
  super()
 }

 val `this`: anonymousinnerclass.AnonymousInnerClass?
}

open class `1C` {
 val `this`: anonymousinnerclass.AnonymousInnerClass?

 var fInC: Int = this.arg

 val arg: Int
}

open class `3`: anonymousinnerclass.AnonymousInnerClass.`1C` {
 internal constructor() {
  super()
 }

 val `this`: anonymousinnerclass.AnonymousInnerClass?

 val arg: Int
}
