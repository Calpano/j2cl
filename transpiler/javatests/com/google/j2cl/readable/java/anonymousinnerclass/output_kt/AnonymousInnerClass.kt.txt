// Generated from "anonymousinnerclass/AnonymousInnerClass.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress("REPEATED_BOUND", "UNNECESSARY_NOT_NULL_ASSERTION", "VARIABLE_WITH_REDUNDANT_INITIALIZER", "UNCHECKED_CAST", "PARAMETER_NAME_CHANGED_ON_OVERRIDE", "ALWAYS_NULL", "SENSELESS_COMPARISON", "UNUSED_PARAMETER")

package anonymousinnerclass

import javaemul.lang.*
import kotlin.Int
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.native.ObjCName

open class A {
 open inner class B {}
}

@ObjCName("AnonymousinnerclassAnonymousInnerClass", exact = true)
open class AnonymousInnerClass {
 @ObjCName("test")
 open fun test(
  @ObjCName("withInt") arg: Int
 ) {
  val ic: AnonymousInnerClass.InnerClass? = object : InnerClass() {}
  val a: A? = A()
  val b: A.B? = object : B() {}
  open class ___1C {
   @JvmField
   var fInC: Int = arg
  }
  val c: ___1C? = object : ___1C() {}
 }

 @ObjCName("AnonymousinnerclassAnonymousInnerClass_InnerClass", exact = true)
 open inner class InnerClass {}
}
