package arithmeticexpressions

open class ArithmeticExpressions {
 constructor(): super()

 open fun testCoercions() {
  var b: Byte = 1L.toByte()
  var c: Char = 1L.toChar()
  var s: Short = 1L.toShort()
  var i: Int = 1L.toInt()
  var f: Float = 1.0f
  var d: Double = 1.0
  b = 9223372036854775807L.toByte()
  c = 9223372036854775807L.toChar()
  s = 9223372036854775807L.toShort()
  i = 9223372036854775807L.toInt()
  f = 9.223372E18f
  d = 9.223372036854776E18
  val o: kotlin.Any? = c
  s = (o as Char).code.toShort()
 }

 open fun testPrimitives() {
  var a: Int = 10
  val b: Int = run {
   val `$value`: Int = a
   a = a + 1
   `$value`
  }
  val c: Int = run {
   val `$value_1`: Int = a
   a = a - 1
   `$value_1`
  }
  val d: Int = run {
   a = a + 1
   a
  }
  val e: Int = run {
   a = a - 1
   a
  }
  val f: Int = - a
  val g: Int = + a
  val h: Int = a.inv()
  val i: Int = 1 + 1 + 2 - 5
  val j: Int = (1 + 2) * (3 + 4)
  val p: Int = 1 / 2 * 3 % 4
  val r: Int = - -2147483648
  val t: Int = - - - 1
  val u: Int = + + + 1
  val v: Int = - + - 1
  val w: Int = 5 - - 4
  var k: Boolean = 1 + 2 + 3 != 4
  val l: Boolean = 1 + 2 != 4
  val m: Boolean = java.lang.Long.MAX_VALUE.toDouble() != 9.223372036854778E18
  val o: Double = ((5 + 1) / 2).toDouble() - 0.0
  a = a.shl(31L.toInt())
  a = a.shl(1L.toInt())
  a = (a.toLong() + 1L).toInt()
  a = (a.toLong() / 1L).toInt()
  a = (a.toDouble() + java.lang.Double.MAX_VALUE).toInt()
  k = k.or(true)
  var s: Short = 10
  k = run {
   s = (s.toInt() + 1).toShort()
   s
  }.toInt() == 10
  var q: Int = 3.shr(2.toInt())
  q = 3.ushr(2.toInt())
  val x: Byte = ((a.toShort().toInt() + b.toShort().toByte().toInt()) * c.toByte().toShort().toInt()).toByte()
  val y: Char = 'y'
  val z: kotlin.Long? = 121L
  k = y.code.toLong() == z!!
 }

 @JvmField var bar: Long = run {
  val `$value`: Long = arithmeticexpressions.ArithmeticExpressions.foo
  arithmeticexpressions.ArithmeticExpressions.foo = arithmeticexpressions.ArithmeticExpressions.foo + 1L
  `$value`
 }

 open fun testCompoundArray() {
  val ints: IntArray? = null
  ints!![0] = ints!![0] + 1
  ints!![0] = ints!![0] - 1
  ints!![0] = ints!![0] * 1
  ints!![0] = ints!![0] / 1
  ints!![0] = ints!![0].and(1)
  ints!![0] = ints!![0].xor(1)
  ints!![0] = ints!![0].or(1)
  ints!![0] = ints!![0] % 1
  ints!![0] = ints!![0].shl(1.toInt())
  ints!![0] = ints!![0].shr(1.toInt())
  ints!![0] = ints!![0].ushr(1.toInt())
  ints!![0] = ints!![0] + 1
  ints!![0] = ints!![0] + 1
  var i: Int = 0
  run {
   val `$array`: IntArray? = ints
   val `$index`: Int = run {
    val `$value`: Int = i
    i = i + 1
    `$value`
   }
   run {
    val `$array_1`: IntArray? = `$array`
    val `$index_1`: Int = `$index`
    val `$value_1`: Int = `$array`!![`$index`] + 1
    `$array_1`!![`$index_1`] = `$value_1`
    `$value_1`
   }
  }
  run {
   val `$array_2`: IntArray? = ints
   val `$index_2`: Int = run {
    i = i + 1
    i
   }
   run {
    val `$array_3`: IntArray? = `$array_2`
    val `$index_3`: Int = `$index_2`
    val `$value_2`: Int = `$array_2`!![`$index_2`] + 1
    `$array_3`!![`$index_3`] = `$value_2`
    `$value_2`
   }
  }
  run {
   val `$array_4`: IntArray? = ints
   val `$index_4`: Int = run {
    val `$value_3`: Int = i
    i = i + 1
    `$value_3`
   }
   run {
    val `$array_5`: IntArray? = `$array_4`
    val `$index_5`: Int = `$index_4`
    val `$value_4`: Int = `$array_4`!![`$index_4`] / 1
    `$array_5`!![`$index_5`] = `$value_4`
    `$value_4`
   }
  }
  val longs: LongArray? = null
  longs!![0] = longs!![0] + 1L
  longs!![0] = longs!![0] - 1L
  longs!![0] = longs!![0] - 1L
  run {
   val `$array_6`: LongArray? = arithmeticexpressions.ArithmeticExpressions.getLongArray()
   val `$index_6`: Int = 0
   run {
    val `$array_7`: LongArray? = `$array_6`
    val `$index_7`: Int = `$index_6`
    val `$value_5`: Long = `$array_6`!![`$index_6`] + 1L
    `$array_7`!![`$index_7`] = `$value_5`
    `$value_5`
   }
  }
  val booleans: BooleanArray? = null
  booleans!![0] = booleans!![0].or(true)
  val strings: Array<kotlin.String?>? = null
  strings!![0] = "" + strings!![0] + null
  val shorts: ShortArray? = null
  val b: Boolean = run {
   val `$array_8`: ShortArray? = shorts
   val `$index_8`: Int = 0
   val `$value_6`: Short = (shorts!![0].toInt() + 1).toShort()
   `$array_8`!![`$index_8`] = `$value_6`
   `$value_6`
  }.toInt() == 10
 }

 open fun testCompoundBoxedTypes() {
  var c: kotlin.Int? = 1000
  var d: kotlin.Int? = 10000
  d = d!! + c!!
  var i: Int = 43
  d = d!! + i
  d = d!!.shl(i.toInt())
  i = i + c!!
  var e: kotlin.Int? = run {
   c = c!! + 1
   c
  }
  e = run {
   c = c!! + 1
   c
  }
  var e2: kotlin.Double? = 100.0
  e2 = e2!! + 1.0
  var f: kotlin.Int? = run {
   val `$value`: kotlin.Int? = c
   c = c!! + 1
   `$value`
  }
  f = run {
   val `$value_1`: kotlin.Int? = c
   c = c!! + 1
   `$value_1`
  }
  var b: kotlin.Byte? = 0
  b = (b!! + 1).toByte()
  var ch: java.lang.Character? = 'c'
  ch = (ch!! + 1).toChar()
  (run {
   f = f!! + 1
   f
  }!! as java.lang.Integer).intValue()
  (run {
   val `$value_2`: kotlin.Int? = f
   f = f!! - 1
   `$value_2`
  }!! as java.lang.Integer).intValue()
  val ref: arithmeticexpressions.`ArithmeticExpressions$1Ref`<kotlin.Int?>? = null
  ref!!.field = ref!!.field!! + 1
  val n: Int = 1 + ref!!.field!!
 }

 @JvmField internal var intField: Long = 0L

 open fun testExtendedOperands() {
  var boxedInteger: kotlin.Int? = 3
  var i: Int
  var l: Long
  var d: Double
  l = (2 - boxedInteger!!).toLong() - 2L
  l = 2.or(boxedInteger).toLong().or(2L)
  l = 1000000L * l * 60L * 60L * 24L
  l = (24 * 60 * 60).toLong() * l * 1000000L
  d = run {
   l = run {
    i = 20
    i
   }.toLong()
   l
  }.toDouble()
  l = run {
   boxedInteger = run {
    i = 20
    i
   }
   boxedInteger
  }!!
  l = (i + boxedInteger!!).toLong() + l + 20L
  d = (20L + l).toDouble() + d
 }

 companion object {
  internal val FLOAT_CONSTANT: Float = 1.1f

  internal val DOUBLE_CONSTANT: Double = 1.100000023841858

  internal val DOUBLE_CONSTANT_WITH_ARITHMETIC: Double = 2.200000047683716

  @JvmField var one: Long = 1L

  @JvmField var foo: Long = run {
   val `$value`: Long = arithmeticexpressions.ArithmeticExpressions.one
   arithmeticexpressions.ArithmeticExpressions.one = arithmeticexpressions.ArithmeticExpressions.one + 1L
   `$value`
  }

  @JvmStatic
  internal fun getLongArray(): LongArray? {
   return null
  }

  @JvmStatic
  internal fun getInteger(): kotlin.Int? {
   return null
  }

  @JvmStatic
  internal fun testSideEffect() {
   run {
    val `$qualifier`: arithmeticexpressions.ArithmeticExpressions? = arithmeticexpressions.ArithmeticExpressions.getWithSideEffect()
    run {
     val `$qualifier_1`: arithmeticexpressions.ArithmeticExpressions? = `$qualifier`
     val `$value`: Long = `$qualifier`!!.intField + 5L
     `$qualifier_1`!!.intField = `$value`
     `$value`
    }
   }
  }

  @JvmStatic
  internal fun getWithSideEffect(): arithmeticexpressions.ArithmeticExpressions? {
   return null
  }

  internal var counter: Long = 0L

  @JvmStatic
  internal fun incrementCounter(): Long {
   return run {
    val `$value`: Long = arithmeticexpressions.ArithmeticExpressions.counter + 1L
    arithmeticexpressions.ArithmeticExpressions.counter = `$value`
    `$value`
   }
  }
 }
}

open class `ArithmeticExpressions$1Ref`<T> {
 internal constructor(`$outer_this`: arithmeticexpressions.ArithmeticExpressions?): super() {
  this.`this` = `$outer_this`
 }

 @JvmField val `this`: arithmeticexpressions.ArithmeticExpressions?

 @JvmField internal var field: T? = null
}
