;;; Code for arithmeticexpressions.ArithmeticExpressions

;;; CLASS  ArithmeticExpressions
(type $arithmeticexpressions.ArithmeticExpressions (struct
 (field $vtable (ref null $arithmeticexpressions.ArithmeticExpressions.vtable))
 (field $bar@arithmeticexpressions.ArithmeticExpressions (mut i64))
 (field $intField@arithmeticexpressions.ArithmeticExpressions (mut i64))
))
(type $arithmeticexpressions.ArithmeticExpressions.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_testCoercions__void (mut (ref $function.__$void)))
 (field $m_testPrimitives__void (mut (ref $function.__$void)))
 (field $m_testCompoundArray__void (mut (ref $function.__$void)))
 (field $m_testCompoundBoxedTypes__void (mut (ref $function.__$void)))
 (field $m_testExtendedOperands__void (mut (ref $function.__$void)))
))
(global $arithmeticexpressions.ArithmeticExpressions.vtable (mut (ref null $arithmeticexpressions.ArithmeticExpressions.vtable)) (ref.null $arithmeticexpressions.ArithmeticExpressions.vtable))
(global $FLOAT_CONSTANT@arithmeticexpressions.ArithmeticExpressions (mut f32) (f32.const 0.0))
(global $DOUBLE_CONSTANT@arithmeticexpressions.ArithmeticExpressions (mut f64) (f64.const 0.0))
(global $DOUBLE_CONSTANT_WITH_ARITHMETIC@arithmeticexpressions.ArithmeticExpressions (mut f64) (f64.const 0.0))
(global $one@arithmeticexpressions.ArithmeticExpressions (mut i64) (i64.const 0))
(global $foo@arithmeticexpressions.ArithmeticExpressions (mut i64) (i64.const 0))

;;; ArithmeticExpressions()
(func $m_<init>__void@arithmeticexpressions.ArithmeticExpressions
 (param $this (ref null $arithmeticexpressions.ArithmeticExpressions))
 (result (ref null $arithmeticexpressions.ArithmeticExpressions))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; void ArithmeticExpressions.testCoercions()
(func $m_testCoercions__void@arithmeticexpressions.ArithmeticExpressions
 (param $this.untyped (ref null $java.lang.Object))
 (local $b i32)
 (local $c i32)
 (local $s i32)
 (local $i i32)
 (local $f f32)
 (local $d f64)
 (local $this (ref null $arithmeticexpressions.ArithmeticExpressions))
 (local.set $this (ref.cast $java.lang.Object $arithmeticexpressions.ArithmeticExpressions (local.get $this.untyped) (global.get $arithmeticexpressions.ArithmeticExpressions.rtt)))
 (block $return.label
  (block
   ;; byte b = ((byte) 1);
   
   (local.set $b (i32.const 0))
   ;; char c = ((char) 1);
   
   (local.set $c (i32.const 0))
   ;; short s = ((short) 1);
   
   (local.set $s (i32.const 0))
   ;; int i = ((int) 1);
   
   (local.set $i (i32.const 0))
   ;; float f = ((float) 1);
   
   (local.set $f (f32.const 0.0))
   ;; double d = ((double) 1);
   
   (local.set $d (f64.const 0.0))
   ;; (b = ((byte) 9223372036854775807));
   (local.set $b (i32.const 0))
   ;; (c = ((char) 9223372036854775807));
   (local.set $c (i32.const 0))
   ;; (s = ((short) 9223372036854775807));
   (local.set $s (i32.const 0))
   ;; (i = ((int) 9223372036854775807));
   (local.set $i (i32.const 0))
   ;; (f = ((float) 9223372036854775807));
   (local.set $f (f32.const 0.0))
   ;; (d = ((double) 9223372036854775807));
   (local.set $d (f64.const 0.0))
  )
 )
)
(elem declare func $m_testCoercions__void@arithmeticexpressions.ArithmeticExpressions)

;;; void ArithmeticExpressions.testPrimitives()
(func $m_testPrimitives__void@arithmeticexpressions.ArithmeticExpressions
 (param $this.untyped (ref null $java.lang.Object))
 (local $a i32)
 (local $b i32)
 (local $$value i32)
 (local $c i32)
 (local $$value_1 i32)
 (local $d i32)
 (local $e i32)
 (local $f i32)
 (local $g i32)
 (local $h i32)
 (local $i i32)
 (local $j i32)
 (local $p i32)
 (local $k i32)
 (local $l i32)
 (local $m i32)
 (local $o f64)
 (local $s i32)
 (local $q i32)
 (local $this (ref null $arithmeticexpressions.ArithmeticExpressions))
 (local.set $this (ref.cast $java.lang.Object $arithmeticexpressions.ArithmeticExpressions (local.get $this.untyped) (global.get $arithmeticexpressions.ArithmeticExpressions.rtt)))
 (block $return.label
  (block
   ;; int a = 10,int b = (int $value = a,(a = (a + 1)),$value),int c = (int $value = a,(a = (a - 1)),$value),int d = ((a = (a + 1)),a),int e = ((a = (a - 1)),a),int f = (0 - a),int g = a,int h = (-1 ^ a),int i = (((1 + 1) + 2) - 5),int j = ((1 + 2) * (3 + 4)),int p = (((1 / 2) * 3) % 4);
   
   (local.set $a (i32.const 10))
   (local.set $b (block (result i32)
    
    (local.set $$value (local.get $a))
    (local.set $a (i32.add (local.get $a) (i32.const 1)))
    (local.get $$value)
   ))
   (local.set $c (block (result i32)
    
    (local.set $$value_1 (local.get $a))
    (local.set $a (i32.sub (local.get $a) (i32.const 1)))
    (local.get $$value_1)
   ))
   (local.set $d (block (result i32)
    (local.set $a (i32.add (local.get $a) (i32.const 1)))
    (local.get $a)
   ))
   (local.set $e (block (result i32)
    (local.set $a (i32.sub (local.get $a) (i32.const 1)))
    (local.get $a)
   ))
   (local.set $f (i32.sub (i32.const 0) (local.get $a)))
   (local.set $g (local.get $a))
   (local.set $h (i32.xor (i32.const -1) (local.get $a)))
   (local.set $i (i32.sub (i32.add (i32.add (i32.const 1) (i32.const 1)) (i32.const 2)) (i32.const 5)))
   (local.set $j (i32.mul (i32.add (i32.const 1) (i32.const 2)) (i32.add (i32.const 3) (i32.const 4))))
   (local.set $p (i32.rem_s (i32.mul (i32.div_s (i32.const 1) (i32.const 2)) (i32.const 3)) (i32.const 4)))
   ;; boolean k = !(((1 + 2) + 3) == 4),boolean l = ((1 + 2) != 4),boolean m = (java.lang.Long.MAX_VALUE != 9.223372036854778E18);
   
   (local.set $k (i32.eqz (i32.eq (i32.add (i32.add (i32.const 1) (i32.const 2)) (i32.const 3)) (i32.const 4))))
   (local.set $l (i32.ne (i32.add (i32.const 1) (i32.const 2)) (i32.const 4)))
   (local.set $m (i64.ne (global.get $MAX_VALUE@java.lang.Long) (i64.const 0)))
   ;; double o = (((5 + 1) / 2) - 0.0);
   
   (local.set $o (f64.sub (f64.const 0.0) (f64.const 0.0)))
   ;; (a = (a << 31));
   (local.set $a (i32.shl (local.get $a) (i32.const 0)))
   ;; (a = (a << 1));
   (local.set $a (i32.shl (local.get $a) (i32.const 0)))
   ;; (a = ((int) (a + 1)));
   (local.set $a (i32.const 0))
   ;; (a = ((int) (a / 1)));
   (local.set $a (i32.const 0))
   ;; (a = ((int) (a + java.lang.Double.MAX_VALUE)));
   (local.set $a (i32.const 0))
   ;; (k = (k | true));
   (local.set $k (i32.or (local.get $k) (i32.const 1)))
   ;; short s = 10;
   
   (local.set $s (i32.const 0))
   ;; (k = (((s = ((short) (s + 1))),s) == 10));
   (local.set $k (i32.eq (block (result i32)
    (local.set $s (i32.const 0))
    (local.get $s)
   ) (i32.const 0)))
   ;; int q = (3 >> 2);
   
   (local.set $q (i32.shr_s (i32.const 3) (i32.const 2)))
   ;; (q = (3 >>> 2));
   (local.set $q (i32.shr_u (i32.const 3) (i32.const 2)))
  )
 )
)
(elem declare func $m_testPrimitives__void@arithmeticexpressions.ArithmeticExpressions)

;;; void ArithmeticExpressions.testCompoundArray()
(func $m_testCompoundArray__void@arithmeticexpressions.ArithmeticExpressions
 (param $this.untyped (ref null $java.lang.Object))
 (local $ints (ref null $java.lang.Object))
 (local $i i32)
 (local $$array (ref null $java.lang.Object))
 (local $$index i32)
 (local $$value i32)
 (local $$array_1 (ref null $java.lang.Object))
 (local $$index_1 i32)
 (local $$array_2 (ref null $java.lang.Object))
 (local $$index_2 i32)
 (local $$value_1 i32)
 (local $longs (ref null $java.lang.Object))
 (local $$array_3 (ref null $java.lang.Object))
 (local $$index_3 i32)
 (local $booleans (ref null $java.lang.Object))
 (local $strings (ref null $java.lang.Object))
 (local $shorts (ref null $java.lang.Object))
 (local $b i32)
 (local $$array_4 (ref null $java.lang.Object))
 (local $$index_4 i32)
 (local $$value_2 i32)
 (local $this (ref null $arithmeticexpressions.ArithmeticExpressions))
 (local.set $this (ref.cast $java.lang.Object $arithmeticexpressions.ArithmeticExpressions (local.get $this.untyped) (global.get $arithmeticexpressions.ArithmeticExpressions.rtt)))
 (block $return.label
  (block
   ;; int[] ints = null;
   
   (local.set $ints (ref.null $java.lang.Object))
   ;; (ints[0] = (ints[0] + 1));
   
   ;; (ints[0] = (ints[0] - 1));
   
   ;; (ints[0] = (ints[0] * 1));
   
   ;; (ints[0] = (ints[0] / 1));
   
   ;; (ints[0] = (ints[0] & 1));
   
   ;; (ints[0] = (ints[0] ^ 1));
   
   ;; (ints[0] = (ints[0] | 1));
   
   ;; (ints[0] = (ints[0] % 1));
   
   ;; (ints[0] = (ints[0] << 1));
   
   ;; (ints[0] = (ints[0] >> 1));
   
   ;; (ints[0] = (ints[0] >>> 1));
   
   ;; (ints[0] = (ints[0] + 1));
   
   ;; (ints[0] = (ints[0] + 1));
   
   ;; int i = 0;
   
   (local.set $i (i32.const 0))
   (block
    ;; int[] $array = ints,int $index = (int $value = i,(i = (i + 1)),$value);
    
    (local.set $$array (local.get $ints))
    (local.set $$index (block (result i32)
     
     (local.set $$value (local.get $i))
     (local.set $i (i32.add (local.get $i) (i32.const 1)))
     (local.get $$value)
    ))
    ;; ($array[$index] = ($array[$index] + 1));
    
   )
   (block
    ;; int[] $array = ints,int $index = ((i = (i + 1)),i);
    
    (local.set $$array_1 (local.get $ints))
    (local.set $$index_1 (block (result i32)
     (local.set $i (i32.add (local.get $i) (i32.const 1)))
     (local.get $i)
    ))
    ;; ($array[$index] = ($array[$index] + 1));
    
   )
   (block
    ;; int[] $array = ints,int $index = (int $value = i,(i = (i + 1)),$value);
    
    (local.set $$array_2 (local.get $ints))
    (local.set $$index_2 (block (result i32)
     
     (local.set $$value_1 (local.get $i))
     (local.set $i (i32.add (local.get $i) (i32.const 1)))
     (local.get $$value_1)
    ))
    ;; ($array[$index] = ($array[$index] / 1));
    
   )
   ;; long[] longs = null;
   
   (local.set $longs (ref.null $java.lang.Object))
   ;; (longs[0] = (longs[0] + 1));
   
   ;; (longs[0] = (longs[0] - 1));
   
   ;; (longs[0] = (longs[0] - 1));
   
   (block
    ;; long[] $array = arithmeticexpressions.ArithmeticExpressions.getLongArray(),int $index = 0;
    
    (local.set $$array_3 (call $m_getLongArray__arrayOf_long@arithmeticexpressions.ArithmeticExpressions ))
    (local.set $$index_3 (i32.const 0))
    ;; ($array[$index] = ($array[$index] + 1));
    
   )
   ;; boolean[] booleans = null;
   
   (local.set $booleans (ref.null $java.lang.Object))
   ;; (booleans[0] = (booleans[0] | true));
   
   ;; String[] strings = null;
   
   (local.set $strings (ref.null $java.lang.Object))
   ;; (strings[0] = (strings[0] + null));
   
   ;; short[] shorts = null;
   
   (local.set $shorts (ref.null $java.lang.Object))
   ;; boolean b = ((short[] $array = shorts,int $index = 0,short $value = ((short) (shorts[0] + 1)),($array[$index] = $value),$value) == 10);
   
   (local.set $b (i32.eq (block (result i32)
    
    (local.set $$array_4 (local.get $shorts))
    (local.set $$index_4 (i32.const 0))
    (local.set $$value_2 (i32.const 0))
    
    (local.get $$value_2)
   ) (i32.const 0)))
  )
 )
)
(elem declare func $m_testCompoundArray__void@arithmeticexpressions.ArithmeticExpressions)

;;; long[] ArithmeticExpressions.getLongArray()
(func $m_getLongArray__arrayOf_long@arithmeticexpressions.ArithmeticExpressions
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; return null;
   (local.set $return.value (ref.null $java.lang.Object))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; void ArithmeticExpressions.testCompoundBoxedTypes()
(func $m_testCompoundBoxedTypes__void@arithmeticexpressions.ArithmeticExpressions
 (param $this.untyped (ref null $java.lang.Object))
 (local $c (ref null $java.lang.Integer))
 (local $d (ref null $java.lang.Integer))
 (local $i i32)
 (local $e (ref null $java.lang.Integer))
 (local $e2 (ref null $java.lang.Double))
 (local $f (ref null $java.lang.Integer))
 (local $$value (ref null $java.lang.Integer))
 (local $$value_1 (ref null $java.lang.Integer))
 (local $b (ref null $java.lang.Byte))
 (local $ch (ref null $java.lang.Character))
 (local $$qualifier (ref null $java.lang.Integer))
 (local $$qualifier_1 (ref null $java.lang.Integer))
 (local $$value_2 (ref null $java.lang.Integer))
 (local $ref (ref null $arithmeticexpressions.ArithmeticExpressions.1Ref))
 (local $n i32)
 (local $this (ref null $arithmeticexpressions.ArithmeticExpressions))
 (local.set $this (ref.cast $java.lang.Object $arithmeticexpressions.ArithmeticExpressions (local.get $this.untyped) (global.get $arithmeticexpressions.ArithmeticExpressions.rtt)))
 (block $return.label
  (block
   ;; Integer c = 1000;
   
   (local.set $c (ref.null $java.lang.Integer))
   ;; Integer d = 10000;
   
   (local.set $d (ref.null $java.lang.Integer))
   ;; (d = (d + c));
   (local.set $d (ref.null $java.lang.Integer))
   ;; int i = 43;
   
   (local.set $i (i32.const 43))
   ;; (d = (d + i));
   (local.set $d (ref.null $java.lang.Integer))
   ;; (d = (d << i));
   (local.set $d (ref.null $java.lang.Integer))
   ;; (i = (i + c));
   (local.set $i (i32.add (local.get $i) (i32.const 0)))
   ;; Integer e = ((c = (c + 1)),c);
   
   (local.set $e (block (result (ref null $java.lang.Integer))
    (local.set $c (ref.null $java.lang.Integer))
    (local.get $c)
   ))
   ;; (e = ((c = (c + 1)),c));
   (local.set $e (block (result (ref null $java.lang.Integer))
    (local.set $c (ref.null $java.lang.Integer))
    (local.get $c)
   ))
   ;; Double e2 = 100.0;
   
   (local.set $e2 (ref.null $java.lang.Double))
   ;; (e2 = (e2 + 1.0));
   (local.set $e2 (ref.null $java.lang.Double))
   ;; Integer f = (Integer $value = c,(c = (c + 1)),$value);
   
   (local.set $f (block (result (ref null $java.lang.Integer))
    
    (local.set $$value (local.get $c))
    (local.set $c (ref.null $java.lang.Integer))
    (local.get $$value)
   ))
   ;; (f = (Integer $value = c,(c = (c + 1)),$value));
   (local.set $f (block (result (ref null $java.lang.Integer))
    
    (local.set $$value_1 (local.get $c))
    (local.set $c (ref.null $java.lang.Integer))
    (local.get $$value_1)
   ))
   ;; Byte b = 0;
   
   (local.set $b (ref.null $java.lang.Byte))
   ;; (b = ((byte) (b + 1)));
   (local.set $b (ref.null $java.lang.Byte))
   ;; Character ch = 99;
   
   (local.set $ch (ref.null $java.lang.Character))
   ;; (ch = ((char) (ch + 1)));
   (local.set $ch (ref.null $java.lang.Character))
   (block
    ;; Integer $qualifier = ((f = (f + 1)),f);
    
    (local.set $$qualifier (block (result (ref null $java.lang.Integer))
     (local.set $f (ref.null $java.lang.Integer))
     (local.get $f)
    ))
    ;; $qualifier.intValue();
    (drop (call_ref (local.get $$qualifier)(struct.get $java.lang.Integer.vtable $m_intValue__int (struct.get $java.lang.Integer $vtable(local.get $$qualifier)))))
   )
   (block
    ;; Integer $qualifier = (Integer $value = f,(f = (f - 1)),$value);
    
    (local.set $$qualifier_1 (block (result (ref null $java.lang.Integer))
     
     (local.set $$value_2 (local.get $f))
     (local.set $f (ref.null $java.lang.Integer))
     (local.get $$value_2)
    ))
    ;; $qualifier.intValue();
    (drop (call_ref (local.get $$qualifier_1)(struct.get $java.lang.Integer.vtable $m_intValue__int (struct.get $java.lang.Integer $vtable(local.get $$qualifier_1)))))
   )
   ;; Ref<Integer> ref = null;
   
   (local.set $ref (ref.null $arithmeticexpressions.ArithmeticExpressions.1Ref))
   ;; (ref.field = (((Integer) ref.field) + 1));
   (struct.set $arithmeticexpressions.ArithmeticExpressions.1Ref $field@arithmeticexpressions.ArithmeticExpressions.1Ref  (local.get $ref) (ref.null $java.lang.Integer))
   ;; int n = (1 + ((Integer) ref.field));
   
   (local.set $n (i32.add (i32.const 1) (i32.const 0)))
  )
 )
)
(elem declare func $m_testCompoundBoxedTypes__void@arithmeticexpressions.ArithmeticExpressions)

;;; Integer ArithmeticExpressions.getInteger()
(func $m_getInteger__java_lang_Integer@arithmeticexpressions.ArithmeticExpressions
 (result (ref null $java.lang.Integer))
 (local $return.value (ref null $java.lang.Integer))
 (block $return.label
  (block
   ;; return null;
   (local.set $return.value (ref.null $java.lang.Integer))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; void ArithmeticExpressions.testSideEffect()
(func $m_testSideEffect__void@arithmeticexpressions.ArithmeticExpressions
 (local $$qualifier (ref null $arithmeticexpressions.ArithmeticExpressions))
 (block $return.label
  (block
   (block
    ;; ArithmeticExpressions $qualifier = arithmeticexpressions.ArithmeticExpressions.getWithSideEffect();
    
    (local.set $$qualifier (call $m_getWithSideEffect__arithmeticexpressions_ArithmeticExpressions@arithmeticexpressions.ArithmeticExpressions ))
    ;; ($qualifier.intField = ($qualifier.intField + 5));
    (struct.set $arithmeticexpressions.ArithmeticExpressions $intField@arithmeticexpressions.ArithmeticExpressions  (local.get $$qualifier) (i64.add (struct.get $arithmeticexpressions.ArithmeticExpressions $intField@arithmeticexpressions.ArithmeticExpressions  (local.get $$qualifier)) (i64.const 0)))
   )
  )
 )
)

;;; ArithmeticExpressions ArithmeticExpressions.getWithSideEffect()
(func $m_getWithSideEffect__arithmeticexpressions_ArithmeticExpressions@arithmeticexpressions.ArithmeticExpressions
 (result (ref null $arithmeticexpressions.ArithmeticExpressions))
 (local $return.value (ref null $arithmeticexpressions.ArithmeticExpressions))
 (block $return.label
  (block
   ;; return null;
   (local.set $return.value (ref.null $arithmeticexpressions.ArithmeticExpressions))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; void ArithmeticExpressions.testExtendedOperands()
(func $m_testExtendedOperands__void@arithmeticexpressions.ArithmeticExpressions
 (param $this.untyped (ref null $java.lang.Object))
 (local $boxedInteger (ref null $java.lang.Integer))
 (local $i i32)
 (local $l i64)
 (local $d f64)
 (local $this (ref null $arithmeticexpressions.ArithmeticExpressions))
 (local.set $this (ref.cast $java.lang.Object $arithmeticexpressions.ArithmeticExpressions (local.get $this.untyped) (global.get $arithmeticexpressions.ArithmeticExpressions.rtt)))
 (block $return.label
  (block
   ;; Integer boxedInteger = 3;
   
   (local.set $boxedInteger (ref.null $java.lang.Integer))
   ;; int i;
   
   ;; long l;
   
   ;; double d;
   
   ;; (l = ((2 - boxedInteger) - 2));
   (local.set $l (i64.sub (i64.const 0) (i64.const 2)))
   ;; (l = ((2 | boxedInteger) | 2));
   (local.set $l (i64.or (i64.const 0) (i64.const 2)))
   ;; (l = ((((1000000 * l) * 60) * 60) * 24));
   (local.set $l (i64.mul (i64.mul (i64.mul (i64.mul (i64.const 1000000) (local.get $l)) (i64.const 0)) (i64.const 0)) (i64.const 0)))
   ;; (l = ((((24 * 60) * 60) * l) * 1000000));
   (local.set $l (i64.mul (i64.mul (i64.const 0) (local.get $l)) (i64.const 1000000)))
   ;; (d = ((l = ((i = 20),i)),l));
   (local.set $d (f64.const 0.0))
   ;; (l = ((boxedInteger = ((i = 20),i)),boxedInteger));
   (local.set $l (i64.const 0))
   ;; (l = (((i + boxedInteger) + l) + 20));
   (local.set $l (i64.add (i64.add (i64.const 0) (local.get $l)) (i64.const 0)))
   ;; (d = ((20 + l) + d));
   (local.set $d (f64.add (f64.const 0.0) (local.get $d)))
  )
 )
)
(elem declare func $m_testExtendedOperands__void@arithmeticexpressions.ArithmeticExpressions)

;;; CLASS  Ref
(type $arithmeticexpressions.ArithmeticExpressions.1Ref (struct
 (field $vtable (ref null $arithmeticexpressions.ArithmeticExpressions.1Ref.vtable))
 (field $this@arithmeticexpressions.ArithmeticExpressions.1Ref (mut (ref null $arithmeticexpressions.ArithmeticExpressions)))
 (field $field@arithmeticexpressions.ArithmeticExpressions.1Ref (mut (ref null $java.lang.Object)))
))
(type $arithmeticexpressions.ArithmeticExpressions.1Ref.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))
(global $arithmeticexpressions.ArithmeticExpressions.1Ref.vtable (mut (ref null $arithmeticexpressions.ArithmeticExpressions.1Ref.vtable)) (ref.null $arithmeticexpressions.ArithmeticExpressions.1Ref.vtable))

;;; Ref()
(func $m_<init>__void_$pp_arithmeticexpressions@arithmeticexpressions.ArithmeticExpressions.1Ref
 (param $this (ref null $arithmeticexpressions.ArithmeticExpressions.1Ref))
 (result (ref null $arithmeticexpressions.ArithmeticExpressions.1Ref))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; Code for arithmeticexpressions.ArithmeticExpressions [vtable]
 (global.set $arithmeticexpressions.ArithmeticExpressions.vtable (struct.new_with_rtt $arithmeticexpressions.ArithmeticExpressions.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_testCoercions__void@arithmeticexpressions.ArithmeticExpressions) (ref.func $m_testPrimitives__void@arithmeticexpressions.ArithmeticExpressions) (ref.func $m_testCompoundArray__void@arithmeticexpressions.ArithmeticExpressions) (ref.func $m_testCompoundBoxedTypes__void@arithmeticexpressions.ArithmeticExpressions) (ref.func $m_testExtendedOperands__void@arithmeticexpressions.ArithmeticExpressions) (rtt.canon $arithmeticexpressions.ArithmeticExpressions.vtable)))
;;; Code for arithmeticexpressions.ArithmeticExpressions.1Ref [vtable]
 (global.set $arithmeticexpressions.ArithmeticExpressions.1Ref.vtable (struct.new_with_rtt $arithmeticexpressions.ArithmeticExpressions.1Ref.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (rtt.canon $arithmeticexpressions.ArithmeticExpressions.1Ref.vtable)))
))
(start $.runtime.init)

