;;; Code for arithmeticexpressions.ArithmeticExpressions [vtable]
(global $arithmeticexpressions.ArithmeticExpressions.vtable (mut (ref null $arithmeticexpressions.ArithmeticExpressions.vtable)) (ref.null $arithmeticexpressions.ArithmeticExpressions.vtable))

;;; Code for arithmeticexpressions.ArithmeticExpressions.1Ref [vtable]
(global $arithmeticexpressions.ArithmeticExpressions.1Ref.vtable (mut (ref null $arithmeticexpressions.ArithmeticExpressions.1Ref.vtable)) (ref.null $arithmeticexpressions.ArithmeticExpressions.1Ref.vtable))

;;; Code for arithmeticexpressions.ArithmeticExpressions [static fields]
(global $f_FLOAT_CONSTANT__arithmeticexpressions_ArithmeticExpressions_ f32 (f32.const 1.100000023841858))
(global $f_DOUBLE_CONSTANT__arithmeticexpressions_ArithmeticExpressions_ f64 (f64.const 1.100000023841858))
(global $f_DOUBLE_CONSTANT_WITH_ARITHMETIC__arithmeticexpressions_ArithmeticExpressions_ f64 (f64.const 2.200000047683716))
(global $f_one__arithmeticexpressions_ArithmeticExpressions (mut i64) (i64.const 0))
(global $f_foo__arithmeticexpressions_ArithmeticExpressions (mut i64) (i64.const 0))
(global $f_counter__arithmeticexpressions_ArithmeticExpressions_ (mut i64) (i64.const 0))
(global $f_$initialized__arithmeticexpressions_ArithmeticExpressions (mut i32) (i32.const 0))

;;; Code for arithmeticexpressions.ArithmeticExpressions.1Ref [static fields]
(global $f_$initialized__arithmeticexpressions_ArithmeticExpressions_1Ref (mut i32) (i32.const 0))

;;; Code for arithmeticexpressions.ArithmeticExpressions [CLASS]
(type $arithmeticexpressions.ArithmeticExpressions (struct
 (field $vtable (ref null $arithmeticexpressions.ArithmeticExpressions.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $f_bar__arithmeticexpressions_ArithmeticExpressions (mut i64))
 (field $f_intField__arithmeticexpressions_ArithmeticExpressions (mut i64))
))
(type $arithmeticexpressions.ArithmeticExpressions.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_testCoercions__void (mut (ref $function.__$void)))
 (field $m_testPrimitives__void (mut (ref $function.__$void)))
 (field $m_testCompoundArray__void (mut (ref $function.__$void)))
 (field $m_testCompoundBoxedTypes__void (mut (ref $function.__$void)))
 (field $m_testExtendedOperands__void (mut (ref $function.__$void)))
))

;;; ArithmeticExpressions()
(func $m_<init>__void@arithmeticexpressions.ArithmeticExpressions
 (param $this (ref null $arithmeticexpressions.ArithmeticExpressions))
 (result (ref null $arithmeticexpressions.ArithmeticExpressions))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
   ;; ArithmeticExpressions.this.$init();
   (call $$init__void_$p_arithmeticexpressions_ArithmeticExpressions@arithmeticexpressions.ArithmeticExpressions (local.get $this))
  )
 )
 (local.get $this)
)

;;; void ArithmeticExpressions.testCoercions()
(func $m_testCoercions__void@arithmeticexpressions.ArithmeticExpressions
 (param $this.untyped (ref null $java.lang.Object))
 (local $b i32)
 (local $c i32)
 (local $s i32)
 (local $i i32)
 (local $f f32)
 (local $d f64)
 (local $this (ref null $arithmeticexpressions.ArithmeticExpressions))
 (local.set $this (ref.cast $java.lang.Object $arithmeticexpressions.ArithmeticExpressions (local.get $this.untyped) (global.get $arithmeticexpressions.ArithmeticExpressions.rtt)))
 (block $return.label
  (block
   ;; byte b = 1;
   
   (local.set $b (i32.const 1))
   ;; char c = 1;
   
   (local.set $c (i32.const 1))
   ;; short s = 1;
   
   (local.set $s (i32.const 1))
   ;; int i = 1;
   
   (local.set $i (i32.const 1))
   ;; float f = 1.0;
   
   (local.set $f (f32.const 1.0))
   ;; double d = 1.0;
   
   (local.set $d (f64.const 1.0))
   ;; (b = -1);
   (local.set $b (i32.const -1))
   ;; (c = 65535);
   (local.set $c (i32.const 65535))
   ;; (s = -1);
   (local.set $s (i32.const -1))
   ;; (i = -1);
   (local.set $i (i32.const -1))
   ;; (f = 9.223372036854776E18);
   (local.set $f (f32.const 9.223372036854776E18))
   ;; (d = 9.223372036854776E18);
   (local.set $d (f64.const 9.223372036854776E18))
  )
 )
)
(elem declare func $m_testCoercions__void@arithmeticexpressions.ArithmeticExpressions)

;;; void ArithmeticExpressions.testPrimitives()
(func $m_testPrimitives__void@arithmeticexpressions.ArithmeticExpressions
 (param $this.untyped (ref null $java.lang.Object))
 (local $a i32)
 (local $b i32)
 (local $$value i32)
 (local $c i32)
 (local $$value_1 i32)
 (local $d i32)
 (local $e i32)
 (local $f i32)
 (local $g i32)
 (local $h i32)
 (local $i i32)
 (local $j i32)
 (local $p i32)
 (local $k i32)
 (local $l i32)
 (local $m i32)
 (local $o f64)
 (local $s i32)
 (local $q i32)
 (local $this (ref null $arithmeticexpressions.ArithmeticExpressions))
 (local.set $this (ref.cast $java.lang.Object $arithmeticexpressions.ArithmeticExpressions (local.get $this.untyped) (global.get $arithmeticexpressions.ArithmeticExpressions.rtt)))
 (block $return.label
  (block
   ;; int a = 10,int b = (int $value = a,(a = (a + 1)),$value),int c = (int $value = a,(a = (a - 1)),$value),int d = ((a = (a + 1)),a),int e = ((a = (a - 1)),a),int f = (0 - a),int g = a,int h = (-1 ^ a),int i = (((1 + 1) + 2) - 5),int j = ((1 + 2) * (3 + 4)),int p = (((1 / 2) * 3) % 4);
   
   (local.set $a (i32.const 10))
   (local.set $b (block (result i32)
    
    (local.set $$value (local.get $a))
    (local.set $a (i32.add (local.get $a) (i32.const 1)))
    (local.get $$value)
   ))
   (local.set $c (block (result i32)
    
    (local.set $$value_1 (local.get $a))
    (local.set $a (i32.sub (local.get $a) (i32.const 1)))
    (local.get $$value_1)
   ))
   (local.set $d (block (result i32)
    (local.set $a (i32.add (local.get $a) (i32.const 1)))
    (local.get $a)
   ))
   (local.set $e (block (result i32)
    (local.set $a (i32.sub (local.get $a) (i32.const 1)))
    (local.get $a)
   ))
   (local.set $f (i32.sub (i32.const 0) (local.get $a)))
   (local.set $g (local.get $a))
   (local.set $h (i32.xor (i32.const -1) (local.get $a)))
   (local.set $i (i32.sub (i32.add (i32.add (i32.const 1) (i32.const 1)) (i32.const 2)) (i32.const 5)))
   (local.set $j (i32.mul (i32.add (i32.const 1) (i32.const 2)) (i32.add (i32.const 3) (i32.const 4))))
   (local.set $p (i32.rem_s (i32.mul (i32.div_s (i32.const 1) (i32.const 2)) (i32.const 3)) (i32.const 4)))
   ;; boolean k = !(((1 + 2) + 3) == 4),boolean l = ((1 + 2) != 4),boolean m = (javaemul.internal.Primitives.widenLongToDouble(java.lang.Long.MAX_VALUE) != 9.223372036854778E18);
   
   (local.set $k (i32.eqz (i32.eq (i32.add (i32.add (i32.const 1) (i32.const 2)) (i32.const 3)) (i32.const 4))))
   (local.set $l (i32.ne (i32.add (i32.const 1) (i32.const 2)) (i32.const 4)))
   (local.set $m (f64.ne (f64.convert_i64_s (global.get $f_MAX_VALUE__java_lang_Long)) (f64.const 9.223372036854778E18)))
   ;; double o = (javaemul.internal.Primitives.widenIntToDouble(((5 + 1) / 2)) - 0.0);
   
   (local.set $o (f64.sub (f64.convert_i32_s (i32.div_s (i32.add (i32.const 5) (i32.const 1)) (i32.const 2))) (f64.const 0.0)))
   ;; (a = (a << 31));
   (local.set $a (i32.shl (local.get $a) (i32.const 31)))
   ;; (a = (a << 1));
   (local.set $a (i32.shl (local.get $a) (i32.const 1)))
   ;; (a = javaemul.internal.Primitives.narrowLongToInt((javaemul.internal.Primitives.widenIntToLong(a) + 1)));
   (local.set $a (i32.wrap_i64 (i64.add (i64.extend_i32_s (local.get $a)) (i64.const 1))))
   ;; (a = javaemul.internal.Primitives.narrowLongToInt((javaemul.internal.Primitives.widenIntToLong(a) / 1)));
   (local.set $a (i32.wrap_i64 (i64.div_s (i64.extend_i32_s (local.get $a)) (i64.const 1))))
   ;; (a = javaemul.internal.Primitives.narrowDoubleToInt((javaemul.internal.Primitives.widenIntToDouble(a) + java.lang.Double.MAX_VALUE)));
   (local.set $a (i32.trunc_sat_f64_s (f64.add (f64.convert_i32_s (local.get $a)) (global.get $f_MAX_VALUE__java_lang_Double))))
   ;; (k = (k | true));
   (local.set $k (i32.or (local.get $k) (i32.const 1)))
   ;; short s = 10;
   
   (local.set $s (i32.const 10))
   ;; (k = (((s = javaemul.internal.Primitives.narrowIntToShort(javaemul.internal.Primitives.narrowIntToShort((s + 1)))),s) == 10));
   (local.set $k (i32.eq (block (result i32)
    (local.set $s (i32.extend16_s (i32.extend16_s (i32.add (local.get $s) (i32.const 1)))))
    (local.get $s)
   ) (i32.const 10)))
   ;; int q = (3 >> 2);
   
   (local.set $q (i32.shr_s (i32.const 3) (i32.const 2)))
   ;; (q = (3 >>> 2));
   (local.set $q (i32.shr_u (i32.const 3) (i32.const 2)))
  )
 )
)
(elem declare func $m_testPrimitives__void@arithmeticexpressions.ArithmeticExpressions)

;;; void ArithmeticExpressions.testCompoundArray()
(func $m_testCompoundArray__void@arithmeticexpressions.ArithmeticExpressions
 (param $this.untyped (ref null $java.lang.Object))
 (local $ints (ref null $int.array))
 (local $i i32)
 (local $$array (ref null $int.array))
 (local $$index i32)
 (local $$value i32)
 (local $$array_1 (ref null $int.array))
 (local $$index_1 i32)
 (local $$array_2 (ref null $int.array))
 (local $$index_2 i32)
 (local $$value_1 i32)
 (local $longs (ref null $long.array))
 (local $$array_3 (ref null $long.array))
 (local $$index_3 i32)
 (local $booleans (ref null $boolean.array))
 (local $strings (ref null $Object.array))
 (local $$cast_expression (ref null $java.lang.Object))
 (local $shorts (ref null $short.array))
 (local $b i32)
 (local $$array_4 (ref null $short.array))
 (local $$index_4 i32)
 (local $$value_2 i32)
 (local $this (ref null $arithmeticexpressions.ArithmeticExpressions))
 (local.set $this (ref.cast $java.lang.Object $arithmeticexpressions.ArithmeticExpressions (local.get $this.untyped) (global.get $arithmeticexpressions.ArithmeticExpressions.rtt)))
 (block $return.label
  (block
   ;; int[] ints = null;
   
   (local.set $ints (ref.null $int.array))
   ;; (ints[0] = (ints[0] + 1));
   (array.set $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0) (i32.add (array.get $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0)) (i32.const 1)))
   ;; (ints[0] = (ints[0] - 1));
   (array.set $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0) (i32.sub (array.get $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0)) (i32.const 1)))
   ;; (ints[0] = (ints[0] * 1));
   (array.set $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0) (i32.mul (array.get $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0)) (i32.const 1)))
   ;; (ints[0] = (ints[0] / 1));
   (array.set $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0) (i32.div_s (array.get $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0)) (i32.const 1)))
   ;; (ints[0] = (ints[0] & 1));
   (array.set $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0) (i32.and (array.get $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0)) (i32.const 1)))
   ;; (ints[0] = (ints[0] ^ 1));
   (array.set $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0) (i32.xor (array.get $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0)) (i32.const 1)))
   ;; (ints[0] = (ints[0] | 1));
   (array.set $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0) (i32.or (array.get $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0)) (i32.const 1)))
   ;; (ints[0] = (ints[0] % 1));
   (array.set $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0) (i32.rem_s (array.get $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0)) (i32.const 1)))
   ;; (ints[0] = (ints[0] << 1));
   (array.set $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0) (i32.shl (array.get $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0)) (i32.const 1)))
   ;; (ints[0] = (ints[0] >> 1));
   (array.set $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0) (i32.shr_s (array.get $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0)) (i32.const 1)))
   ;; (ints[0] = (ints[0] >>> 1));
   (array.set $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0) (i32.shr_u (array.get $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0)) (i32.const 1)))
   ;; (ints[0] = (ints[0] + 1));
   (array.set $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0) (i32.add (array.get $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0)) (i32.const 1)))
   ;; (ints[0] = (ints[0] + 1));
   (array.set $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0) (i32.add (array.get $int.array.elements (struct.get $int.array $elements (local.get $ints)) (i32.const 0)) (i32.const 1)))
   ;; int i = 0;
   
   (local.set $i (i32.const 0))
   (block
    ;; int[] $array = ints,int $index = (int $value = i,(i = (i + 1)),$value);
    
    (local.set $$array (local.get $ints))
    (local.set $$index (block (result i32)
     
     (local.set $$value (local.get $i))
     (local.set $i (i32.add (local.get $i) (i32.const 1)))
     (local.get $$value)
    ))
    ;; ($array[$index] = ($array[$index] + 1));
    (array.set $int.array.elements (struct.get $int.array $elements (local.get $$array)) (local.get $$index) (i32.add (array.get $int.array.elements (struct.get $int.array $elements (local.get $$array)) (local.get $$index)) (i32.const 1)))
   )
   (block
    ;; int[] $array = ints,int $index = ((i = (i + 1)),i);
    
    (local.set $$array_1 (local.get $ints))
    (local.set $$index_1 (block (result i32)
     (local.set $i (i32.add (local.get $i) (i32.const 1)))
     (local.get $i)
    ))
    ;; ($array[$index] = ($array[$index] + 1));
    (array.set $int.array.elements (struct.get $int.array $elements (local.get $$array_1)) (local.get $$index_1) (i32.add (array.get $int.array.elements (struct.get $int.array $elements (local.get $$array_1)) (local.get $$index_1)) (i32.const 1)))
   )
   (block
    ;; int[] $array = ints,int $index = (int $value = i,(i = (i + 1)),$value);
    
    (local.set $$array_2 (local.get $ints))
    (local.set $$index_2 (block (result i32)
     
     (local.set $$value_1 (local.get $i))
     (local.set $i (i32.add (local.get $i) (i32.const 1)))
     (local.get $$value_1)
    ))
    ;; ($array[$index] = ($array[$index] / 1));
    (array.set $int.array.elements (struct.get $int.array $elements (local.get $$array_2)) (local.get $$index_2) (i32.div_s (array.get $int.array.elements (struct.get $int.array $elements (local.get $$array_2)) (local.get $$index_2)) (i32.const 1)))
   )
   ;; long[] longs = null;
   
   (local.set $longs (ref.null $long.array))
   ;; (longs[0] = (longs[0] + 1));
   (array.set $long.array.elements (struct.get $long.array $elements (local.get $longs)) (i32.const 0) (i64.add (array.get $long.array.elements (struct.get $long.array $elements (local.get $longs)) (i32.const 0)) (i64.const 1)))
   ;; (longs[0] = (longs[0] - 1));
   (array.set $long.array.elements (struct.get $long.array $elements (local.get $longs)) (i32.const 0) (i64.sub (array.get $long.array.elements (struct.get $long.array $elements (local.get $longs)) (i32.const 0)) (i64.const 1)))
   ;; (longs[0] = (longs[0] - 1));
   (array.set $long.array.elements (struct.get $long.array $elements (local.get $longs)) (i32.const 0) (i64.sub (array.get $long.array.elements (struct.get $long.array $elements (local.get $longs)) (i32.const 0)) (i64.const 1)))
   (block
    ;; long[] $array = arithmeticexpressions.ArithmeticExpressions.getLongArray(),int $index = 0;
    
    (local.set $$array_3 (call $m_getLongArray__arrayOf_long@arithmeticexpressions.ArithmeticExpressions ))
    (local.set $$index_3 (i32.const 0))
    ;; ($array[$index] = ($array[$index] + 1));
    (array.set $long.array.elements (struct.get $long.array $elements (local.get $$array_3)) (local.get $$index_3) (i64.add (array.get $long.array.elements (struct.get $long.array $elements (local.get $$array_3)) (local.get $$index_3)) (i64.const 1)))
   )
   ;; boolean[] booleans = null;
   
   (local.set $booleans (ref.null $boolean.array))
   ;; (booleans[0] = (booleans[0] | true));
   (array.set $boolean.array.elements (struct.get $boolean.array $elements (local.get $booleans)) (i32.const 0) (i32.or (array.get $boolean.array.elements (struct.get $boolean.array $elements (local.get $booleans)) (i32.const 0)) (i32.const 1)))
   ;; String[] strings = null;
   
   (local.set $strings (ref.null $Object.array))
   ;; (strings[0] = ((Object $cast_expression = strings[0],(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((String) $cast_expression))) + null));
   (array.set $Object.array.elements (struct.get $Object.array $elements (local.get $strings)) (i32.const 0) (ref.null $java.lang.String))
   ;; short[] shorts = null;
   
   (local.set $shorts (ref.null $short.array))
   ;; boolean b = ((short[] $array = shorts,int $index = 0,short $value = javaemul.internal.Primitives.narrowIntToShort(javaemul.internal.Primitives.narrowIntToShort((shorts[0] + 1))),($array[$index] = $value),$value) == 10);
   
   (local.set $b (i32.eq (block (result i32)
    
    (local.set $$array_4 (local.get $shorts))
    (local.set $$index_4 (i32.const 0))
    (local.set $$value_2 (i32.extend16_s (i32.extend16_s (i32.add (array.get $short.array.elements (struct.get $short.array $elements (local.get $shorts)) (i32.const 0)) (i32.const 1)))))
    (array.set $short.array.elements (struct.get $short.array $elements (local.get $$array_4)) (local.get $$index_4) (local.get $$value_2))
    (local.get $$value_2)
   ) (i32.const 10)))
  )
 )
)
(elem declare func $m_testCompoundArray__void@arithmeticexpressions.ArithmeticExpressions)

;;; long[] ArithmeticExpressions.getLongArray()
(func $m_getLongArray__arrayOf_long@arithmeticexpressions.ArithmeticExpressions
 (result (ref null $long.array))
 (local $return.value (ref null $long.array))
 (block $return.label
  (block
   ;; return null;
   (local.set $return.value (ref.null $long.array))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; void ArithmeticExpressions.testCompoundBoxedTypes()
(func $m_testCompoundBoxedTypes__void@arithmeticexpressions.ArithmeticExpressions
 (param $this.untyped (ref null $java.lang.Object))
 (local $c (ref null $java.lang.Integer))
 (local $d (ref null $java.lang.Integer))
 (local $i i32)
 (local $e (ref null $java.lang.Integer))
 (local $e2 (ref null $java.lang.Double))
 (local $f (ref null $java.lang.Integer))
 (local $$value (ref null $java.lang.Integer))
 (local $$value_1 (ref null $java.lang.Integer))
 (local $b (ref null $java.lang.Byte))
 (local $ch (ref null $java.lang.Character))
 (local $$qualifier (ref null $java.lang.Integer))
 (local $$qualifier_1 (ref null $java.lang.Integer))
 (local $$value_2 (ref null $java.lang.Integer))
 (local $ref (ref null $arithmeticexpressions.ArithmeticExpressions.1Ref))
 (local $$cast_expression (ref null $java.lang.Object))
 (local $n i32)
 (local $$cast_expression_1 (ref null $java.lang.Object))
 (local $this (ref null $arithmeticexpressions.ArithmeticExpressions))
 (local.set $this (ref.cast $java.lang.Object $arithmeticexpressions.ArithmeticExpressions (local.get $this.untyped) (global.get $arithmeticexpressions.ArithmeticExpressions.rtt)))
 (block $return.label
  (block
   ;; Integer c = 1000;
   
   (local.set $c (ref.null $java.lang.Integer))
   ;; Integer d = 10000;
   
   (local.set $d (ref.null $java.lang.Integer))
   ;; (d = (d + c));
   (local.set $d (ref.null $java.lang.Integer))
   ;; int i = 43;
   
   (local.set $i (i32.const 43))
   ;; (d = (d + i));
   (local.set $d (ref.null $java.lang.Integer))
   ;; (d = (d << i));
   (local.set $d (ref.null $java.lang.Integer))
   ;; (i = (i + c));
   (local.set $i (i32.add (local.get $i) (i32.const 0)))
   ;; Integer e = ((c = (c + 1)),c);
   
   (local.set $e (block (result (ref null $java.lang.Integer))
    (local.set $c (ref.null $java.lang.Integer))
    (local.get $c)
   ))
   ;; (e = ((c = (c + 1)),c));
   (local.set $e (block (result (ref null $java.lang.Integer))
    (local.set $c (ref.null $java.lang.Integer))
    (local.get $c)
   ))
   ;; Double e2 = 100.0;
   
   (local.set $e2 (ref.null $java.lang.Double))
   ;; (e2 = (e2 + 1.0));
   (local.set $e2 (ref.null $java.lang.Double))
   ;; Integer f = (Integer $value = c,(c = (c + 1)),$value);
   
   (local.set $f (block (result (ref null $java.lang.Integer))
    
    (local.set $$value (local.get $c))
    (local.set $c (ref.null $java.lang.Integer))
    (local.get $$value)
   ))
   ;; (f = (Integer $value = c,(c = (c + 1)),$value));
   (local.set $f (block (result (ref null $java.lang.Integer))
    
    (local.set $$value_1 (local.get $c))
    (local.set $c (ref.null $java.lang.Integer))
    (local.get $$value_1)
   ))
   ;; Byte b = 0;
   
   (local.set $b (ref.null $java.lang.Byte))
   ;; (b = javaemul.internal.Primitives.narrowIntToByte((b + 1)));
   (local.set $b (ref.null $java.lang.Byte))
   ;; Character ch = 99;
   
   (local.set $ch (ref.null $java.lang.Character))
   ;; (ch = javaemul.internal.Primitives.narrowIntToChar((ch + 1)));
   (local.set $ch (ref.null $java.lang.Character))
   (block
    ;; Integer $qualifier = ((f = (f + 1)),f);
    
    (local.set $$qualifier (block (result (ref null $java.lang.Integer))
     (local.set $f (ref.null $java.lang.Integer))
     (local.get $f)
    ))
    ;; $qualifier.intValue();
    (drop (call_ref (local.get $$qualifier)(struct.get $java.lang.Integer.vtable $m_intValue__int (struct.get $java.lang.Integer $vtable(local.get $$qualifier)))))
   )
   (block
    ;; Integer $qualifier = (Integer $value = f,(f = (f - 1)),$value);
    
    (local.set $$qualifier_1 (block (result (ref null $java.lang.Integer))
     
     (local.set $$value_2 (local.get $f))
     (local.set $f (ref.null $java.lang.Integer))
     (local.get $$value_2)
    ))
    ;; $qualifier.intValue();
    (drop (call_ref (local.get $$qualifier_1)(struct.get $java.lang.Integer.vtable $m_intValue__int (struct.get $java.lang.Integer $vtable(local.get $$qualifier_1)))))
   )
   ;; Ref<Integer> ref = null;
   
   (local.set $ref (ref.null $arithmeticexpressions.ArithmeticExpressions.1Ref))
   ;; (ref.field = ((Object $cast_expression = ref.field,(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((Integer) $cast_expression))) + 1));
   (struct.set $arithmeticexpressions.ArithmeticExpressions.1Ref $f_field__arithmeticexpressions_ArithmeticExpressions_1Ref(local.get $ref) (ref.null $java.lang.Integer))
   ;; int n = (1 + (Object $cast_expression = ref.field,(javaemul.internal.Platform.isNull($cast_expression)) ? (null) : (((Integer) $cast_expression))));
   
   (local.set $n (i32.add (i32.const 1) (i32.const 0)))
  )
 )
)
(elem declare func $m_testCompoundBoxedTypes__void@arithmeticexpressions.ArithmeticExpressions)

;;; Integer ArithmeticExpressions.getInteger()
(func $m_getInteger__java_lang_Integer@arithmeticexpressions.ArithmeticExpressions
 (result (ref null $java.lang.Integer))
 (local $return.value (ref null $java.lang.Integer))
 (block $return.label
  (block
   ;; return null;
   (local.set $return.value (ref.null $java.lang.Integer))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; void ArithmeticExpressions.testSideEffect()
(func $m_testSideEffect__void@arithmeticexpressions.ArithmeticExpressions
 (local $$qualifier (ref null $arithmeticexpressions.ArithmeticExpressions))
 (block $return.label
  (block
   (block
    ;; ArithmeticExpressions $qualifier = arithmeticexpressions.ArithmeticExpressions.getWithSideEffect();
    
    (local.set $$qualifier (call $m_getWithSideEffect__arithmeticexpressions_ArithmeticExpressions@arithmeticexpressions.ArithmeticExpressions ))
    ;; ($qualifier.intField = ($qualifier.intField + 5));
    (struct.set $arithmeticexpressions.ArithmeticExpressions $f_intField__arithmeticexpressions_ArithmeticExpressions(local.get $$qualifier) (i64.add (struct.get $arithmeticexpressions.ArithmeticExpressions $f_intField__arithmeticexpressions_ArithmeticExpressions(local.get $$qualifier)) (i64.const 5)))
   )
  )
 )
)

;;; ArithmeticExpressions ArithmeticExpressions.getWithSideEffect()
(func $m_getWithSideEffect__arithmeticexpressions_ArithmeticExpressions@arithmeticexpressions.ArithmeticExpressions
 (result (ref null $arithmeticexpressions.ArithmeticExpressions))
 (local $return.value (ref null $arithmeticexpressions.ArithmeticExpressions))
 (block $return.label
  (block
   ;; return null;
   (local.set $return.value (ref.null $arithmeticexpressions.ArithmeticExpressions))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; void ArithmeticExpressions.testExtendedOperands()
(func $m_testExtendedOperands__void@arithmeticexpressions.ArithmeticExpressions
 (param $this.untyped (ref null $java.lang.Object))
 (local $boxedInteger (ref null $java.lang.Integer))
 (local $i i32)
 (local $l i64)
 (local $d f64)
 (local $this (ref null $arithmeticexpressions.ArithmeticExpressions))
 (local.set $this (ref.cast $java.lang.Object $arithmeticexpressions.ArithmeticExpressions (local.get $this.untyped) (global.get $arithmeticexpressions.ArithmeticExpressions.rtt)))
 (block $return.label
  (block
   ;; Integer boxedInteger = 3;
   
   (local.set $boxedInteger (ref.null $java.lang.Integer))
   ;; int i;
   
   ;; long l;
   
   ;; double d;
   
   ;; (l = (javaemul.internal.Primitives.widenIntToLong((2 - boxedInteger)) - 2));
   (local.set $l (i64.sub (i64.extend_i32_s (i32.sub (i32.const 2) (i32.const 0))) (i64.const 2)))
   ;; (l = (javaemul.internal.Primitives.widenIntToLong((2 | boxedInteger)) | 2));
   (local.set $l (i64.or (i64.extend_i32_s (i32.or (i32.const 2) (i32.const 0))) (i64.const 2)))
   ;; (l = ((((1000000 * l) * 60) * 60) * 24));
   (local.set $l (i64.mul (i64.mul (i64.mul (i64.mul (i64.const 1000000) (local.get $l)) (i64.const 60)) (i64.const 60)) (i64.const 24)))
   ;; (l = ((javaemul.internal.Primitives.widenIntToLong(((24 * 60) * 60)) * l) * 1000000));
   (local.set $l (i64.mul (i64.mul (i64.extend_i32_s (i32.mul (i32.mul (i32.const 24) (i32.const 60)) (i32.const 60))) (local.get $l)) (i64.const 1000000)))
   ;; (d = javaemul.internal.Primitives.widenLongToDouble(((l = javaemul.internal.Primitives.widenIntToLong(((i = 20),i))),l)));
   (local.set $d (f64.convert_i64_s (block (result i64)
    (local.set $l (i64.extend_i32_s (block (result i32)
     (local.set $i (i32.const 20))
     (local.get $i)
    )))
    (local.get $l)
   )))
   ;; (l = ((boxedInteger = ((i = 20),i)),boxedInteger));
   (local.set $l (i64.const 0))
   ;; (l = ((javaemul.internal.Primitives.widenIntToLong((i + boxedInteger)) + l) + 20));
   (local.set $l (i64.add (i64.add (i64.extend_i32_s (i32.add (local.get $i) (i32.const 0))) (local.get $l)) (i64.const 20)))
   ;; (d = (javaemul.internal.Primitives.widenLongToDouble((20 + l)) + d));
   (local.set $d (f64.add (f64.convert_i64_s (i64.add (i64.const 20) (local.get $l))) (local.get $d)))
  )
 )
)
(elem declare func $m_testExtendedOperands__void@arithmeticexpressions.ArithmeticExpressions)

;;; long ArithmeticExpressions.incrementCounter()
(func $m_incrementCounter__long@arithmeticexpressions.ArithmeticExpressions
 (result i64)
 (local $return.value i64)
 (local $$value i64)
 (block $return.label
  (block
   ;; return (long $value = (arithmeticexpressions.ArithmeticExpressions.counter + 1),(arithmeticexpressions.ArithmeticExpressions.counter = $value),$value);
   (local.set $return.value (block (result i64)
    
    (local.set $$value (i64.add (global.get $f_counter__arithmeticexpressions_ArithmeticExpressions_) (i64.const 1)))
    (global.set $f_counter__arithmeticexpressions_ArithmeticExpressions_ (local.get $$value))
    (local.get $$value)
   ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; void ArithmeticExpressions.$init()
(func $$init__void_$p_arithmeticexpressions_ArithmeticExpressions@arithmeticexpressions.ArithmeticExpressions
 (param $this (ref null $arithmeticexpressions.ArithmeticExpressions))
 (local $$value i64)
 (block $return.label
  (block
   ;; (ArithmeticExpressions.this.bar = (long $value = (arithmeticexpressions.ArithmeticExpressions.$clinit(),arithmeticexpressions.ArithmeticExpressions.foo),arithmeticexpressions.ArithmeticExpressions.$clinit(),(arithmeticexpressions.ArithmeticExpressions.foo = ((arithmeticexpressions.ArithmeticExpressions.$clinit(),arithmeticexpressions.ArithmeticExpressions.foo) + 1)),$value));
   (struct.set $arithmeticexpressions.ArithmeticExpressions $f_bar__arithmeticexpressions_ArithmeticExpressions(local.get $this) (block (result i64)
    
    (local.set $$value (block (result i64)
     (call $$clinit__void@arithmeticexpressions.ArithmeticExpressions )
     (global.get $f_foo__arithmeticexpressions_ArithmeticExpressions)
    ))
    (call $$clinit__void@arithmeticexpressions.ArithmeticExpressions )
    (global.set $f_foo__arithmeticexpressions_ArithmeticExpressions (i64.add (block (result i64)
     (call $$clinit__void@arithmeticexpressions.ArithmeticExpressions )
     (global.get $f_foo__arithmeticexpressions_ArithmeticExpressions)
    ) (i64.const 1)))
    (local.get $$value)
   ))
  )
 )
)

;;; void ArithmeticExpressions.$clinit()
(func $$clinit__void@arithmeticexpressions.ArithmeticExpressions
 (local $$value i64)
 (block $return.label
  (block
   ;; if (arithmeticexpressions.ArithmeticExpressions.$initialized) return;
   (if (global.get $f_$initialized__arithmeticexpressions_ArithmeticExpressions)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (arithmeticexpressions.ArithmeticExpressions.$initialized = true);
   (global.set $f_$initialized__arithmeticexpressions_ArithmeticExpressions (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
   (block
    ;; arithmeticexpressions.ArithmeticExpressions.$clinit();
    (call $$clinit__void@arithmeticexpressions.ArithmeticExpressions )
    ;; (arithmeticexpressions.ArithmeticExpressions.one = 1);
    (global.set $f_one__arithmeticexpressions_ArithmeticExpressions (i64.const 1))
   )
   (block
    ;; arithmeticexpressions.ArithmeticExpressions.$clinit();
    (call $$clinit__void@arithmeticexpressions.ArithmeticExpressions )
    ;; (arithmeticexpressions.ArithmeticExpressions.foo = (long $value = (arithmeticexpressions.ArithmeticExpressions.$clinit(),arithmeticexpressions.ArithmeticExpressions.one),arithmeticexpressions.ArithmeticExpressions.$clinit(),(arithmeticexpressions.ArithmeticExpressions.one = ((arithmeticexpressions.ArithmeticExpressions.$clinit(),arithmeticexpressions.ArithmeticExpressions.one) + 1)),$value));
    (global.set $f_foo__arithmeticexpressions_ArithmeticExpressions (block (result i64)
     
     (local.set $$value (block (result i64)
      (call $$clinit__void@arithmeticexpressions.ArithmeticExpressions )
      (global.get $f_one__arithmeticexpressions_ArithmeticExpressions)
     ))
     (call $$clinit__void@arithmeticexpressions.ArithmeticExpressions )
     (global.set $f_one__arithmeticexpressions_ArithmeticExpressions (i64.add (block (result i64)
      (call $$clinit__void@arithmeticexpressions.ArithmeticExpressions )
      (global.get $f_one__arithmeticexpressions_ArithmeticExpressions)
     ) (i64.const 1)))
     (local.get $$value)
    ))
   )
   ;; (arithmeticexpressions.ArithmeticExpressions.counter = 0);
   (global.set $f_counter__arithmeticexpressions_ArithmeticExpressions_ (i64.const 0))
  )
 )
)

;;; Code for arithmeticexpressions.ArithmeticExpressions.1Ref [CLASS]
(type $arithmeticexpressions.ArithmeticExpressions.1Ref (struct
 (field $vtable (ref null $arithmeticexpressions.ArithmeticExpressions.1Ref.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
 (field $$outer_this__arithmeticexpressions_ArithmeticExpressions_1Ref (mut (ref null $arithmeticexpressions.ArithmeticExpressions)))
 (field $f_field__arithmeticexpressions_ArithmeticExpressions_1Ref (mut (ref null $java.lang.Object)))
))
(type $arithmeticexpressions.ArithmeticExpressions.1Ref.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))

;;; Ref(ArithmeticExpressions $outer_this)
(func $m_<init>__arithmeticexpressions_ArithmeticExpressions__void_$pp_arithmeticexpressions@arithmeticexpressions.ArithmeticExpressions.1Ref
 (param $this (ref null $arithmeticexpressions.ArithmeticExpressions.1Ref))
 (param $$outer_this (ref null $arithmeticexpressions.ArithmeticExpressions))
 (result (ref null $arithmeticexpressions.ArithmeticExpressions.1Ref))
 (block $return.label
  (block
   ;; ($1Ref.this.this = $outer_this);
   (struct.set $arithmeticexpressions.ArithmeticExpressions.1Ref $$outer_this__arithmeticexpressions_ArithmeticExpressions_1Ref(local.get $this) (local.get $$outer_this))
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void Ref.$clinit()
(func $$clinit__void@arithmeticexpressions.ArithmeticExpressions.1Ref
 (block $return.label
  (block
   ;; if (arithmeticexpressions.ArithmeticExpressions.1Ref.$initialized) return;
   (if (global.get $f_$initialized__arithmeticexpressions_ArithmeticExpressions_1Ref)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (arithmeticexpressions.ArithmeticExpressions.1Ref.$initialized = true);
   (global.set $f_$initialized__arithmeticexpressions_ArithmeticExpressions_1Ref (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

 ;;; Code for arithmeticexpressions.ArithmeticExpressions [vtable.init]
 (global.set $arithmeticexpressions.ArithmeticExpressions.vtable (struct.new_with_rtt $arithmeticexpressions.ArithmeticExpressions.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (ref.func $m_testCoercions__void@arithmeticexpressions.ArithmeticExpressions) (ref.func $m_testPrimitives__void@arithmeticexpressions.ArithmeticExpressions) (ref.func $m_testCompoundArray__void@arithmeticexpressions.ArithmeticExpressions) (ref.func $m_testCompoundBoxedTypes__void@arithmeticexpressions.ArithmeticExpressions) (ref.func $m_testExtendedOperands__void@arithmeticexpressions.ArithmeticExpressions) (rtt.canon $arithmeticexpressions.ArithmeticExpressions.vtable)))

 ;;; Code for arithmeticexpressions.ArithmeticExpressions.1Ref [vtable.init]
 (global.set $arithmeticexpressions.ArithmeticExpressions.1Ref.vtable (struct.new_with_rtt $arithmeticexpressions.ArithmeticExpressions.1Ref.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@java.lang.Object) (rtt.canon $arithmeticexpressions.ArithmeticExpressions.1Ref.vtable)))
