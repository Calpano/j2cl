;;; Code for jstypewithnamespace.JsTypeWithNamespace [vtable]
(global $jstypewithnamespace.JsTypeWithNamespace.vtable (mut (ref null $jstypewithnamespace.JsTypeWithNamespace.vtable)) (ref.null $jstypewithnamespace.JsTypeWithNamespace.vtable))

;;; Code for jstypewithnamespace.JsTypeWithNamespace [static fields]
(global $f_$initialized__jstypewithnamespace_JsTypeWithNamespace (mut i32) (i32.const 0))

;;; Code for jstypewithnamespace.JsTypeWithNamespace [CLASS]
(type $jstypewithnamespace.JsTypeWithNamespace (struct
 (field $vtable (ref null $jstypewithnamespace.JsTypeWithNamespace.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $jstypewithnamespace.JsTypeWithNamespace.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))

;;; JsTypeWithNamespace()
(func $m_<init>__void@jstypewithnamespace.JsTypeWithNamespace
 (param $this (ref null $jstypewithnamespace.JsTypeWithNamespace))
 (result (ref null $jstypewithnamespace.JsTypeWithNamespace))
 (block $return.label
  (block
   ;; jstypewithnamespace.JsTypeWithNamespace.$clinit();
   (call $$clinit__void@jstypewithnamespace.JsTypeWithNamespace )
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; void JsTypeWithNamespace.$clinit()
(func $$clinit__void@jstypewithnamespace.JsTypeWithNamespace
 (block $return.label
  (block
   ;; if (jstypewithnamespace.JsTypeWithNamespace.$initialized) return;
   (if (global.get $f_$initialized__jstypewithnamespace_JsTypeWithNamespace)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (jstypewithnamespace.JsTypeWithNamespace.$initialized = true);
   (global.set $f_$initialized__jstypewithnamespace_JsTypeWithNamespace (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> JsTypeWithNamespace.getClass()
(func $m_getClass__java_lang_Class@jstypewithnamespace.JsTypeWithNamespace
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $jstypewithnamespace.JsTypeWithNamespace))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $jstypewithnamespace.JsTypeWithNamespace.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getJstypewithnamespace.JsTypeWithNamespace();
   (local.set $return.value (call $$getJstypewithnamespace.JsTypeWithNamespace__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@jstypewithnamespace.JsTypeWithNamespace)

 ;;; Code for jstypewithnamespace.JsTypeWithNamespace [vtable.init]
 (global.set $jstypewithnamespace.JsTypeWithNamespace.vtable (struct.new_with_rtt $jstypewithnamespace.JsTypeWithNamespace.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@jstypewithnamespace.JsTypeWithNamespace) (rtt.canon $jstypewithnamespace.JsTypeWithNamespace.vtable)))
