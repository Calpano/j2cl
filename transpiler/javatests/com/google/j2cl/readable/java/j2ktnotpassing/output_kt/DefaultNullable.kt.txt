// Generated from "j2ktnotpassing/DefaultNullable.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress("REPEATED_BOUND", "UNNECESSARY_NOT_NULL_ASSERTION", "VARIABLE_WITH_REDUNDANT_INITIALIZER", "UNCHECKED_CAST", "PARAMETER_NAME_CHANGED_ON_OVERRIDE", "ALWAYS_NULL", "SENSELESS_COMPARISON", "UNUSED_PARAMETER")

package j2ktnotpassing

import javaemul.lang.*
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.jvm.JvmStatic
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName

@ObjCName("J2ktnotpassingDefaultNullable", exact = true)
open class DefaultNullable {
 companion object {
  @JvmStatic
  @HiddenFromObjC
  fun testNonNullableLambdas_pp_j2ktnotpassing() {
   val methodReference: NotNullable.Consumer<String?>? = NotNullable.Consumer<String?> { arg0: String ->
    DefaultNullable.accept_pp_j2ktnotpassing(arg0)
   }
  }

  @JvmStatic
  @HiddenFromObjC
  fun accept_pp_j2ktnotpassing(s: String?) {}
 }
}

open class NotNullable {
 fun interface Consumer<T> {
  @ObjCName("accept")
  fun accept(
   @ObjCName("withId") t: T
  )
 }
}

abstract class Ordering<T> {
 @HiddenFromObjC
 open fun <S: T> reverse_pp_j2ktnotpassing(): Ordering<S> {
  return null!!
 }

 companion object {
  @JvmStatic
  @HiddenFromObjC
  fun <E> reversed_pp_j2ktnotpassing(ordering: Ordering<in E>): Ordering<in E> {
   return ordering!!.reverse_pp_j2ktnotpassing<E>()
  }
 }
}
