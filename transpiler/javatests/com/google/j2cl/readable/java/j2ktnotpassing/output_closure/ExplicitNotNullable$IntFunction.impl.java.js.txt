goog.module('j2ktnotpassing.ExplicitNotNullable.IntFunction$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('j2ktnotpassing.ExplicitNotNullable.IntFunction.$LambdaAdaptor$impl');

/**
 * @interface
 * @template T
 */
class IntFunction {
 /** @abstract @nodts @return {T} */
 m_accept__int__java_lang_Object(/** number */ i) {}
 /** @nodts @template T @return {IntFunction<T>} */
 static $adapt(/** ?function(number):T */ fn) {
  IntFunction.$clinit();
  return /**@type {!$LambdaAdaptor<T>}*/ (new $LambdaAdaptor(fn));
 }
 /** @nodts */
 static $clinit() {
  IntFunction.$clinit = () =>{};
  IntFunction.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  ctor.prototype.$implements__j2ktnotpassing_ExplicitNotNullable_IntFunction = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__j2ktnotpassing_ExplicitNotNullable_IntFunction;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('j2ktnotpassing.ExplicitNotNullable.IntFunction.$LambdaAdaptor$impl');
 }
}
IntFunction.$markImplementor(/**@type {Function}*/ (IntFunction));
$Util.$setClassMetadataForInterface(IntFunction, 'j2ktnotpassing.ExplicitNotNullable$IntFunction');

exports = IntFunction;

//# sourceMappingURL=ExplicitNotNullable$IntFunction.js.map
