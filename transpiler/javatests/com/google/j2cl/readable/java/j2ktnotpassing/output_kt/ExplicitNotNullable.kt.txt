// Generated from "j2ktnotpassing/ExplicitNotNullable.java"
package j2ktnotpassing

import javaemul.lang.*
import kotlin.jvm.*

open class ExplicitNotNullable {
 @kotlin.jvm.JvmField var i: j2ktnotpassing.ExplicitNotNullable.Function<kotlin.String, kotlin.String> = object : j2ktnotpassing.ExplicitNotNullable.Function<kotlin.String?, kotlin.String?> {
  open override fun apply(s: kotlin.String): kotlin.String {
   return s
  }
 }

 open fun testDependentWildcards(x: j2ktnotpassing.ExplicitNotNullable.DependentTypeParameters<out kotlin.Any, out E?>): j2ktnotpassing.ExplicitNotNullable.DependentTypeParameters<out kotlin.Any, out E?> {
  return x!!.getThis()
 }

 companion object {
  @kotlin.jvm.JvmStatic
  fun <T: kotlin.Any> consume(t: T) {}

  @kotlin.jvm.JvmStatic
  fun testUnboundWildcardTypeArgumentInference(fn: j2ktnotpassing.ExplicitNotNullable.Function<*, *>) {
   j2ktnotpassing.ExplicitNotNullable.consume<j2ktnotpassing.ExplicitNotNullable.Function<out kotlin.Any, out kotlin.Any>>(fn)
  }
 }

 fun interface Function<I, O> {
  fun apply(i: I): O
 }

 open class DependentTypeParameters<E: kotlin.Any, T: E?> {
  open fun getThis(): j2ktnotpassing.ExplicitNotNullable.DependentTypeParameters<E, T> {
   return this
  }
 }
}
