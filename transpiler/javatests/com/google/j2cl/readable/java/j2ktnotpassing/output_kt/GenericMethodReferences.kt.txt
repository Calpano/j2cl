// Generated from "j2ktnotpassing/GenericMethodReferences.java"
@file:OptIn(ExperimentalObjCName::class, ExperimentalObjCRefinement::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package j2ktnotpassing

import javaemul.lang.*
import kotlin.OptIn
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.experimental.ExperimentalObjCRefinement
import kotlin.jvm.JvmStatic
import kotlin.native.HiddenFromObjC
import kotlin.native.ObjCName

@ObjCName("J2ktnotpassingGenericMethodReferences", exact = true)
open class GenericMethodReferences {
 @ObjCName("J2ktnotpassingGenericMethodReferencesCompanion", exact = true)
 companion object {
  @JvmStatic
  @HiddenFromObjC
  fun <T> genericMethod_pp_j2ktnotpassing(t: T): T {
   return t
  }

  @JvmStatic
  @HiddenFromObjC
  fun accept_pp_j2ktnotpassing(fn: GenericMethodReferences.Fn?) {}

  @JvmStatic
  @HiddenFromObjC
  fun test_pp_j2ktnotpassing() {
   GenericMethodReferences.accept_pp_j2ktnotpassing(GenericMethodReferences.Fn { arg0 ->
    return@Fn GenericMethodReferences.genericMethod_pp_j2ktnotpassing<T>(arg0)
   })
  }
 }

 interface Fn {
  @ObjCName("apply")
  fun <T> apply(
   @ObjCName("withId") t: T
  ): T
 }
}
