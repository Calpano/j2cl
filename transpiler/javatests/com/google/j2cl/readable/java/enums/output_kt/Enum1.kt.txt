// Generated from "enums/Enum1.java"
@file:OptIn(ExperimentalObjCName::class)

package enums

import javaemul.lang.*
import enums.Enum1
import enums.Enum2
import java.util.function.Function
import kotlin.Any
import kotlin.Array
import kotlin.Enum
import kotlin.Int
import kotlin.OptIn
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("EnumsEnum1", exact = true)
enum class Enum1 {
 V1,
 V2;

}

@ObjCName("EnumsEnum2", exact = true)
enum class Enum2 {
 VALUE1(2),
 VALUE2(Enum1.V1 as Enum<*>?),
 VALUE3(),
 VALUE4(5) {};

 @JvmField var foo: Int = Enum1.V1.ordinal

 constructor(
  @ObjCName("withInt", exact = false) foo: Int
 ) {
  this.foo = foo
 }

 constructor(
  @ObjCName("withJavaLangEnum", exact = false) foo: Enum<*>?
 ): this(foo!!.ordinal)

 constructor(
  vararg @ObjCName("withNSObjectArray", exact = false) somePars: Any?
 ): this(somePars!!.size) {
  val somePars_1: Array<Any?>? = somePars as Array<Any?>?
 }

 open fun specialMethods() {
  val o1: Int = Enum2.valueOf(null!!)!!.ordinal
  val o2: Int = Enum2.valueOf("VALUE1")!!.ordinal
  val l: Int = Enum2.values()!!.size
 }

 companion object {
  @JvmStatic
  fun f(
   @ObjCName("withId", exact = false) o: Any?
  ): Enum2? {
   return null
  }

  @JvmField var C: Enum2? = Enum2.f(Any())
 }
}

@ObjCName("EnumsEnum3", exact = true)
enum class Enum3 {
 VALUE1(Function<Int?, Int?> { v: Int? ->
  return@Function Int.valueOf(1 + v!!.toInt())
 });

 constructor(
  @ObjCName("withJavaUtilFunctionFunction", exact = false) function: Function<Int?, Int?>?
 )
}
