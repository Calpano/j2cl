package abstractmethodoverridedefault

open class AbstractMethodOverrideDefault {}

interface I {
 fun foo()

 fun bar() {}
}

interface J {
 fun foo() {}

 fun bar()
}

abstract class A: abstractmethodoverridedefault.AbstractMethodOverrideDefault.I {
 abstract open override fun foo()
}

abstract class B: abstractmethodoverridedefault.AbstractMethodOverrideDefault.J, abstractmethodoverridedefault.AbstractMethodOverrideDefault.A() {
 open override fun bar() {
  if (false) {
   this.bar()
  }
 }
}

open class C: abstractmethodoverridedefault.AbstractMethodOverrideDefault.A() {
 open override fun foo() {}

 open override fun bar() {
  super.bar()
 }
}
