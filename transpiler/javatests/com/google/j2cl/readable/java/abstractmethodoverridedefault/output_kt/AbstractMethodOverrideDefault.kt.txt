package abstractmethodoverridedefault

open class AbstractMethodOverrideDefault {}

interface `AbstractMethodOverrideDefault$I` {
 fun foo()

 fun bar() {}
}

interface `AbstractMethodOverrideDefault$J` {
 fun foo() {}

 fun bar()
}

abstract class `AbstractMethodOverrideDefault$A`: abstractmethodoverridedefault.`AbstractMethodOverrideDefault$I` {
 abstract open override fun foo()
}

abstract class `AbstractMethodOverrideDefault$B`: abstractmethodoverridedefault.`AbstractMethodOverrideDefault$J`, abstractmethodoverridedefault.`AbstractMethodOverrideDefault$A`() {
 open override fun bar() {
  if (false) {
   this.bar()
  }
 }
}

open class `AbstractMethodOverrideDefault$C`: abstractmethodoverridedefault.`AbstractMethodOverrideDefault$A`() {
 open override fun foo() {}

 open override fun bar() {
  super.bar()
 }
}
