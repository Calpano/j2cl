// Generated from "j2ktobjcname/ConflictInterfaceExample.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package j2ktobjcname

import javaemul.lang.*
import java.util.function.Consumer
import kotlin.Boolean
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("J2ktobjcnameConflictInterfaceExample", exact = true)
open class ConflictInterfaceExample {
 constructor()

 @ObjCName("J2ktobjcnameConflictInterfaceExample_Collection", exact = true)
 fun interface Collection<T> {
  @ObjCName("add")
  fun add(
   @ObjCName("withId") element: T
  ): Boolean
 }

 @ObjCName("J2ktobjcnameConflictInterfaceExample_List", exact = true)
 open class List<T> {
  @ObjCName("add")
  open fun add(
   @ObjCName("withId") element: T
  ): Boolean {
   return true
  }

  @ObjCName("forEachRemaining")
  open fun forEachRemaining(
   @ObjCName("withJavaUtilFunctionConsumer") action: Consumer<in T>?
  ) {}
 }

 @ObjCName("J2ktobjcnameConflictInterfaceExample_StringList", exact = true)
 open class StringList: ConflictInterfaceExample.List<String?>(), ConflictInterfaceExample.Collection<String?> {}
}
