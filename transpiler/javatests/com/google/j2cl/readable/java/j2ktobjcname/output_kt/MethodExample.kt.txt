// Generated from "j2ktobjcname/MethodExample.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "REPEATED_BOUND",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER")

package j2ktobjcname

import javaemul.lang.*
import kotlin.Any
import kotlin.Array
import kotlin.Int
import kotlin.LongArray
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktobjcnameMethodExample", exact = true)
open class MethodExample {
 @kotlin.native.ObjCName("J2ktobjcnameMethodExampleCompanion", exact = true)
 companion object {
  @JvmStatic
  @kotlin.native.ObjCName("main")
  fun main(
   vararg @kotlin.native.ObjCName("withNSStringArray") args: String?
  ) {
   val args_1: Array<String?>? = args as Array<String?>?
  }
 }

 @kotlin.native.ObjCName("J2ktobjcnameMethodExample_Foo", exact = true)
 open class Foo {}

 @kotlin.native.ObjCName("J2ktobjcnameMethodExample_ObjCName", exact = true)
 open class ObjCName {
  @kotlin.native.ObjCName("instanceMethod")
  open fun instanceMethod(
   @kotlin.native.ObjCName("withInt") i: Int
  ) {}

  @kotlin.native.ObjCName("instanceMethod")
  open fun instanceMethod(
   @kotlin.native.ObjCName("withInt") i: Int,
   @kotlin.native.ObjCName("withLongArray") l: LongArray?
  ) {}

  @kotlin.native.ObjCName("instanceMethod")
  open fun instanceMethod(
   @kotlin.native.ObjCName("withInt") i: Int,
   @kotlin.native.ObjCName("withLongArray2") l: Array<LongArray?>?
  ) {}

  @kotlin.native.ObjCName("instanceMethod")
  open fun instanceMethod(
   @kotlin.native.ObjCName("withInt") i: Int,
   @kotlin.native.ObjCName("withId") id: Any?
  ) {}

  @kotlin.native.ObjCName("instanceMethod")
  open fun instanceMethod(
   @kotlin.native.ObjCName("withJ2ktobjcnameMethodExample_Foo") foo: MethodExample.Foo?
  ) {}

  @kotlin.native.ObjCName("newFoo")
  open fun foo() {}

  @kotlin.native.ObjCName("newProtectedFoo")
  open fun protectedFoo() {}

  @kotlin.native.ObjCName("J2ktobjcnameMethodExample_ObjCNameCompanion", exact = true)
  companion object {
   @JvmStatic
   @kotlin.native.ObjCName("staticMethod")
   fun staticMethod(
    @kotlin.native.ObjCName("withInt") i: Int
   ) {}

   @JvmStatic
   @kotlin.native.ObjCName("staticMethod")
   fun staticMethod(
    @kotlin.native.ObjCName("withInt") i: Int,
    @kotlin.native.ObjCName("withLongArray") l: LongArray?
   ) {}

   @JvmStatic
   @kotlin.native.ObjCName("staticMethod")
   fun staticMethod(
    @kotlin.native.ObjCName("withInt") i: Int,
    @kotlin.native.ObjCName("withLongArray2") l: Array<LongArray?>?
   ) {}

   @JvmStatic
   @kotlin.native.ObjCName("staticMethod")
   fun staticMethod(
    @kotlin.native.ObjCName("withInt") i: Int,
    @kotlin.native.ObjCName("withId") id: Any?
   ) {}

   @JvmStatic
   @kotlin.native.ObjCName("staticMethod")
   fun staticMethod(
    @kotlin.native.ObjCName("withJ2ktobjcnameMethodExample_Foo") foo: MethodExample.Foo?
   ) {}
  }
 }
}
