// Generated from "j2ktobjcname/MethodExample.java"
@file:OptIn(ExperimentalObjCName::class)

package j2ktobjcname

import javaemul.lang.*
import kotlin.Array
import kotlin.Int
import kotlin.LongArray
import kotlin.OptIn
import kotlin.String
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktobjcnameMethodExample", exact = true)
open class MethodExample {
 companion object {
  @JvmStatic
  @kotlin.native.ObjCName("main")
  fun main(
   vararg @kotlin.native.ObjCName("withNSStringArray") args: String?
  ) {
   val args_1: Array<String?>? = args as Array<String?>?
  }
 }

 @kotlin.native.ObjCName("J2ktobjcnameMethodExample_Foo", exact = true)
 open inner class Foo {}

 @kotlin.native.ObjCName("J2ktobjcnameMethodExample_ObjCName", exact = true)
 open inner class ObjCName {
  @kotlin.native.ObjCName("instanceMethod")
  open fun instanceMethod(
   @kotlin.native.ObjCName("withInt") i: Int
  ) {}

  @kotlin.native.ObjCName("instanceMethod")
  open fun instanceMethod(
   @kotlin.native.ObjCName("withInt") i: Int,
   @kotlin.native.ObjCName("withLongArray") l: LongArray?
  ) {}

  @kotlin.native.ObjCName("instanceMethod")
  open fun instanceMethod(
   @kotlin.native.ObjCName("withInt") i: Int,
   @kotlin.native.ObjCName("withLongArray2") l: Array<LongArray?>?
  ) {}

  @kotlin.native.ObjCName("instanceMethod")
  open fun instanceMethod(
   @kotlin.native.ObjCName("withJ2ktobjcnameMethodExample_Foo") foo: MethodExample.Foo?
  ) {}

  @kotlin.native.ObjCName("newFoo")
  open fun foo() {}

  @kotlin.native.ObjCName("newProtectedFoo")
  open fun protectedFoo() {}
 }
}
