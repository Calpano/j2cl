;;; Code for importglobaljstypes.Date

;;; CLASS  Date
(type $importglobaljstypes.Date (struct
))

;;; Date()
(func $m_<init>__void@importglobaljstypes.Date
 (param $this (ref null $importglobaljstypes.Date))
 (result (ref null $importglobaljstypes.Date))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; double Date.now(double x)
(func $m_now__double__double@importglobaljstypes.Date
 (param $x f64)
 (result f64)
 (local $return.value f64)
 (block $return.label
  (block
   ;; return importglobaljstypes.Date.NativeDate.now();
   (local.set $return.value (call $m_now__double@importglobaljstypes.Date.NativeDate ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; NativeDate Date.copy(NativeDate d)
(func $m_copy__importglobaljstypes_Date_NativeDate__importglobaljstypes_Date_NativeDate@importglobaljstypes.Date
 (param $this (ref null $java.lang.Object))
 (param $d (ref null $importglobaljstypes.Date.NativeDate))
 (result (ref null $importglobaljstypes.Date.NativeDate))
 (local $return.value (ref null $importglobaljstypes.Date.NativeDate))
 (block $return.label
  (block
   ;; return d;
   (local.set $return.value (local.get $d))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; CLASS  NativeDate
(type $importglobaljstypes.Date.NativeDate (struct
))

;;; NativeDate()
(func $m_<init>__void@importglobaljstypes.Date.NativeDate
 (param $this (ref null $importglobaljstypes.Date.NativeDate))
 (result (ref null $importglobaljstypes.Date.NativeDate))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; double NativeDate.now()
(func $m_now__double@importglobaljstypes.Date.NativeDate
 (result f64)
 (local $return.value f64)
 (block $return.label
  (block
  )
 )
 (local.get $return.value)
)
;;; Code for importglobaljstypes.Number

;;; CLASS  Number
(type $importglobaljstypes.Number (struct
))

;;; Number()
(func $m_<init>__void@importglobaljstypes.Number
 (param $this (ref null $importglobaljstypes.Number))
 (result (ref null $importglobaljstypes.Number))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   
  )
 )
 (local.get $this)
)

;;; boolean Number.fun(double x)
(func $m_fun__double__boolean@importglobaljstypes.Number
 (param $x f64)
 (result i32)
 (local $return.value i32)
 (block $return.label
  (block
  )
 )
 (local.get $return.value)
)

;;; boolean Number.test(double x)
(func $m_test__double__boolean@importglobaljstypes.Number
 (param $x f64)
 (result i32)
 (local $return.value i32)
 (block $return.label
  (block
   ;; return importglobaljstypes.Number.fun(x);
   (local.set $return.value (call $m_fun__double__boolean@importglobaljstypes.Number (local.get $x)))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; NativeFunction<String> Number.getFromCharCodeFunction()
(func $m_getFromCharCodeFunction__importglobaljstypes_Number_NativeFunction@importglobaljstypes.Number
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (block $return.label
  (block
  )
 )
 (local.get $return.value)
)

;;; String Number.fromCharCode(int[] array)
(func $m_fromCharCode__arrayOf_int__java_lang_String@importglobaljstypes.Number
 (param $array (ref null $java.lang.Object))
 (result (ref null $java.lang.String))
 (local $return.value (ref null $java.lang.String))
 (block $return.label
  (block
   ;; return ((String) importglobaljstypes.Number.getFromCharCodeFunction().apply(null,array));
   (local.set $return.value (ref.cast $java.lang.Object $java.lang.String (ref.null $java.lang.String) (global.get $java.lang.String.rtt)))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; MyLiteralType Number.testJsDocForLiteralType(MyLiteralType a)
(func $m_testJsDocForLiteralType__importglobaljstypes_Number_MyLiteralType__importglobaljstypes_Number_MyLiteralType@importglobaljstypes.Number
 (param $this (ref null $java.lang.Object))
 (param $a (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; return a;
   (local.set $return.value (local.get $a))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; INTERFACE  NativeFunction

;;; INTERFACE  MyLiteralType

