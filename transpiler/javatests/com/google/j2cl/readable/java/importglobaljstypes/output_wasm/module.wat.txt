;;; Code for importglobaljstypes.Date [vtable]
(global $importglobaljstypes.Date.vtable (mut (ref null $importglobaljstypes.Date.vtable)) (ref.null $importglobaljstypes.Date.vtable))

;;; Code for importglobaljstypes.Date.NativeDate [vtable]
(global $importglobaljstypes.Date.NativeDate.vtable (mut (ref null $importglobaljstypes.Date.NativeDate.vtable)) (ref.null $importglobaljstypes.Date.NativeDate.vtable))

;;; Code for importglobaljstypes.Number [vtable]
(global $importglobaljstypes.Number.vtable (mut (ref null $importglobaljstypes.Number.vtable)) (ref.null $importglobaljstypes.Number.vtable))

;;; Code for importglobaljstypes.Date [static fields]
(global $f_$initialized__importglobaljstypes_Date (mut i32) (i32.const 0))

;;; Code for importglobaljstypes.Date.NativeDate [static fields]
(global $f_$initialized__importglobaljstypes_Date_NativeDate (mut i32) (i32.const 0))

;;; Code for importglobaljstypes.Number [static fields]
(global $f_$initialized__importglobaljstypes_Number (mut i32) (i32.const 0))

;;; Code for importglobaljstypes.Number.NativeFunction [static fields]
(global $f_$initialized__importglobaljstypes_Number_NativeFunction (mut i32) (i32.const 0))

;;; Code for importglobaljstypes.Number.MyLiteralType [static fields]
(global $f_$initialized__importglobaljstypes_Number_MyLiteralType (mut i32) (i32.const 0))

;;; Code for importglobaljstypes.Date [CLASS]
(type $importglobaljstypes.Date (struct
 (field $vtable (ref null $importglobaljstypes.Date.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $importglobaljstypes.Date.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_copy__importglobaljstypes_Date_NativeDate__importglobaljstypes_Date_NativeDate (mut (ref $function.$importglobaljstypes.Date.NativeDate__$importglobaljstypes.Date.NativeDate)))
))

;;; Date()
(func $m_<init>__void@importglobaljstypes.Date
 (param $this (ref null $importglobaljstypes.Date))
 (result (ref null $importglobaljstypes.Date))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; double Date.now(double x)
(func $m_now__double__double@importglobaljstypes.Date
 (param $x f64)
 (result f64)
 (local $return.value f64)
 (block $return.label
  (block
   ;; importglobaljstypes.Date.$clinit();
   (call $$clinit__void@importglobaljstypes.Date )
   ;; return importglobaljstypes.Date.NativeDate.now();
   (local.set $return.value (call $m_now__double@importglobaljstypes.Date.NativeDate ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; NativeDate Date.copy(NativeDate d)
(func $m_copy__importglobaljstypes_Date_NativeDate__importglobaljstypes_Date_NativeDate@importglobaljstypes.Date
 (param $this.untyped (ref null $java.lang.Object))
 (param $d (ref null $importglobaljstypes.Date.NativeDate))
 (result (ref null $importglobaljstypes.Date.NativeDate))
 (local $return.value (ref null $importglobaljstypes.Date.NativeDate))
 (local $this (ref null $importglobaljstypes.Date))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $importglobaljstypes.Date.rtt)))
 (block $return.label
  (block
   ;; return d;
   (local.set $return.value (local.get $d))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_copy__importglobaljstypes_Date_NativeDate__importglobaljstypes_Date_NativeDate@importglobaljstypes.Date)

;;; void Date.$clinit()
(func $$clinit__void@importglobaljstypes.Date
 (block $return.label
  (block
   ;; if (importglobaljstypes.Date.$initialized) return;
   (if (global.get $f_$initialized__importglobaljstypes_Date)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (importglobaljstypes.Date.$initialized = true);
   (global.set $f_$initialized__importglobaljstypes_Date (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> Date.getClass()
(func $m_getClass__java_lang_Class@importglobaljstypes.Date
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $importglobaljstypes.Date))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $importglobaljstypes.Date.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getImportglobaljstypes.Date();
   (local.set $return.value (call $$getImportglobaljstypes.Date__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@importglobaljstypes.Date)

;;; Code for importglobaljstypes.Date.NativeDate [CLASS]
(type $importglobaljstypes.Date.NativeDate (struct
 (field $vtable (ref null $importglobaljstypes.Date.NativeDate.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $importglobaljstypes.Date.NativeDate.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
))

;;; NativeDate()
(func $m_<init>__void@importglobaljstypes.Date.NativeDate
 (param $this (ref null $importglobaljstypes.Date.NativeDate))
 (result (ref null $importglobaljstypes.Date.NativeDate))
 (block $return.label
  (block
   ;; importglobaljstypes.Date.NativeDate.$clinit();
   (call $$clinit__void@importglobaljstypes.Date.NativeDate )
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; double NativeDate.now()
(func $m_now__double@importglobaljstypes.Date.NativeDate
 (result f64)
 (local $return.value f64)
 (block $return.label
  (block
  )
 )
 (local.get $return.value)
)

;;; void NativeDate.$clinit()
(func $$clinit__void@importglobaljstypes.Date.NativeDate
 (block $return.label
  (block
   ;; if (importglobaljstypes.Date.NativeDate.$initialized) return;
   (if (global.get $f_$initialized__importglobaljstypes_Date_NativeDate)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (importglobaljstypes.Date.NativeDate.$initialized = true);
   (global.set $f_$initialized__importglobaljstypes_Date_NativeDate (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> NativeDate.getClass()
(func $m_getClass__java_lang_Class@importglobaljstypes.Date.NativeDate
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $importglobaljstypes.Date.NativeDate))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $importglobaljstypes.Date.NativeDate.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getImportglobaljstypes.Date.NativeDate();
   (local.set $return.value (call $$getImportglobaljstypes.Date.NativeDate__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@importglobaljstypes.Date.NativeDate)

;;; Code for importglobaljstypes.Number [CLASS]
(type $importglobaljstypes.Number (struct
 (field $vtable (ref null $importglobaljstypes.Number.vtable))
 (field $f_$systemIdentityHashCode__java_lang_Object (mut i32))
))
(type $importglobaljstypes.Number.vtable (struct
 
 (field $m_equals__java_lang_Object__boolean (mut (ref $function.$java.lang.Object__$boolean)))
 (field $m_hashCode__int (mut (ref $function.__$int)))
 (field $m_toString__java_lang_String (mut (ref $function.__$java.lang.String)))
 (field $m_getClass__java_lang_Class (mut (ref $function.__$java.lang.Class)))
 (field $m_testJsDocForLiteralType__importglobaljstypes_Number_MyLiteralType__importglobaljstypes_Number_MyLiteralType (mut (ref $function.$java.lang.Object__$java.lang.Object)))
))

;;; Number()
(func $m_<init>__void@importglobaljstypes.Number
 (param $this (ref null $importglobaljstypes.Number))
 (result (ref null $importglobaljstypes.Number))
 (block $return.label
  (block
   ;; Object.this.Object.<init>();
   (drop (call $m_<init>__void@java.lang.Object (local.get $this)))
  )
 )
 (local.get $this)
)

;;; boolean Number.fun(double x)
(func $m_fun__double__boolean@importglobaljstypes.Number
 (param $x f64)
 (result i32)
 (local $return.value i32)
 (block $return.label
  (block
  )
 )
 (local.get $return.value)
)

;;; boolean Number.test(double x)
(func $m_test__double__boolean@importglobaljstypes.Number
 (param $x f64)
 (result i32)
 (local $return.value i32)
 (block $return.label
  (block
   ;; importglobaljstypes.Number.$clinit();
   (call $$clinit__void@importglobaljstypes.Number )
   ;; return importglobaljstypes.Number.fun(x);
   (local.set $return.value (call $m_fun__double__boolean@importglobaljstypes.Number (local.get $x)))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; NativeFunction<String> Number.getFromCharCodeFunction()
(func $m_getFromCharCodeFunction__importglobaljstypes_Number_NativeFunction@importglobaljstypes.Number
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (block $return.label
  (block
  )
 )
 (local.get $return.value)
)

;;; String Number.fromCharCode(int[] array)
(func $m_fromCharCode__arrayOf_int__java_lang_String@importglobaljstypes.Number
 (param $array (ref null $javaemul.internal.WasmArray.OfInt))
 (result (ref null $java.lang.String))
 (local $return.value (ref null $java.lang.String))
 (local $$qualifier (ref null $java.lang.Object))
 (block $return.label
  (block
   ;; importglobaljstypes.Number.$clinit();
   (call $$clinit__void@importglobaljstypes.Number )
   ;; return ((String) (NativeFunction<String> $qualifier = importglobaljstypes.Number.getFromCharCodeFunction(),$qualifier.apply(null,array)));
   (local.set $return.value (ref.cast (block (result (ref null $java.lang.Object))
    
    (local.set $$qualifier (call $m_getFromCharCodeFunction__importglobaljstypes_Number_NativeFunction@importglobaljstypes.Number ))
    (ref.null $java.lang.String)
   ) (global.get $java.lang.String.rtt)))
   (br $return.label)
  )
 )
 (local.get $return.value)
)

;;; MyLiteralType Number.testJsDocForLiteralType(MyLiteralType a)
(func $m_testJsDocForLiteralType__importglobaljstypes_Number_MyLiteralType__importglobaljstypes_Number_MyLiteralType@importglobaljstypes.Number
 (param $this.untyped (ref null $java.lang.Object))
 (param $a (ref null $java.lang.Object))
 (result (ref null $java.lang.Object))
 (local $return.value (ref null $java.lang.Object))
 (local $this (ref null $importglobaljstypes.Number))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $importglobaljstypes.Number.rtt)))
 (block $return.label
  (block
   ;; return a;
   (local.set $return.value (local.get $a))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_testJsDocForLiteralType__importglobaljstypes_Number_MyLiteralType__importglobaljstypes_Number_MyLiteralType@importglobaljstypes.Number)

;;; void Number.$clinit()
(func $$clinit__void@importglobaljstypes.Number
 (block $return.label
  (block
   ;; if (importglobaljstypes.Number.$initialized) return;
   (if (global.get $f_$initialized__importglobaljstypes_Number)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (importglobaljstypes.Number.$initialized = true);
   (global.set $f_$initialized__importglobaljstypes_Number (i32.const 1))
   ;; java.lang.Object.$clinit();
   (call $$clinit__void@java.lang.Object )
  )
 )
)

;;; Class<?> Number.getClass()
(func $m_getClass__java_lang_Class@importglobaljstypes.Number
 (param $this.untyped (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (local $this (ref null $importglobaljstypes.Number))
 (local.set $this (ref.cast (local.get $this.untyped) (global.get $importglobaljstypes.Number.rtt)))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getImportglobaljstypes.Number();
   (local.set $return.value (call $$getImportglobaljstypes.Number__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@importglobaljstypes.Number)

;;; Code for importglobaljstypes.Number.NativeFunction [INTERFACE]

;;; void NativeFunction.$clinit()
(func $$clinit__void@importglobaljstypes.Number.NativeFunction
 (block $return.label
  (block
   ;; if (importglobaljstypes.Number.NativeFunction.$initialized) return;
   (if (global.get $f_$initialized__importglobaljstypes_Number_NativeFunction)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (importglobaljstypes.Number.NativeFunction.$initialized = true);
   (global.set $f_$initialized__importglobaljstypes_Number_NativeFunction (i32.const 1))
  )
 )
)

;;; Class<?> NativeFunction.getClass()
(func $m_getClass__java_lang_Class@importglobaljstypes.Number.NativeFunction
 (param $this (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getImportglobaljstypes.Number.NativeFunction();
   (local.set $return.value (call $$getImportglobaljstypes.Number.NativeFunction__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@importglobaljstypes.Number.NativeFunction)

;;; Code for importglobaljstypes.Number.MyLiteralType [INTERFACE]

;;; void MyLiteralType.$clinit()
(func $$clinit__void@importglobaljstypes.Number.MyLiteralType
 (block $return.label
  (block
   ;; if (importglobaljstypes.Number.MyLiteralType.$initialized) return;
   (if (global.get $f_$initialized__importglobaljstypes_Number_MyLiteralType)
    (then
     ;; return;
     (br $return.label)
    )
   )
   ;; (importglobaljstypes.Number.MyLiteralType.$initialized = true);
   (global.set $f_$initialized__importglobaljstypes_Number_MyLiteralType (i32.const 1))
  )
 )
)

;;; Class<?> MyLiteralType.getClass()
(func $m_getClass__java_lang_Class@importglobaljstypes.Number.MyLiteralType
 (param $this (ref null $java.lang.Object))
 (result (ref null $java.lang.Class))
 (local $return.value (ref null $java.lang.Class))
 (block $return.label
  (block
   ;; return javaemul.internal.ClassLiteralPool.$getImportglobaljstypes.Number.MyLiteralType();
   (local.set $return.value (call $$getImportglobaljstypes.Number.MyLiteralType__java_lang_Class@javaemul.internal.ClassLiteralPool ))
   (br $return.label)
  )
 )
 (local.get $return.value)
)
(elem declare func $m_getClass__java_lang_Class@importglobaljstypes.Number.MyLiteralType)

 ;;; Code for importglobaljstypes.Date [vtable.init]
 (global.set $importglobaljstypes.Date.vtable (struct.new_with_rtt $importglobaljstypes.Date.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@importglobaljstypes.Date) (ref.func $m_copy__importglobaljstypes_Date_NativeDate__importglobaljstypes_Date_NativeDate@importglobaljstypes.Date) (rtt.canon $importglobaljstypes.Date.vtable)))

 ;;; Code for importglobaljstypes.Date.NativeDate [vtable.init]
 (global.set $importglobaljstypes.Date.NativeDate.vtable (struct.new_with_rtt $importglobaljstypes.Date.NativeDate.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@importglobaljstypes.Date.NativeDate) (rtt.canon $importglobaljstypes.Date.NativeDate.vtable)))

 ;;; Code for importglobaljstypes.Number [vtable.init]
 (global.set $importglobaljstypes.Number.vtable (struct.new_with_rtt $importglobaljstypes.Number.vtable  (ref.func $m_equals__java_lang_Object__boolean@java.lang.Object) (ref.func $m_hashCode__int@java.lang.Object) (ref.func $m_toString__java_lang_String@java.lang.Object) (ref.func $m_getClass__java_lang_Class@importglobaljstypes.Number) (ref.func $m_testJsDocForLiteralType__importglobaljstypes_Number_MyLiteralType__importglobaljstypes_Number_MyLiteralType@importglobaljstypes.Number) (rtt.canon $importglobaljstypes.Number.vtable)))
