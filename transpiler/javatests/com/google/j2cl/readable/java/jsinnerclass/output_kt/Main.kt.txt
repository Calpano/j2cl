package jsinnerclass

open class Main {
 constructor(): super()

 companion object {
  @JvmStatic
  fun main(vararg args: kotlin.String?) {
   assert(jsinnerclass.`Main$Outer`().method() == 5)
  }
 }
}

open class `Main$Outer` {
 internal constructor(): super()

 @JvmField internal var a: Int = 2

 open fun method(): Int {
  return jsinnerclass.`Main$Outer$Inner`(this).getB() + this.a
 }
}

open class `Main$Outer$Inner` {
 @JvmField val `this`: jsinnerclass.`Main$Outer`?

 internal var b: Int = 0

 constructor(`$outer_this`: jsinnerclass.`Main$Outer`?): super() {
  this.`this` = `$outer_this`
  this.b = `$outer_this`!!.a + 1
 }

 open fun getB(): Int {
  return this.b
 }
}
