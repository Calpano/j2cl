// Generated from "lambdas/Lambdas.java"
package lambdas

import javaemul.lang.*
import kotlin.jvm.*

open class Lambdas {
 @kotlin.jvm.JvmField var field: kotlin.Int = 100

 open fun call(intf: lambdas.Lambdas.FunctionalInterface?, n: kotlin.Int): kotlin.Int {
  return this.field + intf!!.m(n)
 }

 open fun testLambdaExpressionStyle() {
  this.call(lambdas.Lambdas.FunctionalInterface { i: kotlin.Int ->
   return@FunctionalInterface i + 1
  }, 10)
 }

 open fun testLambdaBlockStyle() {
  this.call(lambdas.Lambdas.FunctionalInterface { i: kotlin.Int ->
   return@FunctionalInterface i + 2
  }, 10)
 }

 open fun testLambdaCaptureField() {
  this.call(lambdas.Lambdas.FunctionalInterface { i: kotlin.Int ->
   return@FunctionalInterface this.field + i + 1
  }, 10)
 }

 open fun testLambdaCaptureLocal() {
  val x: kotlin.Int = 1
  this.call(lambdas.Lambdas.FunctionalInterface { i: kotlin.Int ->
   return@FunctionalInterface x + i + 1
  }, 10)
 }

 open fun testLambdaCaptureFieldAndLocal() {
  val x: kotlin.Int = 1
  this.call(lambdas.Lambdas.FunctionalInterface { i: kotlin.Int ->
   val y: kotlin.Int = 1
   return@FunctionalInterface x + y + this.field + i + 1
  }, 10)
 }

 open fun funOuter() {}

 open fun testLambdaCallOuterFunction() {
  this.call(lambdas.Lambdas.FunctionalInterface { i: kotlin.Int ->
   this.funOuter()
   this.funOuter()
   this@Lambdas.funOuter()
   return@FunctionalInterface i + 2
  }, 10)
 }

 open fun testNestedLambdas() {
  this.call(lambdas.Lambdas.FunctionalInterface { i: kotlin.Int ->
   return@FunctionalInterface this.call(lambdas.Lambdas.FunctionalInterface { j: kotlin.Int ->
    return@FunctionalInterface j
   }, 20)
  }, 10)
 }

 open fun testReturnLabelNameConflictKotlin() {
  this.call(lambdas.Lambdas.FunctionalInterface { i: kotlin.Int ->
   FunctionalInterface_1@ do {
    return@FunctionalInterface i
   } while (false)
  }, 10)
 }

 open fun <T> testInstanceMethodTypeVariableThroughLambda() {
  val wrapped: lambdas.Lambdas.Functional<T>? = lambdas.Lambdas.Functional<T> { f: lambdas.Lambdas.Functional<T>? ->
   return@Functional object : lambdas.Lambdas.Functional<T> {
    open override fun wrap(f: lambdas.Lambdas.Functional<T>?): lambdas.Lambdas.Functional<T>? {
     return null
    }
   }
  }
 }

 open fun <T> callWithTypeVariable(intf: lambdas.Lambdas.GenericFunctionalInterface<T>?, e: T?): T? {
  return intf!!.m(e)
 }

 open fun callParameterized(intf: lambdas.Lambdas.GenericFunctionalInterface<kotlin.Error?>?, e: kotlin.Error?): kotlin.Error? {
  return intf!!.m(e)
 }

 open fun <T> callWithBiFunction(fn: lambdas.Lambdas.BiFunction<T, kotlin.String?, kotlin.Double?>?): lambdas.Lambdas.GenericFunctionalInterface<T>? {
  return null
 }

 open fun <T: kotlin.Enum<T>?> testLambdaWithGenerics() {
  this.callWithTypeVariable<kotlin.Error?>(lambdas.Lambdas.GenericFunctionalInterface<kotlin.Error?> { i: kotlin.Error? ->
   return@GenericFunctionalInterface i
  }, kotlin.Error())
  this.callParameterized(lambdas.Lambdas.GenericFunctionalInterface<kotlin.Error?> { i_1: kotlin.Error? ->
   return@GenericFunctionalInterface i_1
  }, kotlin.Error())
  lambdas.Lambdas.callTypeVariableWithBounds<T>(lambdas.Lambdas.GenericFunctionalInterface<kotlin.Enum<T>?> { i_2: kotlin.Enum<T>? ->
   return@GenericFunctionalInterface i_2
  }, null as kotlin.Enum<T>?)
  this.callWithBiFunction<kotlin.Any?>(lambdas.Lambdas.BiFunction<kotlin.Any?, kotlin.String?, kotlin.Double?> { x: kotlin.Any?, y: kotlin.String? ->
   throw kotlin.RuntimeException()
  })
  val f: lambdas.Lambdas.Function<in T?, *>? = lambdas.Lambdas.Function { item: T? ->
   return@Function kotlin.Long.valueOf(1L)
  }
 }

 open fun testLambdaReturningVoidAsExpression() {
  val runner: lambdas.Lambdas.FunctionalInterfaceWithMethodReturningVoid? = lambdas.Lambdas.FunctionalInterfaceWithMethodReturningVoid {
   kotlin.Any()
  }
 }

 open fun testAnonymousInsideLambda() {
  val runner: lambdas.Lambdas.FunctionalInterfaceWithMethodReturningVoid? = lambdas.Lambdas.FunctionalInterfaceWithMethodReturningVoid {
   object : kotlin.Any() {}
  }
 }

 open fun testDefaultMethodsInIntersectionAdaptor() {
  val o: kotlin.Any? = lambdas.Lambdas.BiFunction<kotlin.String?, kotlin.String?, kotlin.String?> { t: kotlin.String?, u: kotlin.String? ->
   return@BiFunction null
  } as lambdas.Lambdas.BiFunction<kotlin.String?, kotlin.String?, kotlin.String?>? /* & lambdas.Lambdas.MarkerWithDefaultMethod? */
 }

 companion object {
  @kotlin.jvm.JvmStatic
  fun testLambdaInStaticContext() {
   val f: lambdas.Lambdas.FunctionalInterface? = lambdas.Lambdas.FunctionalInterface { i: kotlin.Int ->
    return@FunctionalInterface i
   }
  }

  @kotlin.jvm.JvmStatic
  fun <T> testStaticMethodTypeVariableThroughLambda() {
   val wrapped: lambdas.Lambdas.Functional<T>? = lambdas.Lambdas.Functional<T> { f: lambdas.Lambdas.Functional<T>? ->
    return@Functional object : lambdas.Lambdas.Functional<T> {
     open override fun wrap(f: lambdas.Lambdas.Functional<T>?): lambdas.Lambdas.Functional<T>? {
      return null
     }
    }
   }
  }

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.Enum<T>?> callTypeVariableWithBounds(intf: lambdas.Lambdas.GenericFunctionalInterface<kotlin.Enum<T>?>?, e: kotlin.Enum<T>?): kotlin.Enum<T>? {
   return intf!!.m(e)
  }

  @kotlin.jvm.JvmStatic
  fun m(): kotlin.Any? {
   return null
  }

  @kotlin.jvm.JvmStatic
  fun testLambdaCallingStaticMethod() {
   val f: lambdas.Lambdas.Function<kotlin.Any?, *>? = lambdas.Lambdas.Function { l: kotlin.Any? ->
    return@Function lambdas.Lambdas.m()
   }
  }

  @kotlin.jvm.JvmField var identityFunction: lambdas.Lambdas.IdentityFunction? = null

  @kotlin.jvm.JvmStatic
  fun <E> identity(): lambdas.Lambdas.GenericJsFunction<E, E>? {
   if (lambdas.Lambdas.identityFunction === null) {
    lambdas.Lambdas.identityFunction = lambdas.Lambdas.IdentityFunction()
   }
   return lambdas.Lambdas.identityFunction as lambdas.Lambdas.GenericJsFunction<E, E>?
  }

  @kotlin.jvm.JvmStatic
  fun testJsInteropLambdas() {
   val thenable: lambdas.Lambdas.Thenable<kotlin.String?>? = lambdas.Lambdas.Thenable<kotlin.String?> { f1: lambdas.Lambdas.GenericJsFunction<kotlin.Unit?, kotlin.String?>?, f2: lambdas.Lambdas.GenericJsFunction<kotlin.Unit?, kotlin.Throwable?>? ->
    f1!!.apply(null)
   }
   val otherThenable: lambdas.Lambdas.AnotherThenable<kotlin.String?>? = lambdas.Lambdas.AnotherThenable<kotlin.String?> { f1_1: lambdas.Lambdas.GenericJsFunction<kotlin.Unit?, kotlin.String?>?, f2_1: lambdas.Lambdas.GenericJsFunction<kotlin.Unit?, kotlin.Throwable?>? ->
    f1_1!!.apply(null)
   }
   val stringJsSupplier: lambdas.Lambdas.JsSupplier<kotlin.Int?>? = lambdas.Lambdas.JsSupplier<kotlin.Int?> {
    return@JsSupplier kotlin.Int.valueOf(1)
   }
   stringJsSupplier!!.get()
   val equals: lambdas.Lambdas.Equals<kotlin.Any?>? = stringJsSupplier as lambdas.Lambdas.Equals<kotlin.Any?>?
   equals!!.equals(null)
   equals!!.get()
  }

  @kotlin.jvm.JvmStatic
  fun <U, V> testIntersectionTyping() {
   var o: kotlin.Any? = lambdas.Lambdas.GenericFunctionalInterface<kotlin.String?> { x: kotlin.String? ->
    return@GenericFunctionalInterface x
   } as lambdas.Lambdas.GenericFunctionalInterface<kotlin.String?>? /* & lambdas.Lambdas.JustADefaultT<kotlin.Number?>? */
   o = lambdas.Lambdas.GenericFunctionalInterface<kotlin.String?> { x_1: kotlin.String? ->
    return@GenericFunctionalInterface x_1
   } as lambdas.Lambdas.GenericFunctionalInterface<kotlin.String?>? /* & lambdas.Lambdas.JustADefaultS<kotlin.Number?>? */
   o = lambdas.Lambdas.GenericFunctionalInterface<U> { x_2: U? ->
    return@GenericFunctionalInterface x_2
   } as lambdas.Lambdas.GenericFunctionalInterface<U>? /* & lambdas.Lambdas.JustADefaultS<V>? */
  }
 }

 fun interface FunctionalInterface {
  fun m(i: kotlin.Int): kotlin.Int
 }

 fun interface Functional<T> {
  fun wrap(f: lambdas.Lambdas.Functional<T>?): lambdas.Lambdas.Functional<T>?
 }

 fun interface GenericFunctionalInterface<T> {
  fun m(i: T?): T?
 }

 fun interface BiFunction<T, U, R> {
  fun apply(t: T?, u: U?): R?

  fun <V> andThen(after: lambdas.Lambdas.Function<in R?, out V?>?): lambdas.Lambdas.BiFunction<T, U, V>? {
   return lambdas.Lambdas.BiFunction<T, U, V> { t: T?, u: U? ->
    return@BiFunction after!!.apply(this.apply(t, u))
   }
  }
 }

 fun interface Function<T, R> {
  fun apply(t: T?): R?

  companion object {
   @kotlin.jvm.JvmStatic
   fun <T> identity(): lambdas.Lambdas.Function<T, T>? {
    return lambdas.Lambdas.Function<T, T> { t: T? ->
     return@Function t
    }
   }
  }
 }

 fun interface FunctionalInterfaceWithMethodReturningVoid {
  fun run()
 }

 open class Parent {
  @kotlin.jvm.JvmField var fieldInParent: kotlin.Int = 0

  open fun funInParent() {}
 }

 open class LambdaInSubClass: lambdas.Lambdas.Parent() {
  open fun testLambdaInSubclass() {
   val l: lambdas.Lambdas.FunctionalInterface? = lambdas.Lambdas.FunctionalInterface { i: kotlin.Int ->
    this.funInParent()
    this.funInParent()
    this@LambdaInSubClass.funInParent()
    var a: kotlin.Int = this.fieldInParent
    a = this.fieldInParent
    a = this@LambdaInSubClass.fieldInParent
    return@FunctionalInterface a
   }
  }
 }

 fun interface GenericJsFunction<R, T> {
  fun apply(t: T?): R?
 }

 fun interface Thenable<T> {
  fun then(f1: lambdas.Lambdas.GenericJsFunction<kotlin.Unit?, T>?, f2: lambdas.Lambdas.GenericJsFunction<kotlin.Unit?, kotlin.Throwable?>?)
 }

 fun interface AnotherThenable<T> {
  fun then(f1: lambdas.Lambdas.GenericJsFunction<kotlin.Unit?, T>?, f2: lambdas.Lambdas.GenericJsFunction<kotlin.Unit?, kotlin.Throwable?>?)
 }

 class IdentityFunction: lambdas.Lambdas.GenericJsFunction<kotlin.Any?, kotlin.Any?> {
  open override fun apply(o: kotlin.Any?): kotlin.Any? {
   return o
  }
 }

 interface Equals<T> {
  fun get(): T? {
   return null
  }
 }

 fun interface JsSupplier<T: kotlin.Number?>: lambdas.Lambdas.Equals<T> {
  override fun get(): T?
 }

 interface JustADefaultT<T> {
  fun method(t: T?) {}
 }

 interface JustADefaultS<S> {
  fun method(t: S?) {}
 }

 interface MarkerWithDefaultMethod {
  fun defaultMethod() {}
 }
}
