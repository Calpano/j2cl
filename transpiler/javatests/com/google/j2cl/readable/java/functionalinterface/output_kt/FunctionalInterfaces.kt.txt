// Generated from "functionalinterface/FunctionalInterfaces.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress("REPEATED_BOUND", "UNNECESSARY_NOT_NULL_ASSERTION", "VARIABLE_WITH_REDUNDANT_INITIALIZER", "UNCHECKED_CAST", "PARAMETER_NAME_CHANGED_ON_OVERRIDE", "ALWAYS_NULL", "SENSELESS_COMPARISON", "UNUSED_PARAMETER")

package functionalinterface

import javaemul.lang.*
import kotlin.Int
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.experimental.ExperimentalObjCName
import kotlin.native.ObjCName

@ObjCName("FunctionalinterfaceFunctionalInterfaces", exact = true)
open class FunctionalInterfaces {
 @ObjCName("FunctionalinterfaceFunctionalInterfaces_NonParametrized", exact = true)
 fun interface NonParametrized {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withNSString") string: String?
  ): String?
 }

 @ObjCName("FunctionalinterfaceFunctionalInterfaces_Parametrized", exact = true)
 fun interface Parametrized<T> {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withId") t: T
  ): T
 }

 @ObjCName("FunctionalinterfaceFunctionalInterfaces_Specialized", exact = true)
 fun interface Specialized: FunctionalInterfaces.Parametrized<String?> {
  override fun apply(string: String?): String?
 }

 @ObjCName("FunctionalinterfaceFunctionalInterfaces_WithDefaultMethod", exact = true)
 fun interface WithDefaultMethod {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withNSString") string: String?
  ): String?

  @ObjCName("defaultApply")
  fun defaultApply(
   @ObjCName("withNSString") string: String?
  ): String? {
   return this.apply(string)
  }
 }

 @ObjCName("FunctionalinterfaceFunctionalInterfaces_WithObjectMethods", exact = true)
 fun interface WithObjectMethods {
  @ObjCName("apply")
  fun apply(
   @ObjCName("withNSString") string: String?
  ): String?
 }

 @ObjCName("FunctionalinterfaceFunctionalInterfaces_WithParametrizedMethod", exact = true)
 interface WithParametrizedMethod {
  @ObjCName("apply")
  fun <T> apply(
   @ObjCName("withId") t: T
  ): T
 }

 @ObjCName("FunctionalinterfaceFunctionalInterfaces_WithKtProperty", exact = true)
 interface WithKtProperty {
  @ObjCName("size")
  val size: Int
 }
}
