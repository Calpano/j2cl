goog.module('com.google.j2cl.transpiler.readable.jsmethod.JsMethodExample.Sub$impl');

const Base = goog.require('com.google.j2cl.transpiler.readable.jsmethod.JsMethodExample.Base$impl');
const I = goog.require('com.google.j2cl.transpiler.readable.jsmethod.JsMethodExample.I$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @extends {Base<?string>}
 * @implements {I}
 */
class Sub extends Base {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!Sub} */
  static $create__() {
    Sub.$clinit();
    let $instance = new Sub();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsmethod_JsMethodExample_Sub__();
    return $instance;
  }

  $ctor__com_google_j2cl_transpiler_readable_jsmethod_JsMethodExample_Sub__() {
    this.$ctor__com_google_j2cl_transpiler_readable_jsmethod_JsMethodExample_Base__();
  }

  m_m__java_lang_String(/** ?string */ s) {}
  // Bridge method.
  /** @override */
  m(/** * */ arg0) {
    this.m_m__java_lang_String(
        /**@type {?string}*/ ($Casts.$to(arg0, j_l_String)));
  }

  static $clinit() {
    Sub.$clinit = () => {};
    Sub.$loadModules();
    Base.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof Sub;
  }

  static $loadModules() {
    j_l_String = goog.module.get('java.lang.String$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
}
$Util.$setClassMetadata(
    Sub, 'com.google.j2cl.transpiler.readable.jsmethod.JsMethodExample$Sub');

I.$markImplementor(Sub);

exports = Sub;
//# sourceMappingURL=JsMethodExample$Sub.js.map