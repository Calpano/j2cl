goog.module('com.google.j2cl.transpiler.readable.jsasync.Main.AsyncInterface.$LambdaAdaptor$impl');

const AsyncInterface = goog.require('com.google.j2cl.transpiler.readable.jsasync.Main.AsyncInterface$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsasync.Main.IThenable.$Overlay$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');

/**
 * @implements {AsyncInterface}
 */
class $LambdaAdaptor extends j_l_Object {
  constructor(/** ?function():IThenable<Integer> */ fn) {
    $LambdaAdaptor.$clinit();
    super();
    /**@type {?function():IThenable<Integer>}*/
    this.f_$$fn__com_google_j2cl_transpiler_readable_jsasync_Main_AsyncInterface_$LambdaAdaptor;
    this.$ctor__com_google_j2cl_transpiler_readable_jsasync_Main_AsyncInterface_$LambdaAdaptor__com_google_j2cl_transpiler_readable_jsasync_Main_AsyncInterface_$JsFunction(
        fn);
  }

  $ctor__com_google_j2cl_transpiler_readable_jsasync_Main_AsyncInterface_$LambdaAdaptor__com_google_j2cl_transpiler_readable_jsasync_Main_AsyncInterface_$JsFunction(
      /** ?function():IThenable<Integer> */ fn) {
    this.$ctor__java_lang_Object__();
    this.f_$$fn__com_google_j2cl_transpiler_readable_jsasync_Main_AsyncInterface_$LambdaAdaptor =
        fn;
  }
  /** @return {IThenable<Integer>} */
  async m_asyncCall__() {
    let /** ?function():IThenable<Integer> */ $function;
    return (
        $function =
            this.f_$$fn__com_google_j2cl_transpiler_readable_jsasync_Main_AsyncInterface_$LambdaAdaptor,
        $function());
  }

  static $clinit() {
    $LambdaAdaptor.$clinit = () => {};
    $LambdaAdaptor.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof $LambdaAdaptor;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(
    $LambdaAdaptor,
    'com.google.j2cl.transpiler.readable.jsasync.Main$AsyncInterface$$LambdaAdaptor');
AsyncInterface.$markImplementor($LambdaAdaptor);

exports = $LambdaAdaptor;
//# sourceMappingURL=Main$AsyncInterface$$LambdaAdaptor.js.map
