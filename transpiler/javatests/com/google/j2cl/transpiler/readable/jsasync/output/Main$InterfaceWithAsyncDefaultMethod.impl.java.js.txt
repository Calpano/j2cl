goog.module('com.google.j2cl.transpiler.readable.jsasync.Main.InterfaceWithAsyncDefaultMethod$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsasync.Main.IThenable.$Overlay$impl');
let Promise_$Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsasync.Main.Promise.$Overlay$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @interface
 */
class InterfaceWithAsyncDefaultMethod {
  /** @abstract @return {IThenable<Integer>} */
  m_asyncCall__() {}
  /** @return {IThenable<Integer>} */
  static async m_asyncCall__$default__com_google_j2cl_transpiler_readable_jsasync_Main_InterfaceWithAsyncDefaultMethod(
      /** !InterfaceWithAsyncDefaultMethod */ $thisArg) {
    InterfaceWithAsyncDefaultMethod.$clinit();
    return /**@type {Promise<Integer>}*/ (
        Promise.resolve(/**@type {Integer}*/ ($Casts.$to(
            (await /**@type {Promise<Integer>}*/ (
                Promise.resolve(Integer.m_valueOf__int(5)))),
            Integer))));
  }

  static $clinit() {
    InterfaceWithAsyncDefaultMethod.$clinit = () => {};
    InterfaceWithAsyncDefaultMethod.$loadModules();
  }

  static $markImplementor(/** Function*/ ctor) {
    ctor.prototype
        .$implements__com_google_j2cl_transpiler_readable_jsasync_Main_InterfaceWithAsyncDefaultMethod =
        true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_jsasync_Main_InterfaceWithAsyncDefaultMethod;
  }

  static $loadModules() {
    Integer = goog.module.get('java.lang.Integer$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
}
$Util.$setClassMetadataForInterface(
    InterfaceWithAsyncDefaultMethod,
    'com.google.j2cl.transpiler.readable.jsasync.Main$InterfaceWithAsyncDefaultMethod');

InterfaceWithAsyncDefaultMethod.$markImplementor(
    /** @type {Function} */ (InterfaceWithAsyncDefaultMethod));

exports = InterfaceWithAsyncDefaultMethod;
//# sourceMappingURL=Main$InterfaceWithAsyncDefaultMethod.js.map
