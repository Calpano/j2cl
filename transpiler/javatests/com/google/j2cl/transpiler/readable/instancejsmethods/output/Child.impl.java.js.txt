goog.module('com.google.j2cl.transpiler.readable.instancejsmethods.Child$impl');

const MyInterface = goog.require('com.google.j2cl.transpiler.readable.instancejsmethods.MyInterface$impl');
const Parent = goog.require('com.google.j2cl.transpiler.readable.instancejsmethods.Parent$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

/**
 * @implements {MyInterface}
 */
class Child extends Parent {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!Child} */
  static $create__() {
    Child.$clinit();
    let $instance = new Child();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_instancejsmethods_Child__();
    return $instance;
  }

  $ctor__com_google_j2cl_transpiler_readable_instancejsmethods_Child__() {
    this.$ctor__com_google_j2cl_transpiler_readable_instancejsmethods_Parent__();
  }
  /** @override @return {number} */
  sum(/** number */ a, /** number */ b) {
    return a + b + 1;
  }
  /** @override @return {number} */
  bar(/** number */ a, /** number */ b) {
    return a * b + 1;
  }
  /** @override @return {number} */
  myFoo(/** number */ a) {
    return a;
  }
  /** @return {number} */
  intfFoo() {
    return 1;
  }
  // Bridge method for exposing non-JsMethod.
  /** @override @return {number} */
  m_intfFoo__() {
    return this.intfFoo();
  }

  static $clinit() {
    Child.$clinit = () => {};
    Child.$loadModules();
    Parent.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof Child;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(
    Child, 'com.google.j2cl.transpiler.readable.instancejsmethods.Child');

MyInterface.$markImplementor(Child);

exports = Child;
//# sourceMappingURL=Child.js.map