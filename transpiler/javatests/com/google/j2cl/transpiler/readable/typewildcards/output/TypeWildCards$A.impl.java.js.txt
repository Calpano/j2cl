goog.module('com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards.A$impl');

const X = goog.require('com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards.X$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

/**
 * @implements {X}
 */
class A extends j_l_Object {
  /** @protected */
  constructor() {
    super();
    /**@type {number}*/
    this.f_f__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards_A =
        0;
  }
  /** @return {!A} */
  static $create__() {
    let $instance = new A();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards_A__();
    return $instance;
  }

  $ctor__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards_A__() {
    this.$ctor__java_lang_Object__();
  }
  /** @override */
  m_m__() {}

  static $clinit() {
    A.$clinit = () => {};
    A.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof A;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(
    A, 'com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards$A');
X.$markImplementor(A);

exports = A;
//# sourceMappingURL=TypeWildCards$A.js.map
