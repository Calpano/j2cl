goog.module('com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards.HasKey$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards.HasKey.$LambdaAdaptor$impl');

/**
 * @interface
 */
class HasKey {
  /** @abstract @return {?string} */
  m_getKey__() {}
  /** @return {HasKey} */
  static $adapt(/** ?function():?string */ fn) {
    HasKey.$clinit();
    return new $LambdaAdaptor(fn);
  }

  static $clinit() {
    HasKey.$clinit = () => {};
    HasKey.$loadModules();
  }

  static $markImplementor(/** Function */ ctor) {
    ctor.prototype
        .$implements__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards_HasKey =
        true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards_HasKey;
  }

  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards.HasKey.$LambdaAdaptor$impl');
  }
}
$Util.$setClassMetadataForInterface(
    HasKey,
    'com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards$HasKey');

HasKey.$markImplementor(/** @type {Function} */ (HasKey));

exports = HasKey;
//# sourceMappingURL=TypeWildCards$HasKey.js.map
