goog.module('com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault.A$impl');

const I = goog.require('com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault.I$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

/**
 * @abstract
 * @implements {I}
 */
class A extends j_l_Object {
  /** @protected */
  constructor() {
    super();
  }

  $ctor__com_google_j2cl_transpiler_readable_abstractmethodoverridedefault_AbstractMethodOverrideDefault_A__() {
    this.$ctor__java_lang_Object__();
  }
  /** @abstract @override */
  m_foo__() {}
  // Default method forwarding stub.

  m_bar__() {
    I.m_bar__$default__com_google_j2cl_transpiler_readable_abstractmethodoverridedefault_AbstractMethodOverrideDefault_I(
        this);
  }

  static $clinit() {
    A.$clinit = () => {};
    A.$loadModules();
    j_l_Object.$clinit();
    I.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof A;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(
    A,
    'com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault$A');

I.$markImplementor(A);

exports = A;
//# sourceMappingURL=AbstractMethodOverrideDefault$A.js.map
