goog.module('com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault.B$impl');

const A = goog.require('com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault.A$impl');
const J = goog.require('com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault.J$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

/**
 * @abstract
 * @implements {J}
 */
class B extends A {
  /** @protected */
  constructor() {
    super();
  }

  $ctor__com_google_j2cl_transpiler_readable_abstractmethodoverridedefault_AbstractMethodOverrideDefault_B__() {
    this.$ctor__com_google_j2cl_transpiler_readable_abstractmethodoverridedefault_AbstractMethodOverrideDefault_A__();
  }
  /** @override */
  m_bar__() {
    if (false) {
      this.m_bar__();
    }
  }

  static $clinit() {
    B.$clinit = () => {};
    B.$loadModules();
    A.$clinit();
    J.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof B;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(
    B,
    'com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault$B');

J.$markImplementor(B);

exports = B;
//# sourceMappingURL=AbstractMethodOverrideDefault$B.js.map
