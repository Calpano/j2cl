goog.module('com.google.j2cl.transpiler.readable.interfacejsbridge.SubInterface$impl');

const MyInterface = goog.require('com.google.j2cl.transpiler.readable.interfacejsbridge.MyInterface$impl');
const MyJsInterface = goog.require('com.google.j2cl.transpiler.readable.interfacejsbridge.MyJsInterface$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.interfacejsbridge.SubInterface.$LambdaAdaptor$impl');

/**
 * @interface
 * @extends {MyJsInterface}
 * @extends {MyInterface}
 */
class SubInterface {
  /** @abstract @override @return {number} */
  foo(/** number */ a) {}
  /** @return {SubInterface} */
  static $adapt(/** ?function(number):number */ fn) {
    SubInterface.$clinit();
    return new $LambdaAdaptor(fn);
  }

  static $clinit() {
    SubInterface.$clinit = () => {};
    SubInterface.$loadModules();
  }

  static $markImplementor(/** Function */ ctor) {
    MyJsInterface.$markImplementor(ctor);
    MyInterface.$markImplementor(ctor);
    ctor.prototype
        .$implements__com_google_j2cl_transpiler_readable_interfacejsbridge_SubInterface =
        true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_interfacejsbridge_SubInterface;
  }

  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.interfacejsbridge.SubInterface.$LambdaAdaptor$impl');
  }
}
SubInterface.$markImplementor(/**@type {Function}*/ (SubInterface));
$Util.$setClassMetadataForInterface(
    SubInterface,
    'com.google.j2cl.transpiler.readable.interfacejsbridge.SubInterface');

exports = SubInterface;
//# sourceMappingURL=SubInterface.js.map
