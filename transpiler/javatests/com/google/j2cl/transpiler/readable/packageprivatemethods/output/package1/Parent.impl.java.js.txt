goog.module('com.google.j2cl.transpiler.readable.packageprivatemethods.package1.Parent$impl');

const SuperParent = goog.require('com.google.j2cl.transpiler.readable.packageprivatemethods.package1.SuperParent$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

/**
 * @abstract
 */
class Parent extends SuperParent {
  /** @protected */
  constructor() {
    super();
  }

  $ctor__com_google_j2cl_transpiler_readable_packageprivatemethods_package1_Parent__() {
    this.$ctor__com_google_j2cl_transpiler_readable_packageprivatemethods_package1_SuperParent__();
  }
  /** @override @return {number} */
  m_foo__int_$pp_com_google_j2cl_transpiler_readable_packageprivatemethods_package1(
      /** number */ a) {
    return a;
  }
  /** @abstract @return {number} */
  m_bar__int__int__int(/** number */ a, /** number */ b, /** number */ c) {}
  // Bridge method.
  /** @override @return {number} */
  m_bar__int__int__int_$pp_com_google_j2cl_transpiler_readable_packageprivatemethods_package1(
      /** number */ arg0, /** number */ arg1, /** number */ arg2) {
    return this.m_bar__int__int__int(arg0, arg1, arg2);
  }

  static $clinit() {
    Parent.$clinit = () => {};
    Parent.$loadModules();
    SuperParent.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof Parent;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(
    Parent,
    'com.google.j2cl.transpiler.readable.packageprivatemethods.package1.Parent');

exports = Parent;
//# sourceMappingURL=Parent.js.map
