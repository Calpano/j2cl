goog.module('com.google.j2cl.transpiler.readable.jsfunction.Main.Implementor$impl');

const ApiWithMethodReturningParametricJsFunction = goog.require('com.google.j2cl.transpiler.readable.jsfunction.Main.ApiWithMethodReturningParametricJsFunction$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

/**
 * @implements {ApiWithMethodReturningParametricJsFunction}
 */
class Implementor extends j_l_Object {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!Implementor} */
  static $create__() {
    Implementor.$clinit();
    let $instance = new Implementor();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsfunction_Main_Implementor__();
    return $instance;
  }

  $ctor__com_google_j2cl_transpiler_readable_jsfunction_Main_Implementor__() {
    this.$ctor__java_lang_Object__();
  }
  /** @template T @return {?function(T):void} */
  anApi() {
    return /**@type {?function(T):void}*/ (null);
  }
  // Bridge method.
  /** @override @template T @return {?function(T):void} */
  m_anApi__() {
    return /**@type {?function(T):void}*/ (this.anApi());
  }

  static $clinit() {
    Implementor.$clinit = () => {};
    Implementor.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof Implementor;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(
    Implementor,
    'com.google.j2cl.transpiler.readable.jsfunction.Main$Implementor');
ApiWithMethodReturningParametricJsFunction.$markImplementor(Implementor);

exports = Implementor;
//# sourceMappingURL=Main$Implementor.js.map
