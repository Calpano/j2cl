goog.module('com.google.j2cl.transpiler.readable.intersectiontype.Getable$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.intersectiontype.Getable.$LambdaAdaptor$impl');

/**
 * @interface
 * @template T
 */
class Getable {
  /** @abstract @return {T} */
  m_get__() {}
  /** @template T @return {Getable<T>} */
  static $adapt(/** ?function():T */ fn) {
    Getable.$clinit();
    return /**@type {!$LambdaAdaptor<T>}*/ (new $LambdaAdaptor(fn));
  }

  static $clinit() {
    Getable.$clinit = () => {};
    Getable.$loadModules();
  }

  static $markImplementor(/** Function*/ ctor) {
    ctor.prototype
        .$implements__com_google_j2cl_transpiler_readable_intersectiontype_Getable =
        true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_intersectiontype_Getable;
  }

  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.intersectiontype.Getable.$LambdaAdaptor$impl');
  }
}
$Util.$setClassMetadataForInterface(
    Getable, 'com.google.j2cl.transpiler.readable.intersectiontype.Getable');

Getable.$markImplementor(/** @type {Function} */ (Getable));

exports = Getable;
//# sourceMappingURL=Getable.js.map