goog.module('com.google.j2cl.transpiler.readable.intersectiontype.Cmp2$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.intersectiontype.Cmp2.$LambdaAdaptor$impl');

/**
 * @interface
 * @template T
 */
class Cmp2 {
  /** @abstract @return {number} */
  m_cmp__int(/** number */ a) {}
  /** @template T @return {Cmp2<T>} */
  static $adapt(/** ?function(number):number */ fn) {
    Cmp2.$clinit();
    return /**@type {!$LambdaAdaptor<T>}*/ (new $LambdaAdaptor(fn));
  }

  static $clinit() {
    Cmp2.$clinit = () => {};
    Cmp2.$loadModules();
  }

  static $markImplementor(/** Function */ ctor) {
    ctor.prototype
        .$implements__com_google_j2cl_transpiler_readable_intersectiontype_Cmp2 =
        true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_intersectiontype_Cmp2;
  }

  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.intersectiontype.Cmp2.$LambdaAdaptor$impl');
  }
}
$Util.$setClassMetadataForInterface(
    Cmp2, 'com.google.j2cl.transpiler.readable.intersectiontype.Cmp2');

Cmp2.$markImplementor(/** @type {Function} */ (Cmp2));

exports = Cmp2;
//# sourceMappingURL=Cmp2.js.map
