goog.module('com.google.j2cl.transpiler.readable.intersectiontype.Cmp$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.intersectiontype.Cmp.$LambdaAdaptor$impl');

/**
 * @interface
 */
class Cmp {
  /** @abstract @return {number} */
  m_cmp__() {}
  /** @return {Cmp} */
  static $adapt(/** ?function():number */ fn) {
    Cmp.$clinit();
    return new $LambdaAdaptor(fn);
  }

  static $clinit() {
    Cmp.$clinit = () => {};
    Cmp.$loadModules();
  }

  static $markImplementor(/** Function */ ctor) {
    ctor.prototype
        .$implements__com_google_j2cl_transpiler_readable_intersectiontype_Cmp =
        true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_intersectiontype_Cmp;
  }

  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.intersectiontype.Cmp.$LambdaAdaptor$impl');
  }
}
$Util.$setClassMetadataForInterface(
    Cmp, 'com.google.j2cl.transpiler.readable.intersectiontype.Cmp');
Cmp.$markImplementor(/**@type {Function}*/ (Cmp));

exports = Cmp;
//# sourceMappingURL=Cmp.js.map
