goog.module('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.Producer$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.Producer.$LambdaAdaptor$impl');

/**
 * @interface
 * @template T
 */
class Producer {
  /** @abstract @return {T} */
  m_produce__() {}
  /** @template T @return {Producer<T>} */
  static $adapt(/** ?function():T */ fn) {
    Producer.$clinit();
    return /**@type {!$LambdaAdaptor<T>}*/ (new $LambdaAdaptor(fn));
  }

  static $clinit() {
    Producer.$clinit = () => {};
    Producer.$loadModules();
  }

  static $markImplementor(/** Function */ ctor) {
    ctor.prototype
        .$implements__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_Producer =
        true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_Producer;
  }

  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.Producer.$LambdaAdaptor$impl');
  }
}
$Util.$setClassMetadataForInterface(
    Producer,
    'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences$Producer');
Producer.$markImplementor(/** @type {Function} */ (Producer));

exports = Producer;
//# sourceMappingURL=MethodReferences$Producer.js.map
