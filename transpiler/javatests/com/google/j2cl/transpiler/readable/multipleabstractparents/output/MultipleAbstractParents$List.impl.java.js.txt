goog.module('com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents.List$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents.List.$LambdaAdaptor$impl');

/**
 * @interface
 * @template T
 */
class List {
  /** @abstract @return {?string} */
  m_getFoo__java_lang_Object(/** T */ t) {}
  /** @template T @return {List<T>} */
  static $adapt(/** ?function(T):?string */ fn) {
    List.$clinit();
    return /**@type {!$LambdaAdaptor<T>}*/ (new $LambdaAdaptor(fn));
  }

  static $clinit() {
    List.$clinit = () => {};
    List.$loadModules();
  }

  static $markImplementor(/** Function*/ ctor) {
    ctor.prototype
        .$implements__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents_List =
        true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents_List;
  }

  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents.List.$LambdaAdaptor$impl');
  }
}
$Util.$setClassMetadataForInterface(
    List,
    'com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$List');

List.$markImplementor(/** @type {Function} */ (List));

exports = List;
//# sourceMappingURL=MultipleAbstractParents$List.js.map
