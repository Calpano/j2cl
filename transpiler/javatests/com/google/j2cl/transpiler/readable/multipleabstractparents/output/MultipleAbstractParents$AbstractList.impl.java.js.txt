goog.module('com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents.AbstractList$impl');

const AbstractCollection = goog.require('com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents.AbstractCollection$impl');
const List = goog.require('com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents.List$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

/**
 * @abstract
 * @template T
 * @extends {AbstractCollection<T>}
 * @implements {List<T>}
 */
class AbstractList extends AbstractCollection {
  /** @protected */
  constructor() {
    super();
  }

  $ctor__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents_AbstractList__() {
    this.$ctor__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents_AbstractCollection__();
  }

  static $clinit() {
    AbstractList.$clinit = () => {};
    AbstractList.$loadModules();
    AbstractCollection.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof AbstractList;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(
    AbstractList,
    'com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$AbstractList');

List.$markImplementor(AbstractList);

exports = AbstractList;
//# sourceMappingURL=MultipleAbstractParents$AbstractList.js.map