goog.module('com.google.j2cl.transpiler.readable.interfaces.Main.AbstractImplementor$impl');

const SubInterface = goog.require('com.google.j2cl.transpiler.readable.interfaces.Main.SubInterface$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Main = goog.forwardDeclare('com.google.j2cl.transpiler.readable.interfaces.Main$impl');
let Interface = goog.forwardDeclare('com.google.j2cl.transpiler.readable.interfaces.Main.Interface$impl');

/**
 * @abstract
 * @implements {SubInterface}
 */
class AbstractImplementor extends j_l_Object {
  /** @protected */
  constructor() {
    super();
    /**@type {Main}*/
    this.f_$outer_this__com_google_j2cl_transpiler_readable_interfaces_Main_AbstractImplementor;
  }

  $ctor__com_google_j2cl_transpiler_readable_interfaces_Main_AbstractImplementor__com_google_j2cl_transpiler_readable_interfaces_Main(
      /** Main */ $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_interfaces_Main_AbstractImplementor =
        $outer_this;
    this.$ctor__java_lang_Object__();
  }
  // Default method forwarding stub.
  /** @override */
  m_defaultMethodX__java_lang_String(/** ?string */ arg0) {
    SubInterface
        .m_defaultMethodX__$default__com_google_j2cl_transpiler_readable_interfaces_Main_SubInterface__java_lang_String(
            this, arg0);
  }
  // Default method forwarding stub.
  /** @override */
  m_defaultMethod__java_lang_Object(/** ?string */ arg0) {
    Interface
        .m_defaultMethod__$default__com_google_j2cl_transpiler_readable_interfaces_Main_Interface__java_lang_Object(
            this, arg0);
  }

  static $clinit() {
    AbstractImplementor.$clinit = () => {};
    AbstractImplementor.$loadModules();
    j_l_Object.$clinit();
    SubInterface.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof AbstractImplementor;
  }

  static $loadModules() {
    Interface = goog.module.get(
        'com.google.j2cl.transpiler.readable.interfaces.Main.Interface$impl');
  }
}
$Util.$setClassMetadata(
    AbstractImplementor,
    'com.google.j2cl.transpiler.readable.interfaces.Main$AbstractImplementor');

SubInterface.$markImplementor(AbstractImplementor);

exports = AbstractImplementor;
//# sourceMappingURL=Main$AbstractImplementor.js.map
