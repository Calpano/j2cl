goog.module('com.google.j2cl.transpiler.readable.interfaces.Main.SubInterface.$LambdaAdaptor$impl');

const SubInterface = goog.require('com.google.j2cl.transpiler.readable.interfaces.Main.SubInterface$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @implements {SubInterface}
 */
class $LambdaAdaptor extends j_l_Object {
  constructor(/** ?function():void */ fn) {
    $LambdaAdaptor.$clinit();
    super();
    /**@type {?function():void}*/
    this.f_fn__com_google_j2cl_transpiler_readable_interfaces_Main_SubInterface_$LambdaAdaptor;
    this.$ctor__com_google_j2cl_transpiler_readable_interfaces_Main_SubInterface_$LambdaAdaptor__com_google_j2cl_transpiler_readable_interfaces_Main_SubInterface_$JsFunction(
        fn);
  }

  $ctor__com_google_j2cl_transpiler_readable_interfaces_Main_SubInterface_$LambdaAdaptor__com_google_j2cl_transpiler_readable_interfaces_Main_SubInterface_$JsFunction(
      /** ?function():void */ fn) {
    this.$ctor__java_lang_Object__();
    this.f_fn__com_google_j2cl_transpiler_readable_interfaces_Main_SubInterface_$LambdaAdaptor =
        fn;
  }
  /** @override */
  m_interfaceMethod__() {
    {
      let $function =
          this.f_fn__com_google_j2cl_transpiler_readable_interfaces_Main_SubInterface_$LambdaAdaptor;
      $function();
    }
  }
  // Bridge method.
  /** @override */
  m_defaultMethod__java_lang_Object(/** ?string */ arg0) {
    this.m_defaultMethod__java_lang_String(
        /**@type {?string}*/ ($Casts.$to(arg0, j_l_String)));
  }
  // Default method forwarding stub.
  /** @override */
  m_defaultMethod__java_lang_String(/** ?string */ arg0) {
    SubInterface
        .m_defaultMethod__$default__com_google_j2cl_transpiler_readable_interfaces_Main_SubInterface__java_lang_String(
            this, arg0);
  }

  static $clinit() {
    $LambdaAdaptor.$clinit = () => {};
    $LambdaAdaptor.$loadModules();
    j_l_Object.$clinit();
    SubInterface.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof $LambdaAdaptor;
  }

  static $loadModules() {
    j_l_String = goog.module.get('java.lang.String$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
}
$Util.$setClassMetadata(
    $LambdaAdaptor,
    'com.google.j2cl.transpiler.readable.interfaces.Main$SubInterface$$LambdaAdaptor');
SubInterface.$markImplementor($LambdaAdaptor);

exports = $LambdaAdaptor;
//# sourceMappingURL=Main$SubInterface$$LambdaAdaptor.js.map
