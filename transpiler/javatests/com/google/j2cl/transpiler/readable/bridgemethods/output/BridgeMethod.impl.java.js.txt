goog.module('com.google.j2cl.transpiler.readable.bridgemethods.BridgeMethod$impl');

const Parent = goog.require('com.google.j2cl.transpiler.readable.bridgemethods.Parent$impl');
const SomeInterface = goog.require('com.google.j2cl.transpiler.readable.bridgemethods.SomeInterface$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let AssertionError = goog.forwardDeclare('java.lang.AssertionError$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @extends {Parent<AssertionError>}
 * @implements {SomeInterface<AssertionError, (Number|number)>}
 */
class BridgeMethod extends Parent {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!BridgeMethod} */
  static $create__() {
    BridgeMethod.$clinit();
    let $instance = new BridgeMethod();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgemethods_BridgeMethod__();
    return $instance;
  }

  $ctor__com_google_j2cl_transpiler_readable_bridgemethods_BridgeMethod__() {
    this.$ctor__com_google_j2cl_transpiler_readable_bridgemethods_Parent__();
  }

  m_foo__java_lang_AssertionError__java_lang_Number(
      /** AssertionError */ a, /** (Number|number) */ n) {}
  /** @override */
  m_bar__java_lang_Number(/** (Number|number) */ t) {}

  m_fun__java_lang_Number(/** (Number|number) */ t) {}
  // Bridge method.
  /** @override */
  m_foo__java_lang_Object__java_lang_Number(
      /** AssertionError */ arg0, /** (Number|number) */ arg1) {
    this.m_foo__java_lang_AssertionError__java_lang_Number(
        /**@type {AssertionError}*/ ($Casts.$to(arg0, AssertionError)), arg1);
  }
  // Bridge method.
  /** @override */
  m_foo__java_lang_Error__java_lang_Number(
      /** AssertionError */ arg0, /** (Number|number) */ arg1) {
    this.m_foo__java_lang_AssertionError__java_lang_Number(
        /**@type {AssertionError}*/ ($Casts.$to(arg0, AssertionError)), arg1);
  }

  static $clinit() {
    BridgeMethod.$clinit = () => {};
    BridgeMethod.$loadModules();
    Parent.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof BridgeMethod;
  }

  static $loadModules() {
    AssertionError = goog.module.get('java.lang.AssertionError$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
}
SomeInterface.$markImplementor(BridgeMethod);
$Util.$setClassMetadata(
    BridgeMethod,
    'com.google.j2cl.transpiler.readable.bridgemethods.BridgeMethod');

exports = BridgeMethod;
//# sourceMappingURL=BridgeMethod.js.map
