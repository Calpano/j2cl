goog.module('com.google.j2cl.transpiler.readable.bridgemethods.SomeOtherFooInterface$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgemethods.SomeOtherFooInterface.$LambdaAdaptor$impl');

/**
 * @interface
 * @template T
 */
class SomeOtherFooInterface {
  /** @abstract */
  m_foo__java_lang_Object__java_lang_Double(/** T */ t, /** ?number */ s) {}
  /** @template T @return {SomeOtherFooInterface<T>} */
  static $adapt(/** ?function(T, ?number):void */ fn) {
    SomeOtherFooInterface.$clinit();
    return /**@type {!$LambdaAdaptor<T>}*/ (new $LambdaAdaptor(fn));
  }

  static $clinit() {
    SomeOtherFooInterface.$clinit = () => {};
    SomeOtherFooInterface.$loadModules();
  }

  static $markImplementor(/** Function */ ctor) {
    ctor.prototype
        .$implements__com_google_j2cl_transpiler_readable_bridgemethods_SomeOtherFooInterface =
        true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_bridgemethods_SomeOtherFooInterface;
  }

  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.bridgemethods.SomeOtherFooInterface.$LambdaAdaptor$impl');
  }
}
SomeOtherFooInterface.$markImplementor(
    /**@type {Function}*/ (SomeOtherFooInterface));
$Util.$setClassMetadataForInterface(
    SomeOtherFooInterface,
    'com.google.j2cl.transpiler.readable.bridgemethods.SomeOtherFooInterface');

exports = SomeOtherFooInterface;
//# sourceMappingURL=SomeOtherFooInterface.js.map
