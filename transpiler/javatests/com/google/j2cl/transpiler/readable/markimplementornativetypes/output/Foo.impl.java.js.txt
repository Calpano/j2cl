goog.module('com.google.j2cl.transpiler.readable.markimplementornativetypes.Foo$impl');

const RegularInterface = goog.require('com.google.j2cl.transpiler.readable.markimplementornativetypes.RegularInterface$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let MyNativeInterface = goog.forwardDeclare('test.foo.MyNativeInterface');

/**
 * @implements {MyNativeInterface}
 * @implements {RegularInterface}
 */
class Foo extends j_l_Object {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!Foo} */
  static $create__() {
    Foo.$clinit();
    let $instance = new Foo();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_markimplementornativetypes_Foo__();
    return $instance;
  }

  $ctor__com_google_j2cl_transpiler_readable_markimplementornativetypes_Foo__() {
    this.$ctor__java_lang_Object__();
  }

  static $clinit() {
    Foo.$clinit = () => {};
    Foo.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof Foo;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(
    Foo, 'com.google.j2cl.transpiler.readable.markimplementornativetypes.Foo');
RegularInterface.$markImplementor(Foo);

exports = Foo;
//# sourceMappingURL=Foo.js.map
