goog.module('com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunction$impl');

const MyFunction = goog.require('com.google.j2cl.transpiler.readable.overwrittentypevariables.MyFunction$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunction.$LambdaAdaptor$impl');

/**
 * @interface
 * @template T
 * @extends {MyFunction<T, ?string>}
 */
class HashFunction {
  /** @template T @return {HashFunction<T>} */
  static $adapt(/** ?function(T):?string */ fn) {
    HashFunction.$clinit();
    return /**@type {!$LambdaAdaptor<T>}*/ (new $LambdaAdaptor(fn));
  }

  static $clinit() {
    HashFunction.$clinit = () => {};
    HashFunction.$loadModules();
  }

  static $markImplementor(/** Function*/ ctor) {
    MyFunction.$markImplementor(ctor);
    ctor.prototype
        .$implements__com_google_j2cl_transpiler_readable_overwrittentypevariables_HashFunction =
        true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_overwrittentypevariables_HashFunction;
  }

  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunction.$LambdaAdaptor$impl');
  }
}
$Util.$setClassMetadataForInterface(
    HashFunction,
    'com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunction');

HashFunction.$markImplementor(/** @type {Function} */ (HashFunction));

exports = HashFunction;
//# sourceMappingURL=HashFunction.js.map
