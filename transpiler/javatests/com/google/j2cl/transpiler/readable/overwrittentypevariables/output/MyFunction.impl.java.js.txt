goog.module('com.google.j2cl.transpiler.readable.overwrittentypevariables.MyFunction$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.overwrittentypevariables.MyFunction.$LambdaAdaptor$impl');

/**
 * @interface
 * @template F, T
 */
class MyFunction {
  /** @abstract @return {T} */
  m_apply__java_lang_Object(/** F */ input) {}
  /** @template F, T @return {MyFunction<F, T>} */
  static $adapt(/** ?function(F):T */ fn) {
    MyFunction.$clinit();
    return /**@type {!$LambdaAdaptor<F, T>}*/ (new $LambdaAdaptor(fn));
  }

  static $clinit() {
    MyFunction.$clinit = () => {};
    MyFunction.$loadModules();
  }

  static $markImplementor(/** Function*/ ctor) {
    ctor.prototype
        .$implements__com_google_j2cl_transpiler_readable_overwrittentypevariables_MyFunction =
        true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_overwrittentypevariables_MyFunction;
  }

  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.overwrittentypevariables.MyFunction.$LambdaAdaptor$impl');
  }
}
$Util.$setClassMetadataForInterface(
    MyFunction,
    'com.google.j2cl.transpiler.readable.overwrittentypevariables.MyFunction');

MyFunction.$markImplementor(/** @type {Function} */ (MyFunction));

exports = MyFunction;
//# sourceMappingURL=MyFunction.js.map