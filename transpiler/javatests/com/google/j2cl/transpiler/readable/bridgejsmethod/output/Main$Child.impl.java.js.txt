goog.module('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.Child$impl');

const Parent = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.Parent$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Main = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgejsmethod.Main$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @extends {Parent<Child>}
 */
class Child extends Parent {
  /** @protected */
  constructor() {
    super();
    /**@type {Main}*/
    this.f_$outer_this__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_Child;
  }
  /** @return {!Child} */
  static $create__com_google_j2cl_transpiler_readable_bridgejsmethod_Main(
      /** Main */ $outer_this) {
    Child.$clinit();
    let $instance = new Child();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_Child__com_google_j2cl_transpiler_readable_bridgejsmethod_Main(
            $outer_this);
    return $instance;
  }

  $ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_Child__com_google_j2cl_transpiler_readable_bridgejsmethod_Main(
      /** Main */ $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_Child =
        $outer_this;
    this.$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_Parent__com_google_j2cl_transpiler_readable_bridgejsmethod_Main(
        $outer_this);
  }
  // Bridge method.
  /** @override */
  jsMethod(/** Parent */ arg0) {
    super.jsMethod(/**@type {Child}*/ ($Casts.$to(arg0, Child)));
  }
  // Bridge method.
  /** @override */
  m_method__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_Parent(
      /** Parent */ arg0) {
    super.m_method__java_lang_Object(
        /**@type {Child}*/ ($Casts.$to(arg0, Child)));
  }
  // Bridge method.
  /** @override */
  m_method__java_lang_Object(/** * */ arg0) {
    super
        .m_method__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_Parent(
            /**@type {Child}*/ ($Casts.$to(arg0, Child)));
  }

  static $clinit() {
    Child.$clinit = () => {};
    Child.$loadModules();
    Parent.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof Child;
  }

  static $loadModules() {
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
}
$Util.$setClassMetadata(
    Child, 'com.google.j2cl.transpiler.readable.bridgejsmethod.Main$Child');

exports = Child;
//# sourceMappingURL=Main$Child.js.map
