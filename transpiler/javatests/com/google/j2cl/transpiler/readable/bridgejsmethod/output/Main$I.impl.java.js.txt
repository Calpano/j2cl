goog.module('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.I$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.I.$LambdaAdaptor$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');

/**
 * @interface
 * @template T
 */
class I {
  /** @abstract @return {T} */
  fun(/** T */ t) {}
  /** @template T @return {I<T>} */
  static $adapt(/** ?function(T):T */ fn) {
    I.$clinit();
    return /**@type {!$LambdaAdaptor<T>}*/ (new $LambdaAdaptor(fn));
  }

  static $clinit() {
    I.$clinit = () => {};
    I.$loadModules();
  }

  static $markImplementor(/** Function */ ctor) {
    ctor.prototype
        .$implements__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_I =
        true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_I;
  }

  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.bridgejsmethod.Main.I.$LambdaAdaptor$impl');
  }
}
$Util.$setClassMetadataForInterface(
    I, 'com.google.j2cl.transpiler.readable.bridgejsmethod.Main$I');

I.$markImplementor(/** @type {Function} */ (I));

exports = I;
//# sourceMappingURL=Main$I.js.map
