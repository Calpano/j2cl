goog.module('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.P$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.P.$LambdaAdaptor$impl');

/**
 * @interface
 */
class P {
  /** @abstract @return {?string} */
  m_getKey__() {}
  /** @return {P} */
  static $adapt(/** ?function():?string */ fn) {
    P.$clinit();
    return new $LambdaAdaptor(fn);
  }

  static $clinit() {
    P.$clinit = () => {};
    P.$loadModules();
  }

  static $markImplementor(/** Function */ ctor) {
    ctor.prototype
        .$implements__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_P =
        true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_P;
  }

  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.bridgejsmethod.Main.P.$LambdaAdaptor$impl');
  }
}
P.$markImplementor(/**@type {Function}*/ (P));
$Util.$setClassMetadataForInterface(
    P, 'com.google.j2cl.transpiler.readable.bridgejsmethod.Main$P');

exports = P;
//# sourceMappingURL=Main$P.js.map
