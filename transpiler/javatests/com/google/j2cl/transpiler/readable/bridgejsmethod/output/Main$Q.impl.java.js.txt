goog.module('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.Q$impl');

const P = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.P$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Main = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgejsmethod.Main$impl');

/**
 * @abstract
 * @implements {P}
 */
class Q extends j_l_Object {
  /** @protected */
  constructor() {
    super();
    /**@type {Main}*/
    this.$outer_this__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_Q;
  }

  $ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_Q__com_google_j2cl_transpiler_readable_bridgejsmethod_Main(
      /** Main */ $outer_this) {
    this.$outer_this__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_Q =
        $outer_this;
    this.$ctor__java_lang_Object__();
  }
  /** @abstract @return {?string} */
  getKey() {}
  // Bridge method.
  /** @override @return {?string} */
  m_getKey__() {
    return this.getKey();
  }

  static $clinit() {
    Q.$clinit = () => {};
    Q.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof Q;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(
    Q, 'com.google.j2cl.transpiler.readable.bridgejsmethod.Main$Q');
P.$markImplementor(Q);

exports = Q;
//# sourceMappingURL=Main$Q.js.map
