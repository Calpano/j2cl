goog.module('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.G$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.G.$LambdaAdaptor$impl');

/**
 * @interface
 * @template V
 */
class G {
  /** @abstract @return {V} */
  m_enclose__java_lang_Object(/** V */ value) {}
  /** @template V @return {G<V>} */
  static $adapt(/** ?function(V):V */ fn) {
    G.$clinit();
    return /**@type {!$LambdaAdaptor<V>}*/ (new $LambdaAdaptor(fn));
  }

  static $clinit() {
    G.$clinit = () => {};
    G.$loadModules();
  }

  static $markImplementor(/** Function */ ctor) {
    ctor.prototype
        .$implements__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_G =
        true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_G;
  }

  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.bridgejsmethod.Main.G.$LambdaAdaptor$impl');
  }
}
G.$markImplementor(/**@type {Function}*/ (G));
$Util.$setClassMetadataForInterface(
    G, 'com.google.j2cl.transpiler.readable.bridgejsmethod.Main$G');

exports = G;
//# sourceMappingURL=Main$G.js.map
