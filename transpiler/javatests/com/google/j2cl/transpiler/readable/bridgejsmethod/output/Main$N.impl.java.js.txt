goog.module('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.N$impl');

const M = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.M$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Main = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgejsmethod.Main$impl');
let B = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.B$impl');

/**
 * @abstract
 * @implements {M}
 */
class N extends j_l_Object {
  /** @protected */
  constructor() {
    super();
    /**@type {Main}*/
    this.f_$outer_this__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_N;
  }

  $ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_N__com_google_j2cl_transpiler_readable_bridgejsmethod_Main(
      /** Main */ $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_N =
        $outer_this;
    this.$ctor__java_lang_Object__();
  }
  /** @abstract @return {B} */
  getB() {}
  // Bridge method for exposing non-JsMethod.
  /** @override @return {B} */
  m_getB__() {
    return this.getB();
  }

  static $clinit() {
    N.$clinit = () => {};
    N.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof N;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(
    N, 'com.google.j2cl.transpiler.readable.bridgejsmethod.Main$N');

M.$markImplementor(N);

exports = N;
//# sourceMappingURL=Main$N.js.map
