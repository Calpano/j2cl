goog.module('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.F$impl');

const A = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.A$impl');
const I = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.I$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @extends {A<Integer>}
 * @implements {I<Integer>}
 */
class F extends A {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!F} */
  static $create__() {
    F.$clinit();
    let $instance = new F();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_F__();
    return $instance;
  }

  $ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_F__() {
    this.$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_A__();
  }
  // Bridge method.
  /** @override @return {Integer} */
  fun(/** (Number|number) */ arg0) {
    return /**@type {Integer}*/ ($Casts.$to(
        super.fun(/**@type {Integer}*/ ($Casts.$to(arg0, Integer))), Integer));
  }

  static $clinit() {
    F.$clinit = () => {};
    F.$loadModules();
    A.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof F;
  }

  static $loadModules() {
    Integer = goog.module.get('java.lang.Integer$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
}
$Util.$setClassMetadata(
    F, 'com.google.j2cl.transpiler.readable.bridgejsmethod.Main$F');

I.$markImplementor(F);

exports = F;
//# sourceMappingURL=Main$F.js.map