goog.module('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.C$impl');

const A = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.A$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @extends {A<Integer>}
 */
class C extends A {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!C} */
  static $create__() {
    C.$clinit();
    let $instance = new C();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_C__();
    return $instance;
  }

  $ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_C__() {
    this.$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_A__();
  }
  /** @return {Integer} */
  m_fun__java_lang_Integer(/** Integer */ i) {
    return i;
  }
  /** @override @return {Integer} */
  // Bridge method.
  fun(/** * */ arg0) {
    return this.m_fun__java_lang_Integer(
        /**@type {Integer}*/ ($Casts.$to(arg0, Integer)));
  }

  static $clinit() {
    C.$clinit = () => {};
    C.$loadModules();
    A.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof C;
  }

  static $loadModules() {
    Integer = goog.module.get('java.lang.Integer$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
}
$Util.$setClassMetadata(
    C, 'com.google.j2cl.transpiler.readable.bridgejsmethod.Main$C');

exports = C;
//# sourceMappingURL=Main$C.js.map