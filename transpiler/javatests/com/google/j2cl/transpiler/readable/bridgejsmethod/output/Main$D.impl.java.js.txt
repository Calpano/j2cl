goog.module('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.D$impl');

const A = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.A$impl');
const I = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.I$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Integer = goog.forwardDeclare('java.lang.Integer$impl');

/**
 * @extends {A<Integer>}
 * @implements {I<Integer>}
 */
class D extends A {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!D} */
  static $create__() {
    D.$clinit();
    let $instance = new D();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_D__();
    return $instance;
  }

  $ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_D__() {
    this.$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_A__();
  }
  /** @override @return {Integer} */
  fun(/** Integer */ i) {
    return i;
  }

  static $clinit() {
    D.$clinit = () => {};
    D.$loadModules();
    A.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof D;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(
    D, 'com.google.j2cl.transpiler.readable.bridgejsmethod.Main$D');
I.$markImplementor(D);

exports = D;
//# sourceMappingURL=Main$D.js.map
