goog.module('com.google.j2cl.transpiler.readable.arithmeticexpressions.ArithmeticExpressions$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Long = goog.require('nativebootstrap.Long$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Byte = goog.forwardDeclare('java.lang.Byte$impl');
let Character = goog.forwardDeclare('java.lang.Character$impl');
let Double = goog.forwardDeclare('java.lang.Double$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let Long = goog.forwardDeclare('java.lang.Long$impl');
let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');
let $LongUtils = goog.forwardDeclare('vmbootstrap.LongUtils$impl');
let $Primitives = goog.forwardDeclare('vmbootstrap.Primitives$impl');

class ArithmeticExpressions extends j_l_Object {
  /** @protected */
  constructor() {
    super();
    /**@type {!$Long}*/
    this.f_bar__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions =
        $Long.fromInt(0);
    /**@type {!$Long}*/
    this.f_intField__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions =
        $Long.fromInt(0);
  }
  /** @return {!ArithmeticExpressions} */
  static $create__() {
    ArithmeticExpressions.$clinit();
    let $instance = new ArithmeticExpressions();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions__();
    return $instance;
  }

  $ctor__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions__() {
    this.$ctor__java_lang_Object__();
    this.$init___$p_com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions();
  }

  m_testCoercions__() {
    let b = 1;
    let c = 1 /* '\u0001' */;
    let s = 1;
    let i = 1;
    let f = 1;
    let d = 1;
    b = -1;
    c = 65535 /* '\uFFFF' */;
    s = -1;
    i = -1;
    f = 9.223372036854776E18;
    d = 9.223372036854776E18;
  }

  m_testPrimitives__() {
    let a = 10;
    let b = a++;
    let c = a--;
    let d = ++a;
    let e = --a;
    let f = -a;
    let g = +a;
    let h = ~a;
    let i = 1 + 1 + 2 - 5;
    let j = (1 + 2) * (3 + 4);
    let k = !(1 + 2 + 3 == 4);
    let l = 1 + 2 != 4;
    let m = $Primitives.$widenLongToDouble(Long.f_MAX_VALUE__java_lang_Long) !=
        9.223372036854778E18;
    let o = $Primitives.$coerceDivision(5 / 2) - 0;
    a = a << 31;
    a = a << 1;
    a = $Primitives.$narrowLongToInt(
        $LongUtils.$plus($Primitives.$widenIntToLong(a), $Long.fromInt(1)));
    a = $Primitives.$narrowLongToInt(
        $LongUtils.$divide($Primitives.$widenIntToLong(a), $Long.fromInt(1)));
    a = $Primitives.$narrowDoubleToInt(
        a + Double.f_MAX_VALUE__java_lang_Double);
    k = !!(+k | +true);
    let s = 10;
    k = (s = $Primitives.$narrowIntToShort(s + 1)) == 10;
  }

  m_testCompoundArray__() {
    let ints = null;
    ints[0] += 1;
    ints[0] -= 1;
    ints[0] *= 1;
    $Arrays.$set(ints, 0, $Primitives.$coerceDivision(ints[0] / 1));
    ints[0] &= 1;
    ints[0] ^= 1;
    ints[0] |= 1;
    $Arrays.$set(ints, 0, $Primitives.$coerceDivision(ints[0] % 1));
    ints[0] <<= 1;
    ints[0] >>= 1;
    $Arrays.$set(ints, 0, ints[0] >>> 1 | 0);
    ints[0]++;
    ++ints[0];
    let i = 0;
    ints[i++]++;
    ++ints[++i];
    {
      let $array = ints, $index = i++;
      $Arrays.$set(
          $array, $index, $Primitives.$coerceDivision($array[$index] / 1));
    }
    let longs = null;
    $Arrays.$set(longs, 0, $LongUtils.$plus(longs[0], $Long.fromInt(1)));
    $Arrays.$set(longs, 0, $LongUtils.$minus(longs[0], $Long.fromInt(1)));
    $Arrays.$set(longs, 0, $LongUtils.$minus(longs[0], $Long.fromInt(1)));
    {
      let $array_1 = ArithmeticExpressions.m_getLongArray__();
      $Arrays.$set(
          $array_1, 0, $LongUtils.$plus($array_1[0], $Long.fromInt(1)));
    }
    let booleans = null;
    $Arrays.$set(booleans, 0, !!(+booleans[0] | +true));
    let strings = null;
    $Arrays.$set(
        strings, 0,
        j_l_String.m_valueOf__java_lang_Object(strings[0]) +
            j_l_String.m_valueOf__java_lang_Object(null));
    let shorts = null;
    let b = $Arrays.$set(
                shorts, 0, $Primitives.$narrowIntToShort(shorts[0] + 1)) == 10;
  }
  /** @return {Array<!$Long>} */
  static m_getLongArray__() {
    return null;
  }

  m_testCompoundBoxedTypes__() {
    let /** Integer */ $value, /** Integer */ $value_1, /** Integer */ $value_2;
    let c = Integer.m_valueOf__int(1000);
    let d = Integer.m_valueOf__int(10000);
    d = Integer.m_valueOf__int(d.m_intValue__() + c.m_intValue__());
    let i = 43;
    d = Integer.m_valueOf__int(d.m_intValue__() + i);
    d = Integer.m_valueOf__int(d.m_intValue__() << i);
    i += c.m_intValue__();
    let e = c = Integer.m_valueOf__int(c.m_intValue__() + 1);
    e = c = Integer.m_valueOf__int(c.m_intValue__() + 1);
    let e2 = 100;
    e2 = Double.m_doubleValue__java_lang_Double(e2) + 1;
    let f =
        ($value = c, c = Integer.m_valueOf__int(c.m_intValue__() + 1), $value);
    f =
        ($value_1 = c, c = Integer.m_valueOf__int(c.m_intValue__() + 1),
         $value_1);
    let b = Byte.m_valueOf__byte(0);
    b = Byte.m_valueOf__byte(
        $Primitives.$narrowIntToByte(b.m_byteValue__() + 1));
    let ch = Character.m_valueOf__char(99 /* 'c' */);
    ch = Character.m_valueOf__char(
        $Primitives.$narrowIntToChar(ch.m_charValue__() + 1 /* '\u0001' */));
    (f = Integer.m_valueOf__int(f.m_intValue__() + 1)).m_intValue__();
    ($value_2 = f, f = Integer.m_valueOf__int(f.m_intValue__() - 1), $value_2)
        .m_intValue__();
    let ref = null;
    ref.f_field__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions_1Ref =
        Integer.m_valueOf__int(
            /**@type {Integer}*/
            ($Casts.$to(
                 ref.f_field__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions_1Ref,
                 Integer))
                .m_intValue__() +
            1);
    let n = 1 +
        /**@type {Integer}*/
        ($Casts.$to(
             ref.f_field__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions_1Ref,
             Integer))
            .m_intValue__();
  }
  /** @return {Integer} */
  static m_getInteger__() {
    return null;
  }

  static m_testSideEffect__() {
    {
      let $qualifier = ArithmeticExpressions.m_getWithSideEffect__();
      $qualifier
          .f_intField__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions =
          $LongUtils.$plus(
              $qualifier
                  .f_intField__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions,
              $Long.fromInt(5));
    }
  }
  /** @return {ArithmeticExpressions} */
  static m_getWithSideEffect__() {
    return null;
  }

  m_testExtendedOperands__() {
    let boxedInteger = Integer.m_valueOf__int(3);
    let /** number */ i;
    let /** !$Long */ l;
    let /** number */ d;
    l = $LongUtils.$minus(
        $Primitives.$widenIntToLong(2 - boxedInteger.m_intValue__()),
        $Long.fromInt(2));
    l = $LongUtils.$or(
        $Primitives.$widenIntToLong(2 | boxedInteger.m_intValue__()),
        $Long.fromInt(2));
    l = $LongUtils.$times(
        $LongUtils.$times(
            $LongUtils.$times(
                $LongUtils.$times($Long.fromInt(1000000), l),
                $Long.fromInt(60)),
            $Long.fromInt(60)),
        $Long.fromInt(24));
    l = $LongUtils.$times(
        $LongUtils.$times($Primitives.$widenIntToLong(24 * 60 * 60), l),
        $Long.fromInt(1000000));
    d = $Primitives.$widenLongToDouble(l = $Primitives.$widenIntToLong(i = 20));
    l = $Primitives.$widenIntToLong(
        (boxedInteger = Integer.m_valueOf__int(i = 20)).m_intValue__());
    l = $LongUtils.$plus(
        $LongUtils.$plus(
            $Primitives.$widenIntToLong(i + boxedInteger.m_intValue__()), l),
        $Long.fromInt(20));
    d = $Primitives.$widenLongToDouble($LongUtils.$plus($Long.fromInt(20), l)) +
        d;
  }
  /** @private */
  $init___$p_com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions() {
    let /** !$Long */ $value;
    this.f_bar__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions =
        ($value =
             ArithmeticExpressions
                 .$f_foo__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions,
         ArithmeticExpressions
             .$f_foo__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions =
             $LongUtils.$plus(
                 ArithmeticExpressions
                     .$f_foo__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions,
                 $Long.fromInt(1)),
         $value);
  }
  /** @return {!$Long} */
  static get f_one__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions() {
    return (
        ArithmeticExpressions.$clinit(),
        ArithmeticExpressions
            .$f_one__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions);
  }

  static set f_one__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions(
      /** !$Long */ value) {
    (ArithmeticExpressions.$clinit(),
     ArithmeticExpressions
         .$f_one__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions =
         value);
  }
  /** @return {!$Long} */
  static get f_foo__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions() {
    return (
        ArithmeticExpressions.$clinit(),
        ArithmeticExpressions
            .$f_foo__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions);
  }

  static set f_foo__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions(
      /** !$Long */ value) {
    (ArithmeticExpressions.$clinit(),
     ArithmeticExpressions
         .$f_foo__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions =
         value);
  }

  static $clinit() {
    let /** !$Long */ $value;
    ArithmeticExpressions.$clinit = () => {};
    ArithmeticExpressions.$loadModules();
    j_l_Object.$clinit();
    ArithmeticExpressions
        .$f_one__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions =
        $Long.fromInt(1);
    ArithmeticExpressions
        .$f_foo__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions =
        ($value =
             ArithmeticExpressions
                 .$f_one__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions,
         ArithmeticExpressions
             .$f_one__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions =
             $LongUtils.$plus(
                 ArithmeticExpressions
                     .$f_one__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions,
                 $Long.fromInt(1)),
         $value);
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof ArithmeticExpressions;
  }

  static $loadModules() {
    Byte = goog.module.get('java.lang.Byte$impl');
    Character = goog.module.get('java.lang.Character$impl');
    Double = goog.module.get('java.lang.Double$impl');
    Integer = goog.module.get('java.lang.Integer$impl');
    Long = goog.module.get('java.lang.Long$impl');
    j_l_String = goog.module.get('java.lang.String$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    $LongUtils = goog.module.get('vmbootstrap.LongUtils$impl');
    $Primitives = goog.module.get('vmbootstrap.Primitives$impl');
  }
}
$Util.$setClassMetadata(
    ArithmeticExpressions,
    'com.google.j2cl.transpiler.readable.arithmeticexpressions.ArithmeticExpressions');

/**@const {number}*/
ArithmeticExpressions
    .f_FLOAT_CONSTANT__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions_ =
    1.100000023841858;
/**@const {number}*/
ArithmeticExpressions
    .f_DOUBLE_CONSTANT__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions_ =
    1.100000023841858;
/**@const {number}*/
ArithmeticExpressions
    .f_DOUBLE_CONSTANT_WITH_ARITHMETIC__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions_ =
    2.200000047683716;
/**@private {!$Long}*/
ArithmeticExpressions
    .$f_one__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions =
    $Long.fromInt(0);
/**@private {!$Long}*/
ArithmeticExpressions
    .$f_foo__com_google_j2cl_transpiler_readable_arithmeticexpressions_ArithmeticExpressions =
    $Long.fromInt(0);
exports = ArithmeticExpressions;
//# sourceMappingURL=ArithmeticExpressions.js.map
