goog.module('com.google.j2cl.transpiler.readable.simplebridgemethods.AnotherTask$impl');

const Callable = goog.require('com.google.j2cl.transpiler.readable.simplebridgemethods.Callable$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Superclass = goog.forwardDeclare('com.google.j2cl.transpiler.readable.simplebridgemethods.Superclass$impl');
let AssertionError = goog.forwardDeclare('java.lang.AssertionError$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @template T
 * @implements {Callable<Superclass<T>>}
 */
class AnotherTask extends j_l_Object {
  /** @protected */
  constructor() {
    super();
  }
  /** @template T @return {!AnotherTask<T>} */
  static $create__() {
    AnotherTask.$clinit();
    let $instance = new AnotherTask();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_AnotherTask__();
    return $instance;
  }

  $ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_AnotherTask__() {
    this.$ctor__java_lang_Object__();
  }

  m_call__com_google_j2cl_transpiler_readable_simplebridgemethods_Superclass(
      /** Superclass<T> */ t) {}
  // Bridge method.
  /** @override */
  m_call__java_lang_Object(/** Superclass<T> */ arg0) {
    this.m_call__com_google_j2cl_transpiler_readable_simplebridgemethods_Superclass(
        /**@type {Superclass<T>}*/ ($Casts.$to(arg0, Superclass)));
  }

  static $clinit() {
    AnotherTask.$clinit = () => {};
    AnotherTask.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof AnotherTask;
  }

  static $loadModules() {
    Superclass = goog.module.get(
        'com.google.j2cl.transpiler.readable.simplebridgemethods.Superclass$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
}
Callable.$markImplementor(AnotherTask);
$Util.$setClassMetadata(
    AnotherTask,
    'com.google.j2cl.transpiler.readable.simplebridgemethods.AnotherTask');

exports = AnotherTask;
//# sourceMappingURL=AnotherTask.js.map
