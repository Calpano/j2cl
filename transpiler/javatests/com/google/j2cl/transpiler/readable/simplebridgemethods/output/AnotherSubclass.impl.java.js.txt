goog.module('com.google.j2cl.transpiler.readable.simplebridgemethods.AnotherSubclass$impl');

const Superclass = goog.require('com.google.j2cl.transpiler.readable.simplebridgemethods.Superclass$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let AssertionError = goog.forwardDeclare('java.lang.AssertionError$impl');

/**
 * @extends {Superclass<AssertionError>}
 */
class AnotherSubclass extends Superclass {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!AnotherSubclass} */
  static $create__() {
    AnotherSubclass.$clinit();
    let $instance = new AnotherSubclass();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_AnotherSubclass__();
    return $instance;
  }

  $ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_AnotherSubclass__() {
    this.$ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_Superclass__();
  }

  static $clinit() {
    AnotherSubclass.$clinit = () => {};
    AnotherSubclass.$loadModules();
    Superclass.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof AnotherSubclass;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(
    AnotherSubclass,
    'com.google.j2cl.transpiler.readable.simplebridgemethods.AnotherSubclass');

exports = AnotherSubclass;
//# sourceMappingURL=AnotherSubclass.js.map