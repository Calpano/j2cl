goog.module('com.google.j2cl.transpiler.readable.jsbridgeaccidentaloverride.OtherInterface.$LambdaAdaptor$impl');

const OtherInterface = goog.require('com.google.j2cl.transpiler.readable.jsbridgeaccidentaloverride.OtherInterface$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

/**
 * @implements {OtherInterface}
 */
class $LambdaAdaptor extends j_l_Object {
  constructor(/** ?function(number):number */ fn) {
    $LambdaAdaptor.$clinit();
    super();
    /**@type {?function(number):number}*/
    this.f_$$fn__com_google_j2cl_transpiler_readable_jsbridgeaccidentaloverride_OtherInterface_$LambdaAdaptor;
    this.$ctor__com_google_j2cl_transpiler_readable_jsbridgeaccidentaloverride_OtherInterface_$LambdaAdaptor__com_google_j2cl_transpiler_readable_jsbridgeaccidentaloverride_OtherInterface_$JsFunction(
        fn);
  }

  $ctor__com_google_j2cl_transpiler_readable_jsbridgeaccidentaloverride_OtherInterface_$LambdaAdaptor__com_google_j2cl_transpiler_readable_jsbridgeaccidentaloverride_OtherInterface_$JsFunction(
      /** ?function(number):number */ fn) {
    this.$ctor__java_lang_Object__();
    this.f_$$fn__com_google_j2cl_transpiler_readable_jsbridgeaccidentaloverride_OtherInterface_$LambdaAdaptor =
        fn;
  }
  /** @return {number} */
  m_fun__int(/** number */ arg0) {
    let /** ?function(number):number */ $function;
    return (
        $function =
            this.f_$$fn__com_google_j2cl_transpiler_readable_jsbridgeaccidentaloverride_OtherInterface_$LambdaAdaptor,
        $function(arg0));
  }

  static $clinit() {
    $LambdaAdaptor.$clinit = () => {};
    $LambdaAdaptor.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof $LambdaAdaptor;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(
    $LambdaAdaptor,
    'com.google.j2cl.transpiler.readable.jsbridgeaccidentaloverride.OtherInterface$$LambdaAdaptor');
OtherInterface.$markImplementor($LambdaAdaptor);

exports = $LambdaAdaptor;
//# sourceMappingURL=OtherInterface$$LambdaAdaptor.js.map
