goog.module('com.google.j2cl.transpiler.readable.jsoptional.Main.TemplatedSubtype$impl');

const I = goog.require('com.google.j2cl.transpiler.readable.jsoptional.Main.I$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

/**
 * @template T
 * @implements {I<T>}
 */
class TemplatedSubtype extends j_l_Object {
  /** @protected */
  constructor() {
    super();
  }
  /** @template T @return {!TemplatedSubtype<T>} */
  static $create__() {
    TemplatedSubtype.$clinit();
    let $instance = new TemplatedSubtype();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsoptional_Main_TemplatedSubtype__();
    return $instance;
  }

  $ctor__com_google_j2cl_transpiler_readable_jsoptional_Main_TemplatedSubtype__() {
    this.$ctor__java_lang_Object__();
  }

  m(/** T */ t, /** *= */ o) {}

  static $clinit() {
    TemplatedSubtype.$clinit = () => {};
    TemplatedSubtype.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof TemplatedSubtype;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(
    TemplatedSubtype,
    'com.google.j2cl.transpiler.readable.jsoptional.Main$TemplatedSubtype');
I.$markImplementor(TemplatedSubtype);

exports = TemplatedSubtype;
//# sourceMappingURL=Main$TemplatedSubtype.js.map
