goog.module('com.google.j2cl.transpiler.readable.jsoptional.Main.SpecializedSubtype$impl');

const I = goog.require('com.google.j2cl.transpiler.readable.jsoptional.Main.I$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Main = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsoptional.Main$impl');
let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @implements {I<?string>}
 */
class SpecializedSubtype extends j_l_Object {
  constructor(/** Main */ $outer_this, /** *= */ a) {
    SpecializedSubtype.$clinit();
    super();
    /**@type {Main}*/
    this.f_$outer_this__com_google_j2cl_transpiler_readable_jsoptional_Main_SpecializedSubtype;
    this.$ctor__com_google_j2cl_transpiler_readable_jsoptional_Main_SpecializedSubtype__com_google_j2cl_transpiler_readable_jsoptional_Main__java_lang_Object(
        $outer_this, a);
  }

  $ctor__com_google_j2cl_transpiler_readable_jsoptional_Main_SpecializedSubtype__com_google_j2cl_transpiler_readable_jsoptional_Main__java_lang_Object(
      /** Main */ $outer_this, /** * */ a) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_jsoptional_Main_SpecializedSubtype =
        $outer_this;
    this.$ctor__java_lang_Object__();
  }

  m_m__java_lang_String__java_lang_Object(/** ?string */ t, /** * */ o) {}
  // Bridge method.
  /** @override */
  m(/** * */ arg0, /** *= */ arg1) {
    this.m_m__java_lang_String__java_lang_Object(
        /**@type {?string}*/ ($Casts.$to(arg0, j_l_String)), arg1);
  }

  static $clinit() {
    SpecializedSubtype.$clinit = () => {};
    SpecializedSubtype.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof SpecializedSubtype;
  }

  static $loadModules() {
    j_l_String = goog.module.get('java.lang.String$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
}
$Util.$setClassMetadata(
    SpecializedSubtype,
    'com.google.j2cl.transpiler.readable.jsoptional.Main$SpecializedSubtype');

I.$markImplementor(SpecializedSubtype);

exports = SpecializedSubtype;
//# sourceMappingURL=Main$SpecializedSubtype.js.map