goog.module('com.google.j2cl.transpiler.readable.subnativejstype.SubNativeJsType$impl');

const $Util = goog.require('nativebootstrap.Util$impl');
const MyNativeJsType = goog.require('test.foo.MyNativeJsType');

let $Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.subnativejstype.MyNativeJsType.$Overlay$impl');

class SubNativeJsType extends MyNativeJsType {
  // JsConstructor 'SubNativeJsType(int)'.
  constructor(/** number */ x) {
    SubNativeJsType.$clinit();
    super(x + 1);
    this.$ctor__com_google_j2cl_transpiler_readable_subnativejstype_SubNativeJsType__int(
        x);
  }

  // Initialization from constructor 'SubNativeJsType(int)'.
  $ctor__com_google_j2cl_transpiler_readable_subnativejstype_SubNativeJsType__int(
      /** number */ x) {}
  /** @return {!SubNativeJsType} */
  // Factory method corresponding to constructor 'SubNativeJsType()'.
  static $create__() {
    SubNativeJsType.$clinit();
    let $instance = new SubNativeJsType(10);
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_subnativejstype_SubNativeJsType__();
    return $instance;
  }

  // Initialization from constructor 'SubNativeJsType()'.
  $ctor__com_google_j2cl_transpiler_readable_subnativejstype_SubNativeJsType__() {
  }

  static $clinit() {
    SubNativeJsType.$clinit = () => {};
    SubNativeJsType.$loadModules();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof SubNativeJsType;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(
    SubNativeJsType,
    'com.google.j2cl.transpiler.readable.subnativejstype.SubNativeJsType');

exports = SubNativeJsType;
//# sourceMappingURL=SubNativeJsType.js.map