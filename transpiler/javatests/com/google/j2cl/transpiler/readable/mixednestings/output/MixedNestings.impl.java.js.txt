goog.module('com.google.j2cl.transpiler.readable.mixednestings.MixedNestings$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let A = goog.forwardDeclare('com.google.j2cl.transpiler.readable.mixednestings.MixedNestings.A$impl');

class MixedNestings extends j_l_Object {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!MixedNestings} */
  static $create__() {
    MixedNestings.$clinit();
    let $instance = new MixedNestings();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_mixednestings_MixedNestings__();
    return $instance;
  }

  $ctor__com_google_j2cl_transpiler_readable_mixednestings_MixedNestings__() {
    this.$ctor__java_lang_Object__();
  }

  m_mm__() {}

  m_test__() {
    A.$create__com_google_j2cl_transpiler_readable_mixednestings_MixedNestings(
         this)
        .m_a__();
  }

  static $clinit() {
    MixedNestings.$clinit = () => {};
    MixedNestings.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof MixedNestings;
  }

  static $loadModules() {
    A = goog.module.get(
        'com.google.j2cl.transpiler.readable.mixednestings.MixedNestings.A$impl');
  }
}
$Util.$setClassMetadata(
    MixedNestings,
    'com.google.j2cl.transpiler.readable.mixednestings.MixedNestings');

exports = MixedNestings;
//# sourceMappingURL=MixedNestings.js.map