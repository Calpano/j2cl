goog.module('com.google.j2cl.transpiler.readable.lambdas.Lambdas.FunctionalInterfaceWithMethodReturningVoid$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.lambdas.Lambdas.FunctionalInterfaceWithMethodReturningVoid.$LambdaAdaptor$impl');

/**
 * @interface
 */
class FunctionalInterfaceWithMethodReturningVoid {
  /** @abstract */
  m_run__() {}
  /** @return {FunctionalInterfaceWithMethodReturningVoid} */
  static $adapt(/** ?function():void */ fn) {
    FunctionalInterfaceWithMethodReturningVoid.$clinit();
    return new $LambdaAdaptor(fn);
  }

  static $clinit() {
    FunctionalInterfaceWithMethodReturningVoid.$clinit = () => {};
    FunctionalInterfaceWithMethodReturningVoid.$loadModules();
  }

  static $markImplementor(/** Function */ ctor) {
    ctor.prototype
        .$implements__com_google_j2cl_transpiler_readable_lambdas_Lambdas_FunctionalInterfaceWithMethodReturningVoid =
        true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_lambdas_Lambdas_FunctionalInterfaceWithMethodReturningVoid;
  }

  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.lambdas.Lambdas.FunctionalInterfaceWithMethodReturningVoid.$LambdaAdaptor$impl');
  }
}
$Util.$setClassMetadataForInterface(
    FunctionalInterfaceWithMethodReturningVoid,
    'com.google.j2cl.transpiler.readable.lambdas.Lambdas$FunctionalInterfaceWithMethodReturningVoid');

FunctionalInterfaceWithMethodReturningVoid.$markImplementor(
    /** @type {Function} */ (FunctionalInterfaceWithMethodReturningVoid));

exports = FunctionalInterfaceWithMethodReturningVoid;
//# sourceMappingURL=Lambdas$FunctionalInterfaceWithMethodReturningVoid.js.map
