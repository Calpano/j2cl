goog.module('com.google.j2cl.transpiler.readable.lambdas.Lambdas.BiFunction$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.lambdas.Lambdas.BiFunction.$LambdaAdaptor$impl');
let Lambdas_Function = goog.forwardDeclare('com.google.j2cl.transpiler.readable.lambdas.Lambdas.Function$impl');

/**
 * @interface
 * @template T, U, R
 */
class BiFunction {
  /** @abstract @return {R} */
  m_apply__java_lang_Object__java_lang_Object(/** T */ t, /** U */ u) {}
  /** @abstract @template V @return {BiFunction<T, U, V>} */
  m_andThen__com_google_j2cl_transpiler_readable_lambdas_Lambdas_Function(
      /** Lambdas_Function<?, ?> */ after) {}
  /** @template T, U, R @return {BiFunction<T, U, R>} */
  static $adapt(/** ?function(T, U):R */ fn) {
    BiFunction.$clinit();
    return /**@type {!$LambdaAdaptor<T, U, R>}*/ (new $LambdaAdaptor(fn));
  }
  /** @template V, T, U, R @return {BiFunction<T, U, V>} */
  static m_andThen__$default__com_google_j2cl_transpiler_readable_lambdas_Lambdas_BiFunction__com_google_j2cl_transpiler_readable_lambdas_Lambdas_Function(
      /** !BiFunction<T, U, R> */ $thisArg,
      /** Lambdas_Function<?, ?> */ after) {
    BiFunction.$clinit();
    return /**@type {BiFunction<T, U, V>}*/ (
        BiFunction.$adapt((/** T */ t, /** U */ u) => {
          return after.m_apply__java_lang_Object(
              $thisArg.m_apply__java_lang_Object__java_lang_Object(t, u));
        }));
  }

  static $clinit() {
    BiFunction.$clinit = () => {};
    BiFunction.$loadModules();
  }

  static $markImplementor(/** Function*/ ctor) {
    ctor.prototype
        .$implements__com_google_j2cl_transpiler_readable_lambdas_Lambdas_BiFunction =
        true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_lambdas_Lambdas_BiFunction;
  }

  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.lambdas.Lambdas.BiFunction.$LambdaAdaptor$impl');
  }
}
$Util.$setClassMetadataForInterface(
    BiFunction,
    'com.google.j2cl.transpiler.readable.lambdas.Lambdas$BiFunction');

BiFunction.$markImplementor(/** @type {Function} */ (BiFunction));

exports = BiFunction;
//# sourceMappingURL=Lambdas$BiFunction.js.map