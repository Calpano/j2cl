goog.module('com.google.j2cl.transpiler.readable.lambdas.Lambdas.GenericFunctionalInterface$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.lambdas.Lambdas.GenericFunctionalInterface.$LambdaAdaptor$impl');

/**
 * @interface
 * @template T
 */
class GenericFunctionalInterface {
  /** @abstract @return {T} */
  m_m__java_lang_Object(/** T */ i) {}
  /** @template T @return {GenericFunctionalInterface<T>} */
  static $adapt(/** ?function(T):T */ fn) {
    GenericFunctionalInterface.$clinit();
    return /**@type {!$LambdaAdaptor<T>}*/ (new $LambdaAdaptor(fn));
  }

  static $clinit() {
    GenericFunctionalInterface.$clinit = () => {};
    GenericFunctionalInterface.$loadModules();
  }

  static $markImplementor(/** Function*/ ctor) {
    ctor.prototype
        .$implements__com_google_j2cl_transpiler_readable_lambdas_Lambdas_GenericFunctionalInterface =
        true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_lambdas_Lambdas_GenericFunctionalInterface;
  }

  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.lambdas.Lambdas.GenericFunctionalInterface.$LambdaAdaptor$impl');
  }
}
$Util.$setClassMetadataForInterface(
    GenericFunctionalInterface,
    'com.google.j2cl.transpiler.readable.lambdas.Lambdas$GenericFunctionalInterface');

GenericFunctionalInterface.$markImplementor(
    /** @type {Function} */ (GenericFunctionalInterface));

exports = GenericFunctionalInterface;
//# sourceMappingURL=Lambdas$GenericFunctionalInterface.js.map